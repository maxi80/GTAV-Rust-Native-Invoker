#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::all)]
#![allow(unknown_lints)]

use std::os::raw::c_char;

use crate::invoker::InvokerContext;
use super::types::*;

pub mod system {
	use super::*;

	native!(wait, 0x4EDE34FBADD967A6, (), ms: i32);
	native!(start_new_script, 0xE81651AD79516E48, i32, script_name: *const c_char, stack_size: i32);
	native!(start_new_script_with_args, 0xB8BA7F44DF1575E1, i32, script_name: *const c_char, args: &mut i32, arg_count: i32, stack_size: i32);
	native!(start_new_script_with_name_hash, 0xEB1C67C3A5333A92, i32, script_hash: Hash, stack_size: i32);
	native!(start_new_script_with_name_hash_and_args, 0xC4BB298BD441BE78, i32, script_hash: Hash, args: &mut i32, arg_count: i32, stack_size: i32);
	native!(timera, 0x83666F9FB8FEBD4B, i32);
	native!(timerb, 0xC9D9444186B5A374, i32);
	native!(settimera, 0xC1B1E9A034A63A62, (), value: i32);
	native!(settimerb, 0x5AE11BC36633DE4E, (), value: i32);
	native!(timestep, 0x0000000050597EE2, f32);
	native!(sin, 0x0BADBFA3B172435F, f32, value: f32);
	native!(cos, 0xD0FFB162F40A139C, f32, value: f32);
	native!(sqrt, 0x71D93B57D07F9804, f32, value: f32);
	native!(pow, 0xE3621CC40F31FE2E, f32, base: f32, exponent: f32);
	native!(_log10, 0xE816E655DE37FE20, f32, value: f32);
	native!(vmag, 0x652D2EEEF1D3E62C, f32, x: f32, y: f32, z: f32);
	native!(vmag2, 0xA8CEACB4F35AE058, f32, x: f32, y: f32, z: f32);
	native!(vdist, 0x2A488C176D52CCA5, f32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
	native!(vdist2, 0xB7A628320EFF8E47, f32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
	native!(shift_left, 0xEDD95A39E5544DE8, i32, value: i32, bit_shift: i32);
	native!(shift_right, 0x97EF1E5BCE9DC075, i32, value: i32, bit_shift: i32);
	native!(floor, 0xF34EE736CF047844, i32, value: f32);
	native!(ceil, 0x11E019C8F43ACC8A, i32, value: f32);
	native!(round, 0xF2DB717A73826179, i32, value: f32);
	native!(to_float, 0xBBDA792448DB5A89, f32, value: i32);
	native!(_set_thread_priority, 0x42B65DEEF2EDF2A1, (), priority: i32);
}

pub mod app {
	use super::*;

	native!(app_data_valid, 0x846AA8E7D55EE5B6, bool);
	native!(app_get_int, 0xD3A58A12C77D9D4B, i32, property: *const c_char);
	native!(app_get_float, 0x1514FB24C02C2322, f32, property: *const c_char);
	native!(app_get_string, 0x749B023950D2311C, *const c_char, property: *const c_char);
	native!(app_set_int, 0x607E8E3D3E4F9611, (), property: *const c_char, value: i32);
	native!(app_set_float, 0x25D7687C68E0DAA4, (), property: *const c_char, value: f32);
	native!(app_set_string, 0x3FF2FCEC4B7721B4, (), property: *const c_char, value: *const c_char);
	native!(app_set_app, 0xCFD0406ADAF90D2B, (), app_name: *const c_char);
	native!(app_set_block, 0x262AB456A3D21F93, (), block_name: *const c_char);
	native!(app_clear_block, 0x5FE1DF3342DB7DBA, ());
	native!(app_close_app, 0xE41C65E07A5F05FC, ());
	native!(app_close_block, 0xE8E3FCF72EAC0EF8, ());
	native!(app_has_linked_social_club_account, 0x71EEE69745088DA0, bool);
	native!(app_has_synced_data, 0xCA52279A7271517F, bool, app_name: *const c_char);
	native!(app_save_data, 0x95C5D356CDA6E85F, ());
	native!(app_get_deleted_file_status, 0xC9853A2BE3DED1A6, i32);
	native!(app_delete_app_data, 0x44151AEA95C8A003, bool, app_name: *const c_char);
}

pub mod audio {
	use super::*;

	native!(play_ped_ringtone, 0xF9E56683CA8E11A5, (), ringtone_name: *const c_char, ped: Ped, p2: bool);
	native!(is_ped_ringtone_playing, 0x1E8E5E20937E3137, bool, ped: Ped);
	native!(stop_ped_ringtone, 0x6C5AE23EFA885092, (), ped: Ped);
	native!(is_mobile_phone_call_ongoing, 0x7497D2CE2C30D24C, bool);
	native!(_0xc8b1b2425604cdd0, 0xC8B1B2425604CDD0, bool);
	native!(create_new_scripted_conversation, 0xD2C91A0B572AAE56, ());
	native!(add_line_to_conversation, 0xC5EF963405593646, (), index: i32, p1: *const c_char, p2: *const c_char, p3: i32, p4: i32, p5: bool, p6: bool, p7: bool, p8: bool, p9: i32, p10: bool, p11: bool, p12: bool);
	native!(add_ped_to_conversation, 0x95D9F4BC443956E7, (), index: i32, ped: Ped, p2: *const c_char);
	native!(_0x33e3c6c6f2f0b506, 0x33E3C6C6F2F0B506, (), p0: i32, p1: f32, p2: f32, p3: f32);
	native!(_0x892b6ab8f33606f5, 0x892B6AB8F33606F5, (), p0: i32, entity: Entity);
	native!(set_microphone_position, 0xB6AE90EDDE95C762, (), p0: bool, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, x3: f32, y3: f32, z3: f32);
	native!(_0x0b568201dd99f0eb, 0x0B568201DD99F0EB, (), p0: bool);
	native!(_0x61631f5df50d1c34, 0x61631F5DF50D1C34, (), p0: bool);
	native!(start_script_phone_conversation, 0x252E5F915EABB675, (), p0: bool, p1: bool);
	native!(preload_script_phone_conversation, 0x6004BCB0E226AAEA, (), p0: bool, p1: bool);
	native!(start_script_conversation, 0x6B17C62C9635D2DC, (), p0: bool, p1: bool, p2: bool, p3: bool);
	native!(preload_script_conversation, 0x3B3CAD6166916D87, (), p0: bool, p1: bool, p2: bool, p3: bool);
	native!(start_preloaded_conversation, 0x23641AFE870AF385, ());
	native!(get_is_preloaded_conversation_ready, 0xE73364DB90778FFA, bool);
	native!(is_scripted_conversation_ongoing, 0x16754C556D2EDE3D, bool);
	native!(is_scripted_conversation_loaded, 0xDF0D54BE7A776737, bool);
	native!(get_current_scripted_conversation_line, 0x480357EE890C295A, i32);
	native!(pause_scripted_conversation, 0x8530AD776CD72B12, (), p0: bool);
	native!(restart_scripted_conversation, 0x9AEB285D1818C9AC, ());
	native!(stop_scripted_conversation, 0xD79DEEFB53455EBA, i32, p0: bool);
	native!(skip_to_next_scripted_conversation_line, 0x9663FE6B7A61EB00, ());
	native!(interrupt_conversation, 0xA018A12E5C5C2FA6, (), p0: i32, p1: &mut i32, p2: &mut i32);
	native!(interrupt_conversation_and_pause, 0x8A694D7A68F8DC38, (), p0: Ped, p1: *const c_char, p2: *const c_char);
	native!(_0xaa19f5572c38b564, 0xAA19F5572C38B564, i32, p0: &mut i32);
	native!(_0xb542de8c3d1cb210, 0xB542DE8C3D1CB210, (), p0: bool);
	native!(register_script_with_audio, 0xC6ED9D5092438D91, (), p0: i32);
	native!(unregister_script_with_audio, 0xA8638BE228D4751A, ());
	native!(request_mission_audio_bank, 0x7345BDD95E62E0F2, bool, p0: *const c_char, p1: bool, p2: i32);
	native!(request_ambient_audio_bank, 0xFE02FFBED8CA9D99, bool, p0: *const c_char, p1: bool, p2: i32);
	native!(request_script_audio_bank, 0x2F844A8B08D76685, bool, p0: *const c_char, p1: bool, p2: i32);
	native!(_0x40763ea7b9b783e7, 0x40763EA7B9B783E7, i32, p0: i32, p1: i32, p2: i32);
	native!(hint_ambient_audio_bank, 0x8F8C0E370AE62F5C, i32, p0: i32, p1: i32, p2: i32);
	native!(hint_script_audio_bank, 0xFB380A29641EC31A, i32, p0: i32, p1: i32, p2: i32);
	native!(release_mission_audio_bank, 0x0EC92A1BF0857187, ());
	native!(release_ambient_audio_bank, 0x65475A218FFAA93D, ());
	native!(release_named_script_audio_bank, 0x77ED170667F50170, (), audio_bank: *const c_char);
	native!(release_script_audio_bank, 0x7A2D8AD0A9EB9C3F, ());
	native!(_0x19af7ed9b9d23058, 0x19AF7ED9B9D23058, ());
	native!(_0x9ac92eed5e4793ab, 0x9AC92EED5E4793AB, ());
	native!(_0x11579d940949c49e, 0x11579D940949C49E, (), p0: i32);
	native!(get_sound_id, 0x430386FE9BF80B45, i32);
	native!(release_sound_id, 0x353FC880830B88FA, (), sound_id: i32);
	native!(play_sound, 0x7FF4944CC209192D, (), sound_id: i32, audio_name: *const c_char, audio_ref: *const c_char, p3: bool, p4: i32, p5: bool);
	native!(play_sound_frontend, 0x67C540AA08E4A6F5, (), sound_id: i32, audio_name: *const c_char, audio_ref: *const c_char, p3: bool);
	native!(play_deferred_sound_frontend, 0xCADA5A0D0702381E, (), sound_name: *const c_char, soundset_name: *const c_char);
	native!(play_sound_from_entity, 0xE65F427EB70AB1ED, (), sound_id: i32, audio_name: *const c_char, entity: Entity, audio_ref: *const c_char, is_network: bool, p5: i32);
	native!(_0x5b9853296731e88d, 0x5B9853296731E88D, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(play_sound_from_coord, 0x8D8686B622B88120, (), sound_id: i32, audio_name: *const c_char, x: f32, y: f32, z: f32, audio_ref: *const c_char, is_network: bool, range: i32, p8: bool);
	native!(_0x7ec3c679d0e7e46b, 0x7EC3C679D0E7E46B, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(stop_sound, 0xA3B0C41BA5CC0BB5, (), sound_id: i32);
	native!(get_network_id_from_sound_id, 0x2DE3F0A134FFBC0D, i32, sound_id: i32);
	native!(get_sound_id_from_network_id, 0x75262FD12D0A1C84, i32, net_id: i32);
	native!(set_variable_on_sound, 0xAD6B3148A78AE9B6, (), sound_id: i32, p1: &mut i32, p2: f32);
	native!(set_variable_on_stream, 0x2F9D3834AEB9EF79, (), p0: *const c_char, p1: f32);
	native!(override_underwater_stream, 0xF2A9CDABCEA04BD6, (), p0: &mut i32, p1: bool);
	native!(set_variable_on_under_water_stream, 0x733ADF241531E5C2, (), variable_name: *const c_char, value: f32);
	native!(has_sound_finished, 0xFCBDCE714A7C88E5, bool, sound_id: i32);
	native!(_play_ambient_speech1, 0x8E04FEDD28D42462, (), ped: Ped, speech_name: *const c_char, speech_param: *const c_char, p3: i32);
	native!(_play_ambient_speech2, 0xC6941B4A3A8FBBB9, (), ped: Ped, speech_name: *const c_char, speech_param: *const c_char, p3: i32);
	native!(_play_ambient_speech_with_voice, 0x3523634255FC3318, (), p0: Ped, speech_name: *const c_char, voice_name: *const c_char, speech_param: *const c_char, p4: bool);
	native!(_play_ambient_speech_at_coords, 0xED640017ED337E45, (), p0: *const c_char, p1: *const c_char, p2: f32, p3: f32, p4: f32, p5: *const c_char);
	native!(override_trevor_rage, 0x13AD665062541A7E, (), p0: *const c_char);
	native!(reset_trevor_rage, 0xE78503B10C4314E0, ());
	native!(set_player_angry, 0xEA241BB04110F091, (), ped: Ped, toggle: bool);
	native!(play_pain, 0xBC9AE166038A5CEC, (), ped: Ped, pain_id: i32, p1: i32, p3: i32);
	native!(release_weapon_audio, 0xCE4AC0439F607045, ());
	native!(activate_audio_slowmo_mode, 0xD01005D2BA2EB778, (), p0: *const c_char);
	native!(deactivate_audio_slowmo_mode, 0xDDC635D5B3262C56, (), p0: *const c_char);
	native!(set_ambient_voice_name, 0x6C8065A3B780185B, (), ped: Ped, name: *const c_char);
	native!(_set_ambient_voice_name_hash, 0x9A53DED9921DE990, (), ped: Ped, hash: Hash);
	native!(_get_ambient_voice_name_hash, 0x5E203DA2BA15D436, Hash, ped: Ped);
	native!(_set_ped_scream, 0x40CF0D12D142A9E8, (), ped: Ped);
	native!(_0x1b7abe26cbcbf8c7, 0x1B7ABE26CBCBF8C7, (), ped: Ped, p1: i32, p2: i32);
	native!(_set_ped_voice_group, 0x7CDC8C3B89F661B3, (), ped: Ped, voice_group_hash: Hash);
	native!(_0xa5342d390cda41d6, 0xA5342D390CDA41D6, (), ped: Ped, p1: bool);
	native!(stop_current_playing_speech, 0x7A73D05A607734C7, (), ped: Ped);
	native!(stop_current_playing_ambient_speech, 0xB8BEC0CA6F0EDB0F, (), ped: Ped);
	native!(is_ambient_speech_playing, 0x9072C8B49907BFAD, bool, ped: Ped);
	native!(is_scripted_speech_playing, 0xCC9AA18DCC7084F4, bool, p0: i32);
	native!(is_any_speech_playing, 0x729072355FA39EC9, bool, ped: Ped);
	native!(_can_ped_speak, 0x49B99BF3FDA89A7A, bool, ped: Ped, speech_name: *const c_char, unk: bool);
	native!(is_ped_in_current_conversation, 0x049E937F18F4020C, bool, ped: Ped);
	native!(set_ped_is_drunk, 0x95D2D383D5396B8A, (), ped: Ped, toggle: bool);
	native!(play_animal_vocalization, 0xEE066C7006C49C0A, (), ped_handle: Ped, p1: i32, p2: &mut i32);
	native!(is_animal_vocalization_playing, 0xC265DF9FB44A9FBD, bool, ped_handle: Ped);
	native!(set_animal_mood, 0xCC97B29285B1DC3B, (), animal: Ped, mood: i32);
	native!(is_mobile_phone_radio_active, 0xB35CE999E8EF317E, bool);
	native!(set_mobile_phone_radio_state, 0xBF286C554784F3DF, (), state: bool);
	native!(get_player_radio_station_index, 0xE8AF77C4C06ADC93, i32);
	native!(get_player_radio_station_name, 0xF6D733C32076AD03, *const c_char);
	native!(get_radio_station_name, 0xB28ECA15046CA8B9, *const c_char, radio_station: i32);
	native!(get_player_radio_station_genre, 0xA571991A7FE6CCEB, i32);
	native!(is_radio_retuning, 0xA151A7394A214E65, bool);
	native!(is_radio_faded_out, 0x0626A247D2405330, bool);
	native!(_0xff266d1d0eb1195d, 0xFF266D1D0EB1195D, ());
	native!(_0xdd6bcf9e94425df9, 0xDD6BCF9E94425DF9, ());
	native!(set_radio_to_station_name, 0xC69EDA28699D5107, (), station_name: *const c_char);
	native!(set_veh_radio_station, 0x1B9C0099CB942AC6, (), vehicle: Vehicle, radio_station: *const c_char);
	native!(_0x0be4be946463f917, 0x0BE4BE946463F917, bool, vehicle: Vehicle);
	native!(_0xc1805d05e6d4fe10, 0xC1805D05E6D4FE10, (), vehicle: Vehicle);
	native!(set_emitter_radio_station, 0xACF57305B12AF907, (), emitter_name: *const c_char, radio_station: *const c_char);
	native!(set_static_emitter_enabled, 0x399D2D3B33F1B8EB, (), emitter_name: *const c_char, toggle: bool);
	native!(_link_static_emitter_to_entity, 0x651D3228960D08AF, (), emitter_name: *const c_char, entity: Entity);
	native!(set_radio_to_station_index, 0xA619B168B8A8570F, (), radio_station: i32);
	native!(set_frontend_radio_active, 0xF7F26C6E9CC9EBB8, (), active: bool);
	native!(unlock_mission_news_story, 0xB165AB7C248B2DC1, (), news_story: i32);
	native!(is_mission_news_story_unlocked, 0x66E49BF55B4B1874, bool, news_story: i32);
	native!(get_audible_music_track_text_id, 0x50B196FC9ED6545B, i32);
	native!(play_end_credits_music, 0xCD536C4D33DCC900, (), play: bool);
	native!(skip_radio_forward, 0x6DDBBDD98E2E9C25, ());
	native!(freeze_radio_station, 0x344F393B027E38C3, (), radio_station: *const c_char);
	native!(unfreeze_radio_station, 0xFC00454CF60B91DD, (), radio_station: *const c_char);
	native!(set_radio_auto_unfreeze, 0xC1AA9F53CE982990, (), toggle: bool);
	native!(set_initial_player_station, 0x88795F13FACDA88D, (), radio_station: *const c_char);
	native!(set_user_radio_control_enabled, 0x19F21E63AE6EAE4E, (), toggle: bool);
	native!(set_radio_track, 0xB39786F201FEE30B, (), radio_station: *const c_char, radio_track: *const c_char);
	native!(_set_radio_track_mix, 0x2CB0075110BE1E56, (), radio_station_name: *const c_char, mix_name: *const c_char, p2: i32);
	native!(set_vehicle_radio_loud, 0xBB6F1CAEC68B0BCE, (), vehicle: Vehicle, toggle: bool);
	native!(_is_vehicle_radio_loud, 0x032A116663A4D5AC, bool, vehicle: Vehicle);
	native!(set_mobile_radio_enabled_during_gameplay, 0x1098355A16064BB3, (), toggle: bool);
	native!(does_player_veh_have_radio, 0x109697E2FFBAC8A1, bool);
	native!(is_player_veh_radio_enable, 0x5F43D83FD6738741, bool);
	native!(set_vehicle_radio_enabled, 0x3B988190C0AA6C0B, (), vehicle: Vehicle, toggle: bool);
	native!(_0xda07819e452ffe8f, 0xDA07819E452FFE8F, (), p0: i32);
	native!(set_custom_radio_track_list, 0x4E404A9361F75BB2, (), radio_station: *const c_char, track_list_name: *const c_char, p2: bool);
	native!(clear_custom_radio_track_list, 0x1654F24A88A8E3FE, (), radio_station: *const c_char);
	native!(get_num_unlocked_radio_stations, 0xF1620ECB50E01DE7, i32);
	native!(find_radio_station_index, 0x8D67489793FF428B, i32, station: i32);
	native!(set_radio_station_music_only, 0x774BD811F656A122, (), radio_station: *const c_char, toggle: bool);
	native!(set_radio_frontend_fade_time, 0x2C96CDB04FCA358E, (), p0: f32);
	native!(unlock_radio_station_track_list, 0x031ACB6ABA18C729, (), radio_station: *const c_char, track_list_name: *const c_char);
	native!(_update_lsur, 0x47AED84213A47510, (), enable_mixes: bool);
	native!(_lock_radio_station, 0x477D9DB48F889591, (), radio_station_name: *const c_char, toggle: bool);
	native!(_0xc64a06d939f826f5, 0xC64A06D939F826F5, bool, p0: &mut f32, p1: &mut i32, p2: &mut i32);
	native!(_0x3e65cde5215832c1, 0x3E65CDE5215832C1, i32, radio_station_name: *const c_char);
	native!(_0x34d66bc058019ce0, 0x34D66BC058019CE0, Hash, radio_station_name: *const c_char);
	native!(_0xf3365489e0dd50f9, 0xF3365489E0DD50F9, (), vehicle: Vehicle, toggle: bool);
	native!(set_ambient_zone_state, 0xBDA07E5950085E46, (), zone_name: *const c_char, p1: bool, p2: bool);
	native!(clear_ambient_zone_state, 0x218DD44AAAC964FF, (), zone_name: *const c_char, p1: bool);
	native!(set_ambient_zone_list_state, 0x9748FA4DE50CCE3E, (), p0: &mut i32, p1: bool, p2: bool);
	native!(clear_ambient_zone_list_state, 0x120C48C614909FA4, (), p0: &mut i32, p1: bool);
	native!(set_ambient_zone_state_persistent, 0x1D6650420CEC9D3B, (), ambient_zone: *const c_char, p1: bool, p2: bool);
	native!(set_ambient_zone_list_state_persistent, 0xF3638DAE8C4045E1, (), ambient_zone: *const c_char, p1: bool, p2: bool);
	native!(is_ambient_zone_enabled, 0x01E2817A479A7F9B, bool, ambient_zone: *const c_char);
	native!(_0x5d2bfaab8d956e0e, 0x5D2BFAAB8D956E0E, ());
	native!(set_cutscene_audio_override, 0x3B4BF5F0859204D9, (), name: *const c_char);
	native!(_set_variable_on_cutscene_audio, 0xBCC29F935ED07688, (), variable_name: *const c_char, value: f32);
	native!(play_police_report, 0xDFEBD56D9BD1EB16, i32, name: *const c_char, p1: f32);
	native!(_cancel_current_police_report, 0xB4F90FAF7670B16F, ());
	native!(blip_siren, 0x1B9025BDA76822B6, (), vehicle: Vehicle);
	native!(override_veh_horn, 0x3CDC1E622CCE0356, (), vehicle: Vehicle, mute: bool, p2: i32);
	native!(is_horn_active, 0x9D6BFC12B05C6121, bool, vehicle: Vehicle);
	native!(set_aggressive_horns, 0x395BF71085D1B1D9, (), toggle: bool);
	native!(_0x02e93c796abd3a97, 0x02E93C796ABD3A97, (), p0: bool);
	native!(_0x58bb377bec7cd5f4, 0x58BB377BEC7CD5F4, (), p0: bool, p1: bool);
	native!(_0x9bd7bd55e4533183, 0x9BD7BD55E4533183, (), p0: i32, p1: i32, p2: i32);
	native!(is_stream_playing, 0xD11FA52EB849D978, bool);
	native!(get_stream_play_time, 0x4E72BBDBCA58A3DB, i32);
	native!(load_stream, 0x1F1F957154EC51DF, bool, stream_name: *const c_char, sound_set: *const c_char);
	native!(load_stream_with_start_offset, 0x59C16B79F53B3712, bool, stream_name: *const c_char, start_offset: i32, sound_set: *const c_char);
	native!(play_stream_from_ped, 0x89049DD63C08B5D1, (), ped: Ped);
	native!(play_stream_from_vehicle, 0xB70374A758007DFA, (), vehicle: Vehicle);
	native!(play_stream_from_object, 0xEBAA9B64D76356FD, (), object: Object);
	native!(play_stream_frontend, 0x58FCE43488F9F5F4, ());
	native!(play_stream_from_position, 0x21442F412E8DE56B, (), x: f32, y: f32, z: f32);
	native!(stop_stream, 0xA4718A1419D18151, ());
	native!(stop_ped_speaking, 0x9D64D7405520E3D3, (), ped: Ped, shaking: bool);
	native!(_0xf8ad2eed7c47e8fe, 0xF8AD2EED7C47E8FE, (), ped: Ped, p1: bool, p2: bool);
	native!(disable_ped_pain_audio, 0xA9A41C1E940FB0E8, (), ped: Ped, toggle: bool);
	native!(is_ambient_speech_disabled, 0x932C2D096A2C3FFF, bool, ped: Ped);
	native!(_0xa8a7d434afb4b97b, 0xA8A7D434AFB4B97B, (), p0: *const c_char, p1: i32);
	native!(_0x2acabed337622df2, 0x2ACABED337622DF2, (), p0: *const c_char);
	native!(set_siren_with_no_driver, 0x1FEF0683B96EBCF2, (), vehicle: Vehicle, toggle: bool);
	native!(_0x66c3fb05206041ba, 0x66C3FB05206041BA, (), p0: i32);
	native!(_sound_vehicle_horn_this_frame, 0x9C11908013EA4715, (), vehicle: Vehicle);
	native!(set_horn_enabled, 0x76D683C108594D0E, (), vehicle: Vehicle, toggle: bool);
	native!(set_audio_vehicle_priority, 0xE5564483E407F914, (), vehicle: Vehicle, p1: i32);
	native!(_0x9d3af56e94c9ae98, 0x9D3AF56E94C9AE98, (), vehicle: Vehicle, p1: f32);
	native!(use_siren_as_horn, 0xFA932DE350266EF8, (), vehicle: Vehicle, toggle: bool);
	native!(_force_vehicle_engine_audio, 0x4F0C413926060B38, (), vehicle: Vehicle, audio_name: *const c_char);
	native!(_0xca4cea6ae0000a7e, 0xCA4CEA6AE0000A7E, (), p0: i32);
	native!(_0xf1f8157b8c3f171c, 0xF1F8157B8C3F171C, (), vehicle: Vehicle, p1: *const c_char, p2: *const c_char);
	native!(_0xd2dccd8e16e20997, 0xD2DCCD8E16E20997, (), p0: i32);
	native!(_0x5db8010ee71fdef2, 0x5DB8010EE71FDEF2, bool, vehicle: Vehicle);
	native!(set_vehicle_audio_engine_damage_factor, 0x59E7B488451F4D3A, (), vehicle: Vehicle, damage_factor: f32);
	native!(_0x01bb4d577d38bd9e, 0x01BB4D577D38BD9E, (), vehicle: Vehicle, p1: f32);
	native!(_0x1c073274e065c6d2, 0x1C073274E065C6D2, (), vehicle: Vehicle, toggle: bool);
	native!(enable_vehicle_exhaust_pops, 0x2BE4BC731D039D5A, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_boost_active, 0x4A04DE7CAB2739A1, (), vehicle: Vehicle, toggle: bool);
	native!(_0x6fddad856e36988a, 0x6FDDAD856E36988A, (), vehicle: Vehicle, toggle: bool);
	native!(set_script_update_door_audio, 0x06C0023BED16DD6B, (), door_hash: Hash, toggle: bool);
	native!(play_vehicle_door_open_sound, 0x3A539D52857EA82D, (), vehicle: Vehicle, door_index: i32);
	native!(play_vehicle_door_close_sound, 0x62A456AA4769EF34, (), vehicle: Vehicle, door_index: i32);
	native!(enable_stall_warning_sounds, 0xC15907D667F7CFB2, (), vehicle: Vehicle, toggle: bool);
	native!(is_game_in_control_of_music, 0x6D28DC1671E334FD, bool);
	native!(set_gps_active, 0x3BD3F52BA9B1E4E8, (), active: bool);
	native!(play_mission_complete_audio, 0xB138AAB8A70D3C69, (), audio_name: *const c_char);
	native!(is_mission_complete_playing, 0x19A30C23F5827F8A, bool);
	native!(is_mission_complete_ready_for_ui, 0x6F259F82D873B8B8, bool);
	native!(block_death_jingle, 0xF154B8D1775B2DEC, (), toggle: bool);
	native!(start_audio_scene, 0x013A80FC08F6E4F2, bool, scene: *const c_char);
	native!(stop_audio_scene, 0xDFE8422B3B94E688, (), scene: *const c_char);
	native!(stop_audio_scenes, 0xBAC7FC81A75EC1A1, ());
	native!(is_audio_scene_active, 0xB65B60556E2A9225, bool, scene: *const c_char);
	native!(set_audio_scene_variable, 0xEF21A9EF089A2668, (), scene: *const c_char, variable: *const c_char, value: f32);
	native!(_0xa5f377b175a699c5, 0xA5F377B175A699C5, (), p0: i32);
	native!(add_entity_to_audio_mix_group, 0x153973AB99FE8980, (), entity: Entity, group_name: *const c_char, p2: f32);
	native!(remove_entity_from_audio_mix_group, 0x18EB48CFC41F2EA0, (), entity: Entity, p1: f32);
	native!(audio_is_scripted_music_playing, 0x845FFC3A4FEEFA3E, bool);
	native!(_0x2dd39bf3e2f9c47f, 0x2DD39BF3E2F9C47F, i32);
	native!(prepare_music_event, 0x1E5185B72EF5158A, bool, event_name: *const c_char);
	native!(cancel_music_event, 0x5B17A90291133DA5, bool, event_name: *const c_char);
	native!(trigger_music_event, 0x706D57B0F50DA710, bool, event_name: *const c_char);
	native!(is_music_oneshot_playing, 0xA097AB275061FB21, bool);
	native!(get_music_playtime, 0xE7A0D23DC414507B, i32);
	native!(_0x159b7318403a1cd8, 0x159B7318403A1CD8, (), p0: i32);
	native!(record_broken_glass, 0xFBE20329593DEC9D, (), x: f32, y: f32, z: f32, radius: f32);
	native!(clear_all_broken_glass, 0xB32209EFFDC04913, ());
	native!(_0x70b8ec8fc108a634, 0x70B8EC8FC108A634, (), p0: bool, p1: i32);
	native!(_0x149aee66f0cb3a99, 0x149AEE66F0CB3A99, (), p0: f32, p1: f32);
	native!(_0x8bf907833be275de, 0x8BF907833BE275DE, (), p0: f32, p1: f32);
	native!(_0x062d5ead4da2fa6a, 0x062D5EAD4DA2FA6A, ());
	native!(prepare_alarm, 0x9D74AE343DB65533, bool, alarm_name: *const c_char);
	native!(start_alarm, 0x0355EF116C4C97B2, (), alarm_name: *const c_char, p2: bool);
	native!(stop_alarm, 0xA1CADDCD98415A41, (), alarm_name: *const c_char, toggle: bool);
	native!(stop_all_alarms, 0x2F794A877ADD4C92, (), stop: bool);
	native!(is_alarm_playing, 0x226435CB96CCFC8C, bool, alarm_name: *const c_char);
	native!(get_vehicle_default_horn, 0x02165D55000219AC, Hash, vehicle: Vehicle);
	native!(get_vehicle_default_horn_ignore_mods, 0xACB5DCCA1EC76840, Hash, vehicle: Vehicle);
	native!(reset_ped_audio_flags, 0xF54BB7B61036F335, (), ped: Ped);
	native!(_0x0653b735bfbdfe87, 0x0653B735BFBDFE87, (), ped: Ped, toggle: bool);
	native!(_0x29da3ca8d8b2692d, 0x29DA3CA8D8B2692D, (), ped: Ped, toggle: bool);
	native!(override_player_ground_material, 0xD2CC78CD3D0B50F9, (), hash: Hash, toggle: bool);
	native!(_0xbf4dc1784be94dfa, 0xBF4DC1784BE94DFA, (), ped: Ped, p1: bool, hash: Hash);
	native!(_override_microphone_settings, 0x75773E11BA459E90, (), hash: Hash, toggle: bool);
	native!(freeze_microphone, 0xD57AAAE0E2214D11, ());
	native!(distant_cop_car_sirens, 0x552369F549563AD5, (), value: bool);
	native!(_0x43fa0dfc5df87815, 0x43FA0DFC5DF87815, (), vehicle: Vehicle, p1: bool);
	native!(_0xb81cf134aeb56ffb, 0xB81CF134AEB56FFB, ());
	native!(set_audio_flag, 0xB9EFD5C25018725A, (), flag_name: *const c_char, toggle: bool);
	native!(prepare_synchronized_audio_event, 0xC7ABCACA4985A766, i32, p0: *const c_char, p1: i32);
	native!(prepare_synchronized_audio_event_for_scene, 0x029FE7CD1B7E2E75, bool, p0: i32, p1: &mut i32);
	native!(play_synchronized_audio_event, 0x8B2FD4560E55DD2D, bool, p0: i32);
	native!(stop_synchronized_audio_event, 0x92D6A88E64A94430, bool, p0: i32);
	native!(_0xc8ede9bdbccba6d4, 0xC8EDE9BDBCCBA6D4, (), p0: &mut i32, p1: f32, p2: f32, p3: f32);
	native!(_set_synchronized_audio_event_position_this_frame, 0x950A154B8DAB6185, (), p0: *const c_char, p1: Entity);
	native!(set_audio_special_effect_mode, 0x12561FCBB62D5B9C, (), mode: i32);
	native!(set_portal_settings_override, 0x044DBAD7A7FA2BE5, (), p0: *const c_char, p1: *const c_char);
	native!(remove_portal_settings_override, 0xB4BBFD9CD8B3922B, (), p0: *const c_char);
	native!(_0xe4e6dd5566d28c82, 0xE4E6DD5566D28C82, ());
	native!(_0x3a48ab4445d499be, 0x3A48AB4445D499BE, i32);
	native!(_set_ped_talk, 0x4ADA3F19BE4A6047, (), ped: Ped);
	native!(_0x0150b6ff25a9e2e5, 0x0150B6FF25A9E2E5, ());
	native!(_0xbef34b1d9624d5dd, 0xBEF34B1D9624D5DD, (), p0: bool);
	native!(stop_cutscene_audio, 0x806058BBDC136E06, ());
	native!(_has_multiplayer_audio_data_loaded, 0x544810ED9DB6BBE6, bool);
	native!(_has_multiplayer_audio_data_unloaded, 0x5B50ABB1FE3746F4, bool);
	native!(_get_vehicle_default_horn_variation, 0xD53F3A29BCE2580E, i32, vehicle: Vehicle);
	native!(_set_vehicle_horn_variation, 0x0350E7E17BA767D0, (), vehicle: Vehicle, value: i32);
}

pub mod brain {
	use super::*;

	native!(add_script_to_random_ped, 0x4EE5367468A65CCC, (), name: *const c_char, model: Hash, p2: f32, p3: f32);
	native!(register_object_script_brain, 0x0BE84C318BA6EC22, (), script_name: *const c_char, model_hash: Hash, p2: i32, activation_range: f32, p4: i32, p5: i32);
	native!(is_object_within_brain_activation_range, 0xCCBA154209823057, bool, object: Object);
	native!(register_world_point_script_brain, 0x3CDC7136613284BD, (), script_name: *const c_char, activation_range: f32, p2: i32);
	native!(is_world_point_within_brain_activation_range, 0xC5042CC6F5E3D450, bool);
	native!(enable_script_brain_set, 0x67AA4D73F0CFA86B, (), brain_set: i32);
	native!(disable_script_brain_set, 0x14D8518E9760F08F, (), brain_set: i32);
	native!(_0x0b40ed49d7d6ff84, 0x0B40ED49D7D6FF84, ());
	native!(_0x4d953df78ebf8158, 0x4D953DF78EBF8158, ());
	native!(_0x6d6840cee8845831, 0x6D6840CEE8845831, (), action: *const c_char);
	native!(_0x6e91b04e08773030, 0x6E91B04E08773030, (), action: *const c_char);
}

pub mod cam {
	use super::*;

	native!(render_script_cams, 0x07E5B515DB0636FC, (), render: bool, ease: bool, ease_time: i32, p3: bool, p4: bool, p5: i32);
	native!(_render_first_person_cam, 0xC819F3CBB62BF692, (), render: bool, p1: f32, p2: i32, p3: i32);
	native!(create_cam, 0xC3981DCE61D9E13F, Cam, cam_name: *const c_char, p1: bool);
	native!(create_cam_with_params, 0xB51194800B257161, Cam, cam_name: *const c_char, pos_x: f32, pos_y: f32, pos_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, fov: f32, p8: bool, p9: i32);
	native!(create_camera, 0x5E3CF89C6BCCA67D, Cam, cam_hash: Hash, p1: bool);
	native!(create_camera_with_params, 0x6ABFA3E16460F22D, Cam, cam_hash: Hash, pos_x: f32, pos_y: f32, pos_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, fov: f32, p8: bool, p9: i32);
	native!(destroy_cam, 0x865908C81A2C22E9, (), cam: Cam, net_mission_entity: bool);
	native!(destroy_all_cams, 0x8E5FB15663F79120, (), net_mission_entity: bool);
	native!(does_cam_exist, 0xA7A932170592B50E, bool, cam: Cam);
	native!(set_cam_active, 0x026FB97D0A425F84, (), cam: Cam, active: bool);
	native!(is_cam_active, 0xDFB2B516207D3534, bool, cam: Cam);
	native!(is_cam_rendering, 0x02EC0AF5C5A49B7A, bool, cam: Cam);
	native!(get_rendering_cam, 0x5234F9F10919EABA, Cam);
	native!(get_cam_coord, 0xBAC038F7459AE5AE, Vec3, cam: Cam);
	native!(get_cam_rot, 0x7D304C1C955E3E12, Vec3, cam: Cam, rotation_order: i32);
	native!(get_cam_fov, 0xC3330A45CCCDB26A, f32, cam: Cam);
	native!(get_cam_near_clip, 0xC520A34DAFBF24B1, f32, cam: Cam);
	native!(get_cam_far_clip, 0xB60A9CFEB21CA6AA, f32, cam: Cam);
	native!(get_cam_far_dof, 0x255F8DAFD540D397, f32, cam: Cam);
	native!(set_cam_params, 0xBFD8727AEA3CCEBA, (), cam: Cam, pos_x: f32, pos_y: f32, pos_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, field_of_view: f32, p8: i32, p9: i32, p10: i32, p11: i32);
	native!(set_cam_coord, 0x4D41783FB745E42E, (), cam: Cam, pos_x: f32, pos_y: f32, pos_z: f32);
	native!(set_cam_rot, 0x85973643155D0B07, (), cam: Cam, rot_x: f32, rot_y: f32, rot_z: f32, rotation_order: i32);
	native!(set_cam_fov, 0xB13C14F66A00D047, (), cam: Cam, field_of_view: f32);
	native!(set_cam_near_clip, 0xC7848EFCCC545182, (), cam: Cam, near_clip: f32);
	native!(set_cam_far_clip, 0xAE306F2A904BF86E, (), cam: Cam, far_clip: f32);
	native!(set_cam_motion_blur_strength, 0x6F0F77FBA9A8F2E6, (), cam: Cam, strength: f32);
	native!(set_cam_near_dof, 0x3FA4BF0A7AB7DE2C, (), cam: Cam, near_dof: f32);
	native!(set_cam_far_dof, 0xEDD91296CD01AEE0, (), cam: Cam, far_dof: f32);
	native!(set_cam_dof_strength, 0x5EE29B4D7D5DF897, (), cam: Cam, dof_strength: f32);
	native!(set_cam_dof_planes, 0x3CF48F6F96E749DC, (), cam: Cam, p1: f32, p2: f32, p3: f32, p4: f32);
	native!(set_cam_use_shallow_dof_mode, 0x16A96863A17552BB, (), cam: Cam, toggle: bool);
	native!(set_use_hi_dof, 0xA13B0222F3D94A94, ());
	native!(_0xf55e4046f6f831dc, 0xF55E4046F6F831DC, (), p0: i32, p1: f32);
	native!(_0xe111a7c0d200cbc5, 0xE111A7C0D200CBC5, (), p0: i32, p1: f32);
	native!(_set_cam_dof_fnumber_of_lens, 0x7DD234D6F3914C5B, (), camera: Cam, p1: f32);
	native!(_set_cam_dof_focal_length_multiplier, 0x47B595D60664CFFA, (), p0: i32, p1: i32);
	native!(_set_cam_dof_focus_distance_bias, 0xC669EEA5D031B7DE, (), camera: Cam, p1: f32);
	native!(_set_cam_dof_max_near_in_focus_distance, 0xC3654A441402562D, (), camera: Cam, p1: f32);
	native!(_set_cam_dof_max_near_in_focus_distance_blend_level, 0x2C654B4943BDDF7C, (), camera: Cam, p1: f32);
	native!(attach_cam_to_entity, 0xFEDB7D269E8C60E3, (), cam: Cam, entity: Entity, x_offset: f32, y_offset: f32, z_offset: f32, is_relative: bool);
	native!(attach_cam_to_ped_bone, 0x61A3DBA14AB7F411, (), cam: Cam, ped: Ped, bone_index: i32, x: f32, y: f32, z: f32, heading: bool);
	native!(_attach_cam_to_ped_bone_2, 0x149916F50C34A40D, (), cam: Cam, ped: Ped, bone_index: i32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: bool);
	native!(_attach_cam_to_vehicle_bone, 0x8DB3F12A02CAEF72, (), cam: Cam, vehicle: Vehicle, bone_index: i32, p3: bool, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: f32, p10: bool);
	native!(detach_cam, 0xA2FABBE87F4BAD82, (), cam: Cam);
	native!(set_cam_inherit_roll_vehicle, 0x45F1DE9C34B93AE6, (), cam: Cam, p1: bool);
	native!(point_cam_at_coord, 0xF75497BB865F0803, (), cam: Cam, x: f32, y: f32, z: f32);
	native!(point_cam_at_entity, 0x5640BFF86B16E8DC, (), cam: Cam, entity: Entity, p2: f32, p3: f32, p4: f32, p5: bool);
	native!(point_cam_at_ped_bone, 0x68B2B5F33BA63C41, (), cam: Cam, ped: Ped, bone_index: i32, x: f32, y: f32, z: f32, p6: bool);
	native!(stop_cam_pointing, 0xF33AB75780BA57DE, (), cam: Cam);
	native!(set_cam_affects_aiming, 0x8C1DC7770C51DC8D, (), cam: Cam, toggle: bool);
	native!(_0x661b5c8654add825, 0x661B5C8654ADD825, (), cam: Cam, p1: bool);
	native!(_0xa2767257a320fc82, 0xA2767257A320FC82, (), p0: i32, p1: bool);
	native!(_0x271017b9ba825366, 0x271017B9BA825366, (), p0: i32, p1: bool);
	native!(set_cam_debug_name, 0x1B93E0107865DD40, (), camera: Cam, name: *const c_char);
	native!(add_cam_spline_node, 0x8609C75EC438FB3B, (), camera: Cam, x: f32, y: f32, z: f32, x_rot: f32, y_rot: f32, z_rot: f32, length: i32, p8: i32, p9: i32);
	native!(add_cam_spline_node_using_camera_frame, 0x0A9F2A468B328E74, (), cam: Cam, cam2: Cam, p2: i32, p3: i32);
	native!(add_cam_spline_node_using_camera, 0x0FB82563989CF4FB, (), cam: Cam, cam2: Cam, p2: i32, p3: i32);
	native!(add_cam_spline_node_using_gameplay_frame, 0x609278246A29CA34, (), cam: Cam, p1: i32, p2: i32);
	native!(set_cam_spline_phase, 0x242B5874F0A4E052, (), cam: Cam, p1: f32);
	native!(get_cam_spline_phase, 0xB5349E36C546509A, f32, cam: Cam);
	native!(get_cam_spline_node_phase, 0xD9D0E694C8282C96, f32, cam: Cam);
	native!(set_cam_spline_duration, 0x1381539FEE034CDA, (), cam: Cam, time_duration: i32);
	native!(set_cam_spline_smoothing_style, 0xD1B0F412F109EA5D, (), cam: Cam, smoothing_style: i32);
	native!(get_cam_spline_node_index, 0xB22B17DF858716A6, i32, cam: Cam);
	native!(set_cam_spline_node_ease, 0x83B8201ED82A9A2D, (), cam: Cam, p1: i32, p2: i32, p3: f32);
	native!(set_cam_spline_node_velocity_scale, 0xA6385DEB180F319F, (), cam: Cam, p1: i32, scale: f32);
	native!(override_cam_spline_velocity, 0x40B62FA033EB0346, (), cam: Cam, p1: i32, p2: f32, p3: f32);
	native!(override_cam_spline_motion_blur, 0x7DCF7C708D292D55, (), cam: Cam, p1: i32, p2: f32, p3: f32);
	native!(set_cam_spline_node_extra_flags, 0x7BF1A54AE67AC070, (), cam: Cam, p1: i32, flags: i32);
	native!(is_cam_spline_paused, 0x0290F35C0AD97864, bool, p0: i32);
	native!(set_cam_active_with_interp, 0x9FBDA379383A52A4, (), cam_to: Cam, cam_from: Cam, duration: i32, ease_location: i32, ease_rotation: i32);
	native!(is_cam_interpolating, 0x036F97C908C2B52C, bool, cam: Cam);
	native!(shake_cam, 0x6A25241C340D3822, (), cam: Cam, r#type: *const c_char, amplitude: f32);
	native!(animated_shake_cam, 0xA2746EEAE3E577CD, (), cam: Cam, p1: *const c_char, p2: *const c_char, p3: *const c_char, amplitude: f32);
	native!(is_cam_shaking, 0x6B24BFE83A2BE47B, bool, cam: Cam);
	native!(set_cam_shake_amplitude, 0xD93DB43B82BC0D00, (), cam: Cam, amplitude: f32);
	native!(stop_cam_shaking, 0xBDECF64367884AC3, (), cam: Cam, p1: bool);
	native!(shake_script_global, 0xF4C8CF9E353AFECA, (), p0: *const c_char, p1: f32);
	native!(animated_shake_script_global, 0xC2EAE3FB8CDBED31, (), p0: *const c_char, p1: *const c_char, p2: *const c_char, p3: f32);
	native!(is_script_global_shaking, 0xC912AF078AF19212, bool);
	native!(stop_script_global_shaking, 0x1C9D7949FA533490, (), p0: bool);
	native!(play_cam_anim, 0x9A2D0FB2E7852392, bool, cam: Cam, anim_name: *const c_char, anim_dictionary: *const c_char, x: f32, y: f32, z: f32, x_rot: f32, y_rot: f32, z_rot: f32, p9: bool, p10: i32);
	native!(is_cam_playing_anim, 0xC90621D8A0CEECF2, bool, cam: Cam, anim_name: *const c_char, anim_dictionary: *const c_char);
	native!(set_cam_anim_current_phase, 0x4145A4C44FF3B5A6, (), cam: Cam, phase: f32);
	native!(get_cam_anim_current_phase, 0xA10B2DB49E92A6B0, f32, cam: Cam);
	native!(play_synchronized_cam_anim, 0xE32EFE9AB4A9AA0C, bool, p0: i32, p1: i32, anim_name: *const c_char, anim_dictionary: *const c_char);
	native!(set_fly_cam_horizontal_response, 0x503F5920162365B2, (), cam: Cam, p1: f32, p2: f32, p3: f32);
	native!(_set_fly_cam_vertical_speed_multiplier, 0xE827B9382CFB41BA, (), cam: Cam, p1: f32, p2: f32, p3: f32);
	native!(set_fly_cam_max_height, 0xF9D02130ECDD1D77, (), cam: Cam, height: f32);
	native!(set_fly_cam_coord_and_constrain, 0xC91C6C55199308CA, (), cam: Cam, x: f32, y: f32, z: f32);
	native!(_0xc8b5c4a79cc18b94, 0xC8B5C4A79CC18B94, (), cam: Cam);
	native!(_0x5c48a1d6e3b33179, 0x5C48A1D6E3B33179, bool, cam: Cam);
	native!(is_screen_faded_out, 0xB16FCE9DDC7BA182, bool);
	native!(is_screen_faded_in, 0x5A859503B0C08678, bool);
	native!(is_screen_fading_out, 0x797AC7CB535BA28F, bool);
	native!(is_screen_fading_in, 0x5C544BC6C57AC575, bool);
	native!(do_screen_fade_in, 0xD4E8E24955024033, (), duration: i32);
	native!(do_screen_fade_out, 0x891B5B39AC6302AF, (), duration: i32);
	native!(set_widescreen_borders, 0xDCD4EA924F42D01A, (), p0: bool, p1: i32);
	native!(_0x4879e4fe39074cdf, 0x4879E4FE39074CDF, bool);
	native!(get_gameplay_cam_coord, 0x14D6F5678D8F1B37, Vec3);
	native!(get_gameplay_cam_rot, 0x837765A25378F0BB, Vec3, rotation_order: i32);
	native!(get_gameplay_cam_fov, 0x65019750A0324133, f32);
	native!(_0x487a82c650eb7799, 0x487A82C650EB7799, (), p0: f32);
	native!(_0x0225778816fdc28c, 0x0225778816FDC28C, (), p0: f32);
	native!(get_gameplay_cam_relative_heading, 0x743607648ADD4587, f32);
	native!(set_gameplay_cam_relative_heading, 0xB4EC2312F4E5B1F1, (), heading: f32);
	native!(get_gameplay_cam_relative_pitch, 0x3A6867B4845BEDA2, f32);
	native!(set_gameplay_cam_relative_pitch, 0x6D0858B8EDFD2B7D, (), x: f32, value2: f32);
	native!(_set_gameplay_cam_relative_rotation, 0x48608C3464F58AB4, (), p0: i32, p1: i32, p2: i32);
	native!(_0x28b022a17b068a3a, 0x28B022A17B068A3A, (), p0: f32, p1: f32);
	native!(_set_gameplay_cam_raw_yaw, 0x103991D4A307D472, (), yaw: f32, p1: i32);
	native!(_set_gameplay_cam_raw_pitch, 0x759E13EBC1C15C5A, (), pitch: f32);
	native!(_0x469f2ecdec046337, 0x469F2ECDEC046337, (), p0: bool);
	native!(shake_gameplay_cam, 0xFD55E49555E017CF, (), shake_name: *const c_char, intensity: f32);
	native!(is_gameplay_cam_shaking, 0x016C090630DF1F89, bool);
	native!(set_gameplay_cam_shake_amplitude, 0xA87E00932DB4D85D, (), amplitude: f32);
	native!(stop_gameplay_cam_shaking, 0x0EF93E9F3D08C178, (), p0: bool);
	native!(_0x8bbacbf51da047a8, 0x8BBACBF51DA047A8, (), p0: i32);
	native!(is_gameplay_cam_rendering, 0x39B5D1B10383F0C8, bool);
	native!(_0x3044240d2e0fa842, 0x3044240D2E0FA842, bool);
	native!(_0x705a276ebff3133d, 0x705A276EBFF3133D, bool);
	native!(_0xdb90c6cca48940f1, 0xDB90C6CCA48940F1, (), p0: bool);
	native!(_enable_crosshair_this_frame, 0xEA7F0AD7E9BA676F, ());
	native!(is_gameplay_cam_looking_behind, 0x70FDA869F3317EA9, bool);
	native!(_0x2aed6301f67007d5, 0x2AED6301F67007D5, (), entity: Entity);
	native!(_0x49482f9fcd825aaa, 0x49482F9FCD825AAA, (), entity: Entity);
	native!(_0xfd3151cd37ea2245, 0xFD3151CD37EA2245, (), entity: Entity);
	native!(_0xb1381b97f70c7b30, 0xB1381B97F70C7B30, ());
	native!(_0xdd79df9f4d26e1c9, 0xDD79DF9F4D26E1C9, ());
	native!(is_sphere_visible, 0xE33D59DA70B58FDF, bool, x: f32, y: f32, z: f32, radius: f32);
	native!(is_follow_ped_cam_active, 0xC6D3D26810C8E0F9, bool);
	native!(set_follow_ped_cam_this_update, 0x44A113DD6FFC48D1, bool, cam_name: *const c_char, p1: i32);
	native!(_0x271401846bd26e92, 0x271401846BD26E92, (), p0: bool, p1: bool);
	native!(_0xc8391c309684595a, 0xC8391C309684595A, ());
	native!(_clamp_gameplay_cam_yaw, 0x8F993D26E0CA5E8E, (), minimum: f32, maximum: f32);
	native!(_clamp_gameplay_cam_pitch, 0xA516C198B7DCA1E1, (), minimum: f32, maximum: f32);
	native!(_animate_gameplay_cam_zoom, 0xDF2E1F7742402E81, (), p0: f32, distance: f32);
	native!(_0xe9ea16d6e54cdca4, 0xE9EA16D6E54CDCA4, (), p0: Vehicle, p1: i32);
	native!(_disable_first_person_cam_this_frame, 0xDE2EF5DA284CC8DF, ());
	native!(_0x59424bd75174c9b1, 0x59424BD75174C9B1, ());
	native!(_0x9f97da93681f87ea, 0x9F97DA93681F87EA, ());
	native!(get_follow_ped_cam_zoom_level, 0x33E6C8EFD0CD93E9, i32);
	native!(get_follow_ped_cam_view_mode, 0x8D4D46230B2C353A, i32);
	native!(set_follow_ped_cam_view_mode, 0x5A4F9EDF1673F704, (), view_mode: i32);
	native!(is_follow_vehicle_cam_active, 0xCBBDE6D335D6D496, bool);
	native!(_0x91ef6ee6419e5b97, 0x91EF6EE6419E5B97, (), p0: bool);
	native!(_0x9dfe13ecdc1ec196, 0x9DFE13ECDC1EC196, (), p0: bool, p1: bool);
	native!(_0x79c0e43eb9b944e2, 0x79C0E43EB9B944E2, bool, hash: Hash);
	native!(get_follow_vehicle_cam_zoom_level, 0xEE82280AB767B690, i32);
	native!(set_follow_vehicle_cam_zoom_level, 0x19464CB6E4078C8A, (), zoom_level: i32);
	native!(get_follow_vehicle_cam_view_mode, 0xA4FF579AC0E3AAAE, i32);
	native!(set_follow_vehicle_cam_view_mode, 0xAC253D7842768F48, (), view_mode: i32);
	native!(_0xee778f8c7e1142e2, 0xEE778F8C7E1142E2, i32, p0: i32);
	native!(_0x2a2173e46daecd12, 0x2A2173E46DAECD12, (), p0: i32, p1: i32);
	native!(_0x19cafa3c87f7c2ff, 0x19CAFA3C87F7C2FF, i32);
	native!(_use_stunt_camera_this_frame, 0x6493CF69859B116A, ());
	native!(_0x425a920fdb9a0dda, 0x425A920FDB9A0DDA, (), cam_name: *const c_char);
	native!(_0x0aa27680a0bd43fa, 0x0AA27680A0BD43FA, ());
	native!(_0x5c90cab09951a12f, 0x5C90CAB09951A12F, (), p0: i32);
	native!(is_aim_cam_active, 0x68EDDA28A5976D07, bool);
	native!(_is_aim_cam_third_person_active, 0x74BD83EA840F6BC9, bool);
	native!(is_first_person_aim_cam_active, 0x5E346D934122613F, bool);
	native!(disable_aim_cam_this_update, 0x1A31FE0049E542F6, ());
	native!(get_first_person_aim_cam_zoom_factor, 0x7EC52CC40597D170, f32);
	native!(set_first_person_aim_cam_zoom_factor, 0x70894BD0915C5BCA, (), p0: f32);
	native!(_0xced08cbe8ebb97c7, 0xCED08CBE8EBB97C7, (), p0: f32, p1: f32);
	native!(_0x2f7f2b26dd3f18ee, 0x2F7F2B26DD3F18EE, (), p0: f32, p1: f32);
	native!(_set_first_person_cam_pitch_range, 0xBCFC632DB7673BF0, (), p0: f32, p1: f32);
	native!(_set_first_person_cam_near_clip, 0x0AF7B437918103B3, (), p0: f32);
	native!(_set_third_person_aim_cam_near_clip, 0x42156508606DE65E, (), p0: f32);
	native!(_0x4008edf7d6e48175, 0x4008EDF7D6E48175, (), p0: bool);
	native!(_0x380b4968d1e09e55, 0x380B4968D1E09E55, ());
	native!(get_final_rendered_cam_coord, 0xA200EB1EE790F448, Vec3);
	native!(get_final_rendered_cam_rot, 0x5B4E4C817FCC2DFB, Vec3, rotation_order: i32);
	native!(get_final_rendered_in_when_friendly_rot, 0x26903D9CD1175F2C, Vec3, p0: i32, p1: i32);
	native!(get_final_rendered_cam_fov, 0x80EC114669DAEFF4, f32);
	native!(get_final_rendered_in_when_friendly_fov, 0x5F35F6732C3FBBA0, f32, p0: i32);
	native!(get_final_rendered_cam_near_clip, 0xD0082607100D7193, f32);
	native!(get_final_rendered_cam_far_clip, 0xDFC8CBC606FDB0FC, f32);
	native!(get_final_rendered_cam_near_dof, 0xA03502FC581F7D9B, f32);
	native!(get_final_rendered_cam_far_dof, 0x9780F32BCAF72431, f32);
	native!(get_final_rendered_cam_motion_blur_strength, 0x162F9D995753DC19, f32);
	native!(set_gameplay_coord_hint, 0xD51ADCD2D8BC0FB3, (), x: f32, y: f32, z: f32, duration: i32, blend_out_duration: i32, blend_in_duration: i32, unk: i32);
	native!(set_gameplay_ped_hint, 0x2B486269ACD548D3, (), p0: Ped, x1: f32, y1: f32, z1: f32, p4: bool, p5: i32, p6: i32, p7: i32);
	native!(set_gameplay_vehicle_hint, 0xA2297E18F3E71C2E, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: bool, p5: i32, p6: i32, p7: i32);
	native!(set_gameplay_object_hint, 0x83E87508A2CA2AC6, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: bool, p5: i32, p6: i32, p7: i32);
	native!(set_gameplay_entity_hint, 0x189E955A8313E298, (), entity: Entity, x_offset: f32, y_offset: f32, z_offset: f32, p4: bool, p5: i32, p6: i32, p7: i32, p8: i32);
	native!(is_gameplay_hint_active, 0xE520FF1AD2785B40, bool);
	native!(stop_gameplay_hint, 0xF46C581C61718916, (), p0: bool);
	native!(_0xccd078c2665d2973, 0xCCD078C2665D2973, (), p0: bool);
	native!(_0x247acbc4abbc9d1c, 0x247ACBC4ABBC9D1C, (), p0: bool);
	native!(_0xbf72910d0f26f025, 0xBF72910D0F26F025, i32);
	native!(set_gameplay_hint_fov, 0x513403FB9C56211F, (), fov: f32);
	native!(_set_gameplay_hint_anim_offsetz, 0xF8BDBF3D573049A1, (), p0: f32);
	native!(_set_gameplay_hint_angle, 0xD1F8363DFAD03848, (), p0: f32);
	native!(_set_gameplay_hint_anim_offsetx, 0x5D7B620DAE436138, (), p0: f32);
	native!(_set_gameplay_hint_anim_offsety, 0xC92717EF615B6704, (), p0: f32);
	native!(_set_gameplay_hint_anim_closeup, 0xE3433EADAAF7EE40, (), p0: bool);
	native!(set_cinematic_button_active, 0x51669F7D1FB53D9F, (), p0: bool);
	native!(is_cinematic_cam_rendering, 0xB15162CB5826E9E8, bool);
	native!(shake_cinematic_cam, 0xDCE214D9ED58F3CF, (), p0: *const c_char, p1: f32);
	native!(is_cinematic_cam_shaking, 0xBBC08F6B4CB8FF0A, bool);
	native!(set_cinematic_cam_shake_amplitude, 0xC724C701C30B2FE7, (), p0: f32);
	native!(stop_cinematic_cam_shaking, 0x2238E588E588A6D7, (), p0: bool);
	native!(_disable_vehicle_first_person_cam_this_frame, 0xADFF1B2A555F5FBA, ());
	native!(_0x62ecfcfdee7885d6, 0x62ECFCFDEE7885D6, ());
	native!(_0x9e4cfff989258472, 0x9E4CFFF989258472, ());
	native!(invalidate_idle_cam, 0xF4F2C0D4EE209E20, ());
	native!(_0xca9d2aa3e326d720, 0xCA9D2AA3E326D720, bool);
	native!(_is_in_vehicle_cam_disabled, 0x4F32C0D5A90A9B40, bool);
	native!(create_cinematic_shot, 0x741B0129D4560F31, (), p0: i32, p1: i32, p2: i32, entity: Entity);
	native!(is_cinematic_shot_active, 0xCC9F3371A7C28BC9, bool, p0: i32);
	native!(stop_cinematic_shot, 0x7660C6E75D3A078E, (), p0: i32);
	native!(_0xa41bcd7213805aac, 0xA41BCD7213805AAC, (), p0: bool);
	native!(_0xdc9da9e8789f5246, 0xDC9DA9E8789F5246, ());
	native!(set_cinematic_mode_active, 0xDCF0754AC3D6FD4E, (), p0: bool);
	native!(_0x1f2300cb7fa7b7f6, 0x1F2300CB7FA7B7F6, i32);
	native!(_0x17fca7199a530203, 0x17FCA7199A530203, i32);
	native!(_0xd7360051c885628b, 0xD7360051C885628B, i32);
	native!(_0xf5f1e89a970b7796, 0xF5F1E89A970B7796, bool);
	native!(_0x7b8a361c1813fbef, 0x7B8A361C1813FBEF, ());
	native!(stop_cutscene_cam_shaking, 0xDB629FFD9285FA06, ());
	native!(_0x324c5aa411da7737, 0x324C5AA411DA7737, (), p0: i32);
	native!(_0x12ded8ca53d47ea5, 0x12DED8CA53D47EA5, (), p0: f32);
	native!(get_focus_ped_on_screen, 0x89215EC747DF244A, Ped, p0: f32, p1: i32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: i32, p8: i32);
	native!(_0x5a43c76f7fc7ba5f, 0x5A43C76F7FC7BA5F, ());
	native!(_set_cam_effect, 0x80C8B1846639BB19, (), p0: i32);
	native!(_0x5c41e6babc9e2112, 0x5C41E6BABC9E2112, (), p0: i32);
	native!(_set_gameplay_cam_vehicle_camera, 0x21E253A7F8DA5DFB, (), vehicle_name: *const c_char);
	native!(_set_gameplay_cam_vehicle_camera_name, 0x11FA5D3479C7DD47, (), p0: i32);
	native!(_0xeaf0fa793d05c592, 0xEAF0FA793D05C592, i32);
	native!(_0x62374889a4d59f72, 0x62374889A4D59F72, ());
	native!(_replay_free_cam_get_max_range, 0x8BFCEB5EA1B161B6, f32);
}

pub mod clock {
	use super::*;

	native!(set_clock_time, 0x47C3B5848C3E45D8, (), hour: i32, minute: i32, second: i32);
	native!(pause_clock, 0x4055E40BD2DBEC1D, (), toggle: bool);
	native!(advance_clock_time_to, 0xC8CA9670B9D83B3B, (), hour: i32, minute: i32, second: i32);
	native!(add_to_clock_time, 0xD716F30D8C8980E2, (), hours: i32, minutes: i32, seconds: i32);
	native!(get_clock_hours, 0x25223CA6B4D20B7F, i32);
	native!(get_clock_minutes, 0x13D2B8ADD79640F2, i32);
	native!(get_clock_seconds, 0x494E97C2EF27C470, i32);
	native!(set_clock_date, 0xB096419DF0D06CE7, (), day: i32, month: i32, year: i32);
	native!(get_clock_day_of_week, 0xD972E4BD7AEB235F, i32);
	native!(get_clock_day_of_month, 0x3D10BC92A4DB1D35, i32);
	native!(get_clock_month, 0xBBC72712E80257A1, i32);
	native!(get_clock_year, 0x961777E64BDAF717, i32);
	native!(get_milliseconds_per_game_minute, 0x2F8B4D1C595B11DB, i32);
	native!(get_posix_time, 0xDA488F299A5B164E, (), year: &mut i32, month: &mut i32, day: &mut i32, hour: &mut i32, minute: &mut i32, second: &mut i32);
	native!(get_utc_time, 0x8117E09A19EEF4D3, (), year: &mut i32, month: &mut i32, day: &mut i32, hour: &mut i32, minute: &mut i32, second: &mut i32);
	native!(get_local_time, 0x50C7A99057A69748, (), year: &mut i32, month: &mut i32, day: &mut i32, hour: &mut i32, minute: &mut i32, second: &mut i32);
}

pub mod cutscene {
	use super::*;

	native!(request_cutscene, 0x7A86743F475D9E09, (), cutscene_name: *const c_char, flags: i32);
	native!(request_cutscene_with_playback_list, 0xC23DE0E91C30B58C, (), cutscene_name: *const c_char, playback_flags: i32, flags: i32);
	native!(remove_cutscene, 0x440AF51A3462B86F, ());
	native!(has_cutscene_loaded, 0xC59F528E9AB9F339, bool);
	native!(has_this_cutscene_loaded, 0x228D3D94F8A11C3C, bool, cutscene_name: *const c_char);
	native!(_0x8d9df6eca8768583, 0x8D9DF6ECA8768583, (), thread_id: i32);
	native!(can_request_assets_for_cutscene_entity, 0xB56BBBCC2955D9CB, bool);
	native!(is_cutscene_playback_flag_set, 0x71B74D2AE19338D0, bool, flag: i32);
	native!(set_cutscene_entity_streaming_flags, 0x4C61C75BEE8184C2, (), cutscene_ent_name: *const c_char, p1: i32, p2: i32);
	native!(request_cut_file, 0x06A3524161C502BA, (), cutscene_name: *const c_char);
	native!(has_cut_file_loaded, 0xA1C996C2A744262E, bool, cutscene_name: *const c_char);
	native!(remove_cut_file, 0xD00D76A7DFC9D852, (), cutscene_name: *const c_char);
	native!(_get_cut_file_num_sections, 0x0ABC54DE641DC0FC, i32, cutscene_name: *const c_char);
	native!(start_cutscene, 0x186D5CB5E7B0FF7B, (), flags: i32);
	native!(start_cutscene_at_coords, 0x1C9ADDA3244A1FBF, (), x: f32, y: f32, z: f32, flags: i32);
	native!(stop_cutscene, 0xC7272775B4DC786E, (), p0: bool);
	native!(stop_cutscene_immediately, 0xD220BDD222AC4A1E, ());
	native!(set_cutscene_origin, 0xB812B3FD1C01CF27, (), x: f32, y: f32, z: f32, p3: f32, p4: i32);
	native!(_0x011883f41211432a, 0x011883F41211432A, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, p6: i32);
	native!(get_cutscene_time, 0xE625BEABBAFFDAB9, i32);
	native!(get_cutscene_total_duration, 0xEE53B14A19E480D4, i32);
	native!(_0x971d7b15bcdbef99, 0x971D7B15BCDBEF99, i32);
	native!(was_cutscene_skipped, 0x40C8656EDAEDD569, bool);
	native!(has_cutscene_finished, 0x7C0A893088881D57, bool);
	native!(is_cutscene_active, 0x991251AFC3981F84, bool);
	native!(is_cutscene_playing, 0xD3C2E180A40F031E, bool);
	native!(get_cutscene_section_playing, 0x49010A6A396553D8, i32);
	native!(get_entity_index_of_cutscene_entity, 0x0A2E9FDB9A8C62F6, Entity, cutscene_ent_name: *const c_char, model_hash: Hash);
	native!(_0x583df8e3d4afbd98, 0x583DF8E3D4AFBD98, i32);
	native!(_0x4cebc1ed31e8925e, 0x4CEBC1ED31E8925E, bool, cutscene_name: *const c_char);
	native!(_0x4fcd976da686580c, 0x4FCD976DA686580C, i32, p0: i32);
	native!(register_entity_for_cutscene, 0xE40C1C56DF95C2E8, (), cutscene_ped: Ped, cutscene_ent_name: *const c_char, p2: i32, model_hash: Hash, p4: i32);
	native!(get_entity_index_of_registered_entity, 0xC0741A26499654CD, Entity, cutscene_ent_name: *const c_char, model_hash: Hash);
	native!(_0x7f96f23fa9b73327, 0x7F96F23FA9B73327, (), model_hash: Hash);
	native!(set_cutscene_trigger_area, 0x9896CE4721BE84BA, (), p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32);
	native!(can_set_enter_state_for_registered_entity, 0x645D0B458D8E17B5, bool, cutscene_ent_name: *const c_char, model_hash: Hash);
	native!(can_set_exit_state_for_registered_entity, 0x4C6A6451C79E4662, bool, cutscene_ent_name: *const c_char, model_hash: Hash);
	native!(can_set_exit_state_for_camera, 0xB2CBCD0930DFB420, bool, p0: bool);
	native!(_0xc61b86c9f61eb404, 0xC61B86C9F61EB404, (), toggle: bool);
	native!(set_cutscene_fade_values, 0x8093F23ABACCC7D4, (), p0: bool, p1: bool, p2: bool, p3: bool);
	native!(_0x20746f7b1032a3c7, 0x20746F7B1032A3C7, (), p0: bool, p1: bool, p2: bool, p3: bool);
	native!(_0x06ee9048fd080382, 0x06EE9048FD080382, (), p0: bool);
	native!(_0xa0fe76168a189ddb, 0xA0FE76168A189DDB, i32);
	native!(_0x2f137b508de238f2, 0x2F137B508DE238F2, (), p0: bool);
	native!(_0xe36a98d8ab3d3c66, 0xE36A98D8AB3D3C66, (), p0: bool);
	native!(_0x5edef0cf8c1dab3c, 0x5EDEF0CF8C1DAB3C, i32);
	native!(_0x41faa8fb2ece8720, 0x41FAA8FB2ECE8720, (), p0: bool);
	native!(register_synchronised_script_speech, 0x2131046957F31B04, ());
	native!(set_cutscene_ped_component_variation, 0xBA01E7B6DEEFBBC9, (), cutscene_ent_name: *const c_char, p1: i32, p2: i32, p3: i32, model_hash: Hash);
	native!(set_cutscene_ped_component_variation_from_ped, 0x2A56C06EBEF2B0D9, (), cutscene_ent_name: *const c_char, ped: Ped, model_hash: Hash);
	native!(does_cutscene_entity_exist, 0x499EF20C5DB25C59, bool, cutscene_ent_name: *const c_char, model_hash: Hash);
	native!(set_cutscene_ped_prop_variation, 0x0546524ADE2E9723, (), cutscene_ent_name: *const c_char, p1: i32, p2: i32, p3: i32, model_hash: Hash);
	native!(_0x708bdd8cd795b043, 0x708BDD8CD795B043, bool);
}

pub mod datafile {
	use super::*;

	native!(datafile_watch_request_id, 0xAD6875BBC0FC899C, (), id: i32);
	native!(datafile_clear_watch_list, 0x6CC86E78358D5119, ());
	native!(datafile_is_valid_request_id, 0xFCCAE5B92A830878, bool, index: i32);
	native!(datafile_has_loaded_file_data, 0x15FF52B809DB2353, bool, p0: i32);
	native!(datafile_has_valid_file_data, 0xF8CC1EBE0B62E29F, bool, p0: i32);
	native!(datafile_select_active_file, 0x22DA66936E0FFF37, bool, p0: i32);
	native!(datafile_delete_requested_file, 0x8F5EA1C01D65A100, bool, p0: i32);
	native!(ugc_create_content, 0xC84527E235FCA219, bool, data: &mut i32, data_count: i32, content_name: *const c_char, description: *const c_char, tags_csv: *const c_char, content_type_name: *const c_char, publish: bool);
	native!(ugc_create_mission, 0xA5EFC3E847D60507, bool, content_name: *const c_char, description: *const c_char, tags_csv: *const c_char, content_type_name: *const c_char, publish: bool);
	native!(ugc_update_content, 0x648E7A5434AF7969, bool, content_id: *const c_char, data: &mut i32, data_count: i32, content_name: *const c_char, description: *const c_char, tags_csv: *const c_char, content_type_name: *const c_char);
	native!(ugc_update_mission, 0x4645DE9980999E93, bool, content_id: *const c_char, content_name: *const c_char, description: *const c_char, tags_csv: *const c_char, content_type_name: *const c_char);
	native!(ugc_set_player_data, 0x692D808C34A82143, bool, content_id: *const c_char, rating: f32, content_type_name: *const c_char);
	native!(datafile_select_ugc_data, 0xA69AC4ADE82B57A4, bool, p0: i32);
	native!(datafile_select_ugc_stats, 0x9CB0BFA7A9342C3D, bool, p0: i32, p1: bool);
	native!(datafile_select_ugc_player_data, 0x52818819057F2B40, bool, p0: i32);
	native!(datafile_select_creator_stats, 0x01095C95CD46B624, bool, p0: i32);
	native!(datafile_load_offline_ugc, 0xC5238C011AF405E4, bool, filename: *const c_char);
	native!(datafile_create, 0xD27058A1CA2B13EE, ());
	native!(datafile_delete, 0x9AB9C1CFC8862DFB, ());
	native!(datafile_store_mission_header, 0x2ED61456317B8178, ());
	native!(datafile_flush_mission_header, 0xC55854C7D7274882, ());
	native!(datafile_get_file_dict, 0x906B778CA1DC72B6, *const c_char);
	native!(datafile_start_save_to_cloud, 0x83BCCE3224735F05, bool, filename: *const c_char);
	native!(datafile_update_save_to_cloud, 0x4DFDD9EB705F8140, bool, p0: &mut bool);
	native!(datafile_is_save_pending, 0xBEDB96A7584AA8CF, bool);
	native!(_object_value_add_boolean, 0x35124302A556A325, (), object_data: &mut i32, key: *const c_char, value: bool);
	native!(_object_value_add_integer, 0xE7E035450A7948D5, (), object_data: &mut i32, key: *const c_char, value: i32);
	native!(_object_value_add_float, 0xC27E1CC2D795105E, (), object_data: &mut i32, key: *const c_char, value: f32);
	native!(_object_value_add_string, 0x8FF3847DADD8E30C, (), object_data: &mut i32, key: *const c_char, value: *const c_char);
	native!(_object_value_add_vector3, 0x4CD49B76338C7DEE, (), object_data: &mut i32, key: *const c_char, value_x: f32, value_y: f32, value_z: f32);
	native!(_object_value_add_object, 0xA358F56F10732EE1, &'static i32, object_data: &mut i32, key: *const c_char);
	native!(_object_value_add_array, 0x5B11728527CA6E5F, &'static i32, object_data: &mut i32, key: *const c_char);
	native!(_object_value_get_boolean, 0x1186940ED72FFEEC, bool, object_data: &mut i32, key: *const c_char);
	native!(_object_value_get_integer, 0x78F06F6B1FB5A80C, i32, object_data: &mut i32, key: *const c_char);
	native!(_object_value_get_float, 0x06610343E73B9727, f32, object_data: &mut i32, key: *const c_char);
	native!(_object_value_get_string, 0x3D2FD9E763B24472, *const c_char, object_data: &mut i32, key: *const c_char);
	native!(_object_value_get_vector3, 0x46CD3CB66E0825CC, Vec3, object_data: &mut i32, key: *const c_char);
	native!(_object_value_get_object, 0xB6B9DDC412FCEEE2, &'static i32, object_data: &mut i32, key: *const c_char);
	native!(_object_value_get_array, 0x7A983AA9DA2659ED, &'static i32, object_data: &mut i32, key: *const c_char);
	native!(_object_value_get_type, 0x031C55ED33227371, i32, object_data: &mut i32, key: *const c_char);
	native!(_array_value_add_boolean, 0xF8B0F5A43E928C76, (), array_data: &mut i32, value: bool);
	native!(_array_value_add_integer, 0xCABDB751D86FE93B, (), array_data: &mut i32, value: i32);
	native!(_array_value_add_float, 0x57A995FD75D37F56, (), array_data: &mut i32, value: f32);
	native!(_array_value_add_string, 0x2F0661C155AEEEAA, (), array_data: &mut i32, value: *const c_char);
	native!(_array_value_add_vector3, 0x407F8D034F70F0C2, (), array_data: &mut i32, value_x: f32, value_y: f32, value_z: f32);
	native!(_array_value_add_object, 0x6889498B3E19C797, &'static i32, array_data: &mut i32);
	native!(_array_value_get_boolean, 0x50C1B2874E50C114, bool, array_data: &mut i32, array_index: i32);
	native!(_array_value_get_integer, 0x3E5AE19425CD74BE, i32, array_data: &mut i32, array_index: i32);
	native!(_array_value_get_float, 0xC0C527B525D7CFB5, f32, array_data: &mut i32, array_index: i32);
	native!(_array_value_get_string, 0xD3F2FFEB8D836F52, *const c_char, array_data: &mut i32, array_index: i32);
	native!(_array_value_get_vector3, 0x8D2064E5B64A628A, Vec3, array_data: &mut i32, array_index: i32);
	native!(_array_value_get_object, 0x8B5FADCC4E3A145F, &'static i32, array_data: &mut i32, array_index: i32);
	native!(_array_value_get_size, 0x065DB281590CEA2D, i32, array_data: &mut i32);
	native!(_array_value_get_type, 0x3A0014ADB172A3C5, i32, array_data: &mut i32, array_index: i32);
}

pub mod decorator {
	use super::*;

	native!(decor_set_time, 0x95AED7B8E39ECAA4, bool, entity: Entity, property_name: *const c_char, timestamp: i32);
	native!(decor_set_bool, 0x6B1E8E2ED1335B71, bool, entity: Entity, property_name: *const c_char, value: bool);
	native!(decor_set_float, 0x211AB1DD8D0F363A, bool, entity: Entity, property_name: *const c_char, value: f32);
	native!(decor_set_int, 0x0CE3AA5E1CA19E10, bool, entity: Entity, property_name: *const c_char, value: i32);
	native!(decor_get_bool, 0xDACE671663F2F5DB, bool, entity: Entity, property_name: *const c_char);
	native!(decor_get_float, 0x6524A2F114706F43, f32, entity: Entity, property_name: *const c_char);
	native!(decor_get_int, 0xA06C969B02A97298, i32, entity: Entity, property_name: *const c_char);
	native!(decor_exist_on, 0x05661B80A8C9165F, bool, entity: Entity, property_name: *const c_char);
	native!(decor_remove, 0x00EE9F297C738720, bool, entity: Entity, property_name: *const c_char);
	native!(decor_register, 0x9FD90732F56403CE, (), property_name: *const c_char, r#type: i32);
	native!(decor_is_registered_as_type, 0x4F14F9F870D6FBC8, bool, property_name: *const c_char, r#type: i32);
	native!(decor_register_lock, 0xA9D14EEA259F9248, ());
}

pub mod dlc {
	use super::*;

	native!(_0x241fca5b1aa14f75, 0x241FCA5B1AA14F75, bool);
	native!(is_dlc_present, 0x812595A0644CE1DE, bool, dlc_hash: Hash);
	native!(_0xf2e07819ef1a5289, 0xF2E07819EF1A5289, bool);
	native!(_0x9489659372a81585, 0x9489659372A81585, bool);
	native!(_0xa213b11dff526300, 0xA213B11DFF526300, bool);
	native!(_get_extra_content_pack_has_been_installed, 0x8D30F648014A92B5, bool);
	native!(get_is_loading_screen_active, 0x10D0A8F259E93EC9, bool);
	native!(_0xc4637a6d03c24cc3, 0xC4637A6D03C24CC3, bool);
	native!(has_cloud_requests_finished, 0x46E2B844905BC5F0, bool, p0: &mut bool, unused: i32);
	native!(on_enter_sp, 0xD7C10C4A637992C9, ());
	native!(on_enter_mp, 0x0888C3502DBBEEF5, ());
}

pub mod entity {
	use super::*;

	native!(does_entity_exist, 0x7239B21A38F536BA, bool, entity: Entity);
	native!(does_entity_belong_to_this_script, 0xDDE6DF5AE89981D2, bool, entity: Entity, p1: bool);
	native!(does_entity_have_drawable, 0x060D6E96F8B8E48D, bool, entity: Entity);
	native!(does_entity_have_physics, 0xDA95EA3317CC5064, bool, entity: Entity);
	native!(has_entity_anim_finished, 0x20B711662962B472, bool, entity: Entity, anim_dict: *const c_char, anim_name: *const c_char, p3: i32);
	native!(has_entity_been_damaged_by_any_object, 0x95EB9964FF5C5C65, bool, entity: Entity);
	native!(has_entity_been_damaged_by_any_ped, 0x605F5A140F202491, bool, entity: Entity);
	native!(has_entity_been_damaged_by_any_vehicle, 0xDFD5033FDBA0A9C8, bool, entity: Entity);
	native!(has_entity_been_damaged_by_entity, 0xC86D67D52A707CF8, bool, entity1: Entity, entity2: Entity, p2: bool);
	native!(has_entity_clear_los_to_entity, 0xFCDFF7B72D23A1AC, bool, entity1: Entity, entity2: Entity, trace_type: i32);
	native!(has_entity_clear_los_to_entity_in_front, 0x0267D00AF114F17A, bool, entity1: Entity, entity2: Entity);
	native!(has_entity_collided_with_anything, 0x8BAD02F0368D9E14, bool, entity: Entity);
	native!(get_last_material_hit_by_entity, 0x5C3D0A935F535C4C, Hash, entity: Entity);
	native!(get_collision_normal_of_last_hit_for_entity, 0xE465D4AB7CA6AE72, Vec3, entity: Entity);
	native!(force_entity_ai_and_animation_update, 0x40FDEDB72F8293B2, (), entity: Entity);
	native!(get_entity_anim_current_time, 0x346D81500D088F42, f32, entity: Entity, anim_dict: *const c_char, anim_name: *const c_char);
	native!(get_entity_anim_total_time, 0x50BD2730B191E360, f32, entity: Entity, anim_dict: *const c_char, anim_name: *const c_char);
	native!(get_anim_duration, 0xFEDDF04D62B8D790, f32, anim_dict: *const c_char, anim_name: *const c_char);
	native!(get_entity_attached_to, 0x48C2BED9180FE123, Entity, entity: Entity);
	native!(get_entity_coords, 0x3FEF770D40960D5A, Vec3, entity: Entity, alive: bool);
	native!(get_entity_forward_vector, 0x0A794A5A57F8DF91, Vec3, entity: Hash);
	native!(get_entity_forward_x, 0x8BB4EF4214E0E6D5, f32, entity: Entity);
	native!(get_entity_forward_y, 0x866A4A5FAE349510, f32, entity: Entity);
	native!(get_entity_heading, 0xE83D4F9BA2A38914, f32, entity: Entity);
	native!(_get_entity_physics_heading, 0x846BF6291198A71E, f32, entity: Entity);
	native!(get_entity_health, 0xEEF059FAD016D209, i32, entity: Entity);
	native!(get_entity_max_health, 0x15D757606D170C3C, i32, entity: Entity);
	native!(set_entity_max_health, 0x166E7CF68597D8B5, (), entity: Entity, value: i32);
	native!(get_entity_height, 0x5A504562485944DD, f32, entity: Entity, x: f32, y: f32, z: f32, at_top: bool, in_world_coords: bool);
	native!(get_entity_height_above_ground, 0x1DD55701034110E5, f32, entity: Entity);
	native!(get_entity_matrix, 0xECB2FC7235A7D137, (), entity: Entity, right_vector: &mut Vec3, forward_vector: &mut Vec3, up_vector: &mut Vec3, position: &mut Vec3);
	native!(get_entity_model, 0x9F47B058362C84B5, Hash, entity: Entity);
	native!(get_offset_from_entity_given_world_coords, 0x2274BC1C4885E333, Vec3, entity: Entity, pos_x: f32, pos_y: f32, pos_z: f32);
	native!(get_offset_from_entity_in_world_coords, 0x1899F328B0E12848, Vec3, entity: Entity, offset_x: f32, offset_y: f32, offset_z: f32);
	native!(get_entity_pitch, 0xD45DC2893621E1FE, f32, entity: Entity);
	native!(get_entity_quaternion, 0x7B3703D2D32DFA18, (), entity: Entity, x: &mut f32, y: &mut f32, z: &mut f32, w: &mut f32);
	native!(get_entity_roll, 0x831E0242595560DF, f32, entity: Entity);
	native!(get_entity_rotation, 0xAFBD61CC738D9EB9, Vec3, entity: Entity, rotation_order: i32);
	native!(get_entity_rotation_velocity, 0x213B91045D09B983, Vec3, entity: Entity);
	native!(get_entity_script, 0xA6E9C38DB51D7748, *const c_char, entity: Entity, script: &mut ScrHandle);
	native!(get_entity_speed, 0xD5037BA82E12416F, f32, entity: Entity);
	native!(get_entity_speed_vector, 0x9A8D700A51CB7B0D, Vec3, entity: Entity, relative: bool);
	native!(get_entity_upright_value, 0x95EED5A694951F9F, f32, entity: Entity);
	native!(get_entity_velocity, 0x4805D2B1D8CF94A9, Vec3, entity: Entity);
	native!(get_object_index_from_entity_index, 0xD7E3B9735C0F89D6, Object, entity: Entity);
	native!(get_ped_index_from_entity_index, 0x04A2A40C73395041, Ped, entity: Entity);
	native!(get_vehicle_index_from_entity_index, 0x4B53F92932ADFAC0, Vehicle, entity: Entity);
	native!(get_world_position_of_entity_bone, 0x44A8FCB8ED227738, Vec3, entity: Entity, bone_index: i32);
	native!(get_nearest_player_to_entity, 0x7196842CB375CDB3, Player, entity: Entity);
	native!(get_nearest_player_to_entity_on_team, 0x4DC9A62F844D9337, Player, entity: Entity, team: i32);
	native!(get_entity_type, 0x8ACD366038D14505, i32, entity: Entity);
	native!(get_entity_population_type, 0xF6F5161F4534EDFF, i32, entity: Entity);
	native!(is_an_entity, 0x731EC8A916BD11A1, bool, handle: i32);
	native!(is_entity_a_ped, 0x524AC5ECEA15343E, bool, entity: Entity);
	native!(is_entity_a_mission_entity, 0x0A7B270912999B3C, bool, entity: Entity);
	native!(is_entity_a_vehicle, 0x6AC7003FA6E5575E, bool, entity: Entity);
	native!(is_entity_an_object, 0x8D68C8FD0FACA94E, bool, entity: Entity);
	native!(is_entity_at_coord, 0x20B60995556D004F, bool, entity: Entity, x_pos: f32, y_pos: f32, z_pos: f32, x_size: f32, y_size: f32, z_size: f32, p7: bool, p8: bool, p9: i32);
	native!(is_entity_at_entity, 0x751B70C3D034E187, bool, entity1: Entity, entity2: Entity, x_size: f32, y_size: f32, z_size: f32, p5: bool, p6: bool, p7: i32);
	native!(is_entity_attached, 0xB346476EF1A64897, bool, entity: Entity);
	native!(is_entity_attached_to_any_object, 0xCF511840CEEDE0CC, bool, entity: Entity);
	native!(is_entity_attached_to_any_ped, 0xB1632E9A5F988D11, bool, entity: Entity);
	native!(is_entity_attached_to_any_vehicle, 0x26AA915AD89BFB4B, bool, entity: Entity);
	native!(is_entity_attached_to_entity, 0xEFBE71898A993728, bool, from: Entity, to: Entity);
	native!(is_entity_dead, 0x5F9532F3B5CC2551, bool, entity: Entity, p1: bool);
	native!(is_entity_in_air, 0x886E37EC497200B6, bool, entity: Entity);
	native!(is_entity_in_angled_area, 0x51210CED3DA1C78A, bool, entity: Entity, origin_x: f32, origin_y: f32, origin_z: f32, edge_x: f32, edge_y: f32, edge_z: f32, angle: f32, p8: bool, p9: bool, p10: i32);
	native!(is_entity_in_area, 0x54736AA40E271165, bool, entity: Entity, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, p7: bool, p8: bool, p9: i32);
	native!(is_entity_in_zone, 0xB6463CF6AF527071, bool, entity: Entity, zone: *const c_char);
	native!(is_entity_in_water, 0xCFB0A0D8EDD145A3, bool, entity: Entity);
	native!(get_entity_submerged_level, 0xE81AFC1BC4CC41CE, f32, entity: Entity);
	native!(_0x694e00132f2823ed, 0x694E00132F2823ED, (), entity: Entity, toggle: bool);
	native!(is_entity_on_screen, 0xE659E47AF827484B, bool, entity: Entity);
	native!(is_entity_playing_anim, 0x1F0B79228E461EC9, bool, entity: Entity, anim_dict: *const c_char, anim_name: *const c_char, task_flag: i32);
	native!(is_entity_static, 0x1218E6886D3D8327, bool, entity: Entity);
	native!(is_entity_touching_entity, 0x17FFC1B2BA35A494, bool, entity: Entity, target_entity: Entity);
	native!(is_entity_touching_model, 0x0F42323798A58C8C, bool, entity: Entity, model_hash: Hash);
	native!(is_entity_upright, 0x5333F526F6AB19AA, bool, entity: Entity, angle: f32);
	native!(is_entity_upsidedown, 0x1DBD58820FA61D71, bool, entity: Entity);
	native!(is_entity_visible, 0x47D6F43D77935C75, bool, entity: Entity);
	native!(is_entity_visible_to_script, 0xD796CB5BA8F20E32, bool, entity: Entity);
	native!(is_entity_occluded, 0xE31C2C72B8692B64, bool, entity: Entity);
	native!(would_entity_be_occluded, 0xEE5D2A122E09EC42, bool, entity_model_hash: Hash, x: f32, y: f32, z: f32, p4: bool);
	native!(is_entity_waiting_for_world_collision, 0xD05BFF0C0A12C68F, bool, entity: Entity);
	native!(apply_force_to_entity_center_of_mass, 0x18FF00FC7EFF559E, (), entity: Entity, force_type: i32, x: f32, y: f32, z: f32, p5: bool, is_direction_rel: bool, is_force_rel: bool, p8: bool);
	native!(apply_force_to_entity, 0xC5F68BE9613E2D18, (), entity: Entity, force_flags: i32, x: f32, y: f32, z: f32, off_x: f32, off_y: f32, off_z: f32, bone_index: i32, is_direction_rel: bool, ignore_up_vec: bool, is_force_rel: bool, p12: bool, p13: bool);
	native!(attach_entity_to_entity, 0x6B9BBD38AB0796DF, (), entity1: Entity, entity2: Entity, bone_index: i32, x_pos: f32, y_pos: f32, z_pos: f32, x_rot: f32, y_rot: f32, z_rot: f32, p9: bool, use_soft_pinning: bool, collision: bool, is_ped: bool, vertex_index: i32, fixed_rot: bool);
	native!(_attach_entity_bone_to_entity_bone, 0x5C48B75732C8456C, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(_attach_entity_bone_to_entity_bone_physically, 0xFD1695C5D3B05439, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(attach_entity_to_entity_physically, 0xC3675780C92F90F9, (), entity1: Entity, entity2: Entity, bone_index1: i32, bone_index2: i32, x_pos1: f32, y_pos1: f32, z_pos1: f32, x_pos2: f32, y_pos2: f32, z_pos2: f32, x_rot: f32, y_rot: f32, z_rot: f32, break_force: f32, fixed_rot: bool, p15: bool, collision: bool, p17: bool, p18: i32);
	native!(process_entity_attachments, 0xF4080490ADC51C6F, (), entity: Entity);
	native!(get_entity_bone_index_by_name, 0xFB71170B7E76ACBA, i32, entity: Entity, bone_name: *const c_char);
	native!(clear_entity_last_damage_entity, 0xA72CD9CA74A5ECBA, (), entity: Entity);
	native!(delete_entity, 0xAE3CBE5BF394C9C9, (), entity: &mut Entity);
	native!(detach_entity, 0x961AC54BF0613F5D, (), entity: Entity, p1: bool, collision: bool);
	native!(freeze_entity_position, 0x428CA6DBD1094446, (), entity: Entity, toggle: bool);
	native!(_set_entity_something, 0x3910051CCECDB00C, (), entity: Entity, toggle: bool);
	native!(play_entity_anim, 0x7FB218262B810701, bool, entity: Entity, anim_name: *const c_char, anim_dict: *const c_char, p3: f32, r#loop: bool, stay_in_anim: bool, p6: bool, delta: f32, bitset: i32);
	native!(play_synchronized_entity_anim, 0xC77720A12FE14A86, bool, entity: Entity, synced_scene: i32, animation: *const c_char, prop_name: *const c_char, p4: f32, p5: f32, p6: i32, p7: f32);
	native!(play_synchronized_map_entity_anim, 0xB9C54555ED30FBC4, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: i32, p5: i32, p6: &mut i32, p7: &mut i32, p8: f32, p9: f32, p10: i32, p11: f32);
	native!(stop_synchronized_map_entity_anim, 0x11E79CAB7183B6F5, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: i32, p5: f32);
	native!(stop_entity_anim, 0x28004F88151E03E0, i32, entity: Entity, animation: *const c_char, anim_group: *const c_char, p3: f32);
	native!(stop_synchronized_entity_anim, 0x43D3807C077261E3, bool, entity: Entity, p1: f32, p2: bool);
	native!(has_anim_event_fired, 0xEAF4CD9EA3E7E922, bool, entity: Entity, action_hash: Hash);
	native!(find_anim_event_phase, 0x07F1BE2BCCAA27A7, bool, anim_dictionary: *const c_char, anim_name: *const c_char, p2: *const c_char, p3: &mut i32, p4: &mut i32);
	native!(set_entity_anim_current_time, 0x4487C259F0F70977, (), entity: Entity, anim_dictionary: *const c_char, anim_name: *const c_char, time: f32);
	native!(set_entity_anim_speed, 0x28D1A16553C51776, (), entity: Entity, anim_dictionary: *const c_char, anim_name: *const c_char, speed_multiplier: f32);
	native!(set_entity_as_mission_entity, 0xAD738C3085FE7E11, (), entity: Entity, p1: bool, p2: bool);
	native!(set_entity_as_no_longer_needed, 0xB736A491E64A32CF, (), entity: &mut Entity);
	native!(set_ped_as_no_longer_needed, 0x2595DD4236549CE3, (), ped: &mut Ped);
	native!(set_vehicle_as_no_longer_needed, 0x629BFA74418D6239, (), vehicle: &mut Vehicle);
	native!(set_object_as_no_longer_needed, 0x3AE22DEB5BA5A3E6, (), object: &mut Object);
	native!(set_entity_can_be_damaged, 0x1760FFA8AB074D66, (), entity: Entity, toggle: bool);
	native!(_get_entity_can_be_damaged, 0xD95CC5D2AB15A09F, bool, entity: Entity);
	native!(set_entity_can_be_damaged_by_relationship_group, 0xE22D8FDE858B8119, (), entity: Entity, b_can_be_damaged: bool, rel_group: i32);
	native!(_0x352e2b5cf420bf3b, 0x352E2B5CF420BF3B, (), p0: i32, p1: i32);
	native!(set_entity_can_be_targeted_without_los, 0xD3997889736FD899, (), entity: Entity, toggle: bool);
	native!(set_entity_collision, 0x1A9205C1B9EE827F, (), entity: Entity, toggle: bool, keep_physics: bool);
	native!(get_entity_collision_disabled, 0xCCF1E97BEFDAE480, bool, entity: Entity);
	native!(set_entity_completely_disable_collision, 0x9EBC85ED0FFFE51C, (), entity: Entity, p1: bool, p2: bool);
	native!(set_entity_coords, 0x06843DA7060A026B, (), entity: Entity, x_pos: f32, y_pos: f32, z_pos: f32, x_axis: bool, y_axis: bool, z_axis: bool, clear_area: bool);
	native!(_set_entity_coords_2, 0x621873ECE1178967, (), entity: Entity, x_pos: f32, y_pos: f32, z_pos: f32, x_axis: bool, y_axis: bool, z_axis: bool, clear_area: bool);
	native!(set_entity_coords_no_offset, 0x239A3351AC1DA385, (), entity: Entity, x_pos: f32, y_pos: f32, z_pos: f32, x_axis: bool, y_axis: bool, z_axis: bool);
	native!(set_entity_dynamic, 0x1718DE8E3F2823CA, (), entity: Entity, toggle: bool);
	native!(set_entity_heading, 0x8E2530AA8ADA980E, (), entity: Entity, heading: f32);
	native!(set_entity_health, 0x6B76DC1F3AE6E6A3, (), entity: Entity, health: i32, p2: i32);
	native!(set_entity_invincible, 0x3882114BDE571AD4, (), entity: Entity, toggle: bool);
	native!(set_entity_is_target_priority, 0xEA02E132F5C68722, (), entity: Entity, p1: bool, p2: f32);
	native!(set_entity_lights, 0x7CFBA6A80BDF3874, (), entity: Entity, toggle: bool);
	native!(set_entity_load_collision_flag, 0x0DC7CABAB1E9B67E, (), entity: Entity, toggle: bool, p2: i32);
	native!(has_collision_loaded_around_entity, 0xE9676F61BC0B3321, bool, entity: Entity);
	native!(set_entity_max_speed, 0x0E46A3FCBDE2A1B1, (), entity: Entity, speed: f32);
	native!(set_entity_only_damaged_by_player, 0x79F020FF9EDC0748, (), entity: Entity, toggle: bool);
	native!(set_entity_only_damaged_by_relationship_group, 0x7022BD828FA0B082, (), entity: Entity, p1: bool, p2: i32);
	native!(set_entity_proofs, 0xFAEE099C6F890BB8, (), entity: Entity, bullet_proof: bool, fire_proof: bool, explosion_proof: bool, collision_proof: bool, melee_proof: bool, p6: bool, p7: bool, drown_proof: bool);
	native!(_get_entity_proofs, 0xBE8CD9BE829BBEBF, bool, entity: Entity, bullet_proof: &mut bool, fire_proof: &mut bool, explosion_proof: &mut bool, collision_proof: &mut bool, melee_proof: &mut bool, p6: &mut bool, p7: &mut bool, drown_proof: &mut bool);
	native!(set_entity_quaternion, 0x77B21BE7AC540F07, (), entity: Entity, x: f32, y: f32, z: f32, w: f32);
	native!(set_entity_records_collisions, 0x0A50A1EEDAD01E65, (), entity: Entity, toggle: bool);
	native!(set_entity_rotation, 0x8524A8B0171D5E07, (), entity: Entity, pitch: f32, roll: f32, yaw: f32, rotation_order: i32, p5: bool);
	native!(set_entity_visible, 0xEA1C610A04DB6BBB, (), entity: Entity, toggle: bool, unk: bool);
	native!(_0xc34bc448da29f5e9, 0xC34BC448DA29F5E9, (), entity: Entity, toggle: bool);
	native!(_0xe66377cddada4810, 0xE66377CDDADA4810, (), entity: Entity, p1: bool);
	native!(set_entity_velocity, 0x1C99BB7B6E96D16F, (), entity: Entity, x: f32, y: f32, z: f32);
	native!(set_entity_has_gravity, 0x4A4722448F18EEF5, (), entity: Entity, toggle: bool);
	native!(set_entity_lod_dist, 0x5927F96A78577363, (), entity: Entity, value: i32);
	native!(get_entity_lod_dist, 0x4159C2762B5791D6, i32, entity: Entity);
	native!(set_entity_alpha, 0x44A0870B7E92D7C0, (), entity: Entity, alpha_level: i32, skin: bool);
	native!(get_entity_alpha, 0x5A47B3B5E63E94C6, i32, entity: Entity);
	native!(reset_entity_alpha, 0x9B1E824FFBB7027A, (), entity: Entity);
	native!(_0x490861b88f4fd846, 0x490861B88F4FD846, (), p0: i32);
	native!(_0xcea7c8e1b48ff68c, 0xCEA7C8E1B48FF68C, (), p0: i32, p1: i32);
	native!(_0x5c3b791d580e0bc2, 0x5C3B791D580E0BC2, (), entity: Entity, p1: f32);
	native!(set_entity_always_prerender, 0xACAD101E1FB66689, (), entity: Entity, toggle: bool);
	native!(set_entity_render_scorched, 0x730F5F8D3F0F2050, (), entity: Entity, toggle: bool);
	native!(set_entity_trafficlight_override, 0x57C5DB656185EAC4, (), entity: Entity, state: i32);
	native!(_0x78e8e3a640178255, 0x78E8E3A640178255, (), entity: Entity);
	native!(create_model_swap, 0x92C47782FDA8B2A3, (), x: f32, y: f32, z: f32, radius: f32, original_model: Hash, new_model: Hash, p6: bool);
	native!(remove_model_swap, 0x033C0F9A64E229AE, (), x: f32, y: f32, z: f32, radius: f32, original_model: Hash, new_model: Hash, p6: bool);
	native!(create_model_hide, 0x8A97BCA30A0CE478, (), x: f32, y: f32, z: f32, radius: f32, model: Hash, p5: bool);
	native!(create_model_hide_excluding_script_objects, 0x3A52AE588830BF7F, (), x: f32, y: f32, z: f32, radius: f32, model: Hash, p5: bool);
	native!(remove_model_hide, 0xD9E3006FB3CBD765, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(create_forced_object, 0x150E808B375A385A, (), x: f32, y: f32, z: f32, p3: i32, model_hash: Hash, p5: bool);
	native!(remove_forced_object, 0x61B6775E83C0DB6F, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(set_entity_no_collision_entity, 0xA53ED5520C07654A, (), entity1: Entity, entity2: Entity, this_frame_only: bool);
	native!(set_entity_motion_blur, 0x295D82A8559F9150, (), entity: Entity, toggle: bool);
	native!(set_can_auto_vault_on_entity, 0xE12ABE5E3A389A6C, (), entity: Entity, toggle: bool);
	native!(set_can_climb_on_entity, 0xA80AE305E0A3044F, (), entity: Entity, toggle: bool);
	native!(_0xdc6f8601faf2e893, 0xDC6F8601FAF2E893, (), entity: Entity, toggle: bool);
	native!(_0x2c2e3dc128f44309, 0x2C2E3DC128F44309, (), entity: Entity, p1: bool);
	native!(_0x1a092bb0c3808b96, 0x1A092BB0C3808B96, (), entity: Entity, p1: bool);
	native!(_get_entity_bone_rotation, 0xCE6294A232D03786, Vec3, entity: Entity, bone_index: i32);
	native!(_get_entity_bone_coords, 0x46F8696933A63C9B, Vec3, entity: Entity, bone_index: i32);
	native!(_get_entity_bone_rotation_local, 0xBD8D32550E5CEBFE, Vec3, entity: Entity, bone_index: i32);
	native!(_0xb328dcc3a3aa401b, 0xB328DCC3A3AA401B, i32, p0: i32);
	native!(_enable_entity_unk, 0x6CE177D014502E8A, (), entity: Entity);
	native!(_0xb17bc6453f6cf5ac, 0xB17BC6453F6CF5AC, (), p0: i32, p1: i32);
	native!(_0x68b562e124cc0aef, 0x68B562E124CC0AEF, (), p0: i32, p1: i32);
	native!(_0x36f32de87082343e, 0x36F32DE87082343E, (), p0: i32, p1: i32);
	native!(_get_entity_pickup, 0x1F922734E259BD26, Entity, entity: Entity, model_hash: Hash);
	native!(_0xd7b80e7c3befc396, 0xD7B80E7C3BEFC396, (), p0: i32, p1: i32);
}

pub mod event {
	use super::*;

	native!(set_decision_maker, 0xB604A2942ADED0EE, (), ped: Ped, name: Hash);
	native!(clear_decision_maker_event_response, 0x4FC9381A7AEE8968, (), name: Hash, r#type: i32);
	native!(block_decision_maker_event, 0xE42FCDFD0E4196F7, (), name: Hash, r#type: i32);
	native!(unblock_decision_maker_event, 0xD7CD9CF34F2C99E8, (), name: Hash, r#type: i32);
	native!(add_shocking_event_at_position, 0xD9F8455409B525E9, ScrHandle, r#type: i32, x: f32, y: f32, z: f32, duration: f32);
	native!(add_shocking_event_for_entity, 0x7FD8F3BE76F89422, ScrHandle, r#type: i32, entity: Entity, duration: f32);
	native!(is_shocking_event_in_sphere, 0x1374ABB7C15BAB92, bool, r#type: i32, x: f32, y: f32, z: f32, radius: f32);
	native!(remove_shocking_event, 0x2CDA538C44C6CCE5, bool, event: ScrHandle);
	native!(remove_all_shocking_events, 0xEAABE8FDFA21274C, (), p0: bool);
	native!(remove_shocking_event_spawn_blocking_areas, 0x340F1415B68AEADE, ());
	native!(suppress_shocking_events_next_frame, 0x2F9A292AD0A3BD89, ());
	native!(suppress_shocking_event_type_next_frame, 0x3FD2EC8BF1F1CF30, (), r#type: i32);
	native!(suppress_agitation_events_next_frame, 0x5F3B7749C112D552, ());
}

pub mod files {
	use super::*;

	native!(_get_num_decorations, 0x278F76C3B0A8F109, i32, character: i32);
	native!(_get_tattoo_collection_data, 0xFF56381874F82086, bool, character: i32, index: i32, out_component: &mut i32);
	native!(init_shop_ped_component, 0x1E8C308FD312C036, (), out_component: &mut i32);
	native!(init_shop_ped_prop, 0xEB0A2B758F7B850F, (), out_prop: &mut i32);
	native!(_0x50f457823ce6eb5f, 0x50F457823CE6EB5F, i32, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_get_num_props_from_outfit, 0x9BDF59818B1E38C1, i32, character: i32, p1: i32, p2: i32, p3: bool, p4: i32, component_id: i32);
	native!(get_shop_ped_query_component, 0x249E310B2D920699, (), component_id: i32, out_component: &mut i32);
	native!(get_shop_ped_component, 0x74C0E2A57EC66760, (), component_hash: Hash, out_component: &mut i32);
	native!(get_shop_ped_query_prop, 0xDE44A00999B2837D, (), p0: i32, p1: &mut i32);
	native!(get_shop_ped_prop, 0x5D5CAFF661DDF6FC, (), component_hash: Hash, out_prop: &mut i32);
	native!(get_hash_name_for_component, 0x0368B3A838070348, Hash, entity: Entity, component_id: i32, drawable_variant: i32, texture_variant: i32);
	native!(get_hash_name_for_prop, 0x5D6160275CAEC8DD, Hash, entity: Entity, component_id: i32, prop_index: i32, prop_texture_index: i32);
	native!(get_shop_ped_apparel_variant_component_count, 0xC17AD0E5752BECDA, i32, component_hash: Hash);
	native!(_get_shop_ped_apparel_variant_prop_count, 0xD40AAC51E8E4C663, i32, prop_hash: Hash);
	native!(get_variant_component, 0x6E11F282F11863B6, (), component_hash: Hash, variant_component_index: i32, name_hash: &mut Hash, enum_value: &mut i32, component_type: &mut i32);
	native!(_get_variant_prop, 0xD81B7F27BC773E66, (), component_hash: Hash, variant_prop_index: i32, name_hash: &mut Hash, enum_value: &mut i32, anchor_point: &mut i32);
	native!(get_shop_ped_apparel_forced_component_count, 0xC6B9DB42C04DD8C3, i32, component_hash: Hash);
	native!(get_shop_ped_apparel_forced_prop_count, 0x017568A8182D98A6, i32, component_hash: Hash);
	native!(get_forced_component, 0x6C93ED8C2F74859B, (), component_hash: Hash, forced_component_index: i32, name_hash: &mut Hash, enum_value: &mut i32, component_type: &mut i32);
	native!(get_forced_prop, 0xE1CA84EBF72E691D, (), component_hash: Hash, forced_prop_index: i32, name_hash: &mut Hash, enum_value: &mut i32, anchor_point: &mut i32);
	native!(does_shop_ped_apparel_have_restriction_tag, 0x341DE7ED1D2A1BFD, bool, component_hash: Hash, restriction_tag_hash: Hash, component_id: i32);
	native!(_0xf3fbe2d50a6a8c28, 0xF3FBE2D50A6A8C28, i32, character: i32, p1: bool);
	native!(get_shop_ped_query_outfit, 0x6D793F03A631FE56, (), p0: i32, outfit: &mut i32);
	native!(get_shop_ped_outfit, 0xB7952076E444979D, (), p0: i32, p1: &mut i32);
	native!(get_shop_ped_outfit_locate, 0x073CA26B079F956E, i32, p0: i32);
	native!(get_shop_ped_outfit_prop_variant, 0xA9F9C2E0FDE11CBB, bool, outfit: i32, slot: i32, item: &mut i32);
	native!(get_shop_ped_outfit_component_variant, 0x19F2A026EDF0013F, bool, outfit: i32, slot: i32, item: &mut i32);
	native!(get_num_dlc_vehicles, 0xA7A866D21CD2329B, i32);
	native!(get_dlc_vehicle_model, 0xECC01B7C5763333C, Hash, dlc_vehicle_index: i32);
	native!(get_dlc_vehicle_data, 0x33468EDC08E371F6, bool, dlc_vehicle_index: i32, out_data: &mut i32);
	native!(get_dlc_vehicle_flags, 0x5549EE11FA22FCF2, i32, dlc_vehicle_index: i32);
	native!(get_num_dlc_weapons, 0xEE47635F352DA367, i32);
	native!(get_dlc_weapon_data, 0x79923CD21BECE14E, bool, dlc_weapon_index: i32, out_data: &mut i32);
	native!(get_num_dlc_weapon_components, 0x405425358A7D61FE, i32, dlc_weapon_index: i32);
	native!(get_dlc_weapon_component_data, 0x6CF598A2957C2BF8, bool, dlc_weapon_index: i32, dlc_weap_comp_index: i32, component_data_ptr: &mut i32);
	native!(is_content_item_locked, 0xD4D7B033C3AA243C, bool, item_hash: Hash);
	native!(is_dlc_vehicle_mod, 0x0564B9FF9631B82C, bool, hash: Hash);
	native!(get_dlc_vehicle_mod_lock_hash, 0xC098810437312FFF, Hash, hash: Hash);
	native!(_load_content_change_set_group, 0x6BEDF5769AC2DC07, (), hash: Hash);
	native!(_unload_content_change_set_group, 0x3C1978285B036B25, (), hash: Hash);
}

pub mod fire {
	use super::*;

	native!(start_script_fire, 0x6B83617E04503888, FireId, x: f32, y: f32, z: f32, max_children: i32, is_gas_fire: bool);
	native!(remove_script_fire, 0x7FF548385680673F, (), fire_handle: FireId);
	native!(start_entity_fire, 0xF6A9D9708F6F23DF, FireId, entity: Entity);
	native!(stop_entity_fire, 0x7F0DD2EBBB651AFF, (), entity: Entity);
	native!(is_entity_on_fire, 0x28D3FED7190D3A0B, bool, entity: Entity);
	native!(get_number_of_fires_in_range, 0x50CAD495A460B305, i32, x: f32, y: f32, z: f32, radius: f32);
	native!(_set_fire_spread_rate, 0x8F390AC4155099BA, (), p0: f32);
	native!(stop_fire_in_range, 0x056A8A219B8E829F, (), x: f32, y: f32, z: f32, radius: f32);
	native!(get_closest_fire_pos, 0x352A9F6BCF90081F, bool, out_position: &mut Vec3, x: f32, y: f32, z: f32);
	native!(add_explosion, 0xE3AD2BDBAEE269AC, (), x: f32, y: f32, z: f32, explosion_type: i32, damage_scale: f32, is_audible: bool, is_invisible: bool, camera_shake: f32, no_damage: bool);
	native!(add_owned_explosion, 0x172AA1B624FA1013, (), ped: Ped, x: f32, y: f32, z: f32, explosion_type: i32, damage_scale: f32, is_audible: bool, is_invisible: bool, camera_shake: f32);
	native!(add_explosion_with_user_vfx, 0x36DD3FE58B5E5212, (), x: f32, y: f32, z: f32, explosion_type: i32, explosion_fx: Hash, damage_scale: f32, is_audible: bool, is_invisible: bool, camera_shake: f32);
	native!(is_explosion_in_area, 0x2E2EBA0EE7CED0E0, bool, explosion_type: i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
	native!(is_explosion_active_in_area, 0x6070104B699B2EF4, bool, explosion_type: i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
	native!(is_explosion_in_sphere, 0xAB0F816885B0E483, bool, explosion_type: i32, x: f32, y: f32, z: f32, radius: f32);
	native!(_get_entity_inside_explosion_sphere, 0xB3CD51E3DB86F176, Entity, explosion_type: i32, x: f32, y: f32, z: f32, radius: f32);
	native!(is_explosion_in_angled_area, 0xA079A6C51525DC4B, bool, explosion_type: i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, angle: f32);
	native!(_get_entity_inside_explosion_area, 0x14BA4BA137AF6CEC, Entity, explosion_type: i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, radius: f32);
}

pub mod graphics {
	use super::*;

	native!(set_debug_lines_and_spheres_drawing_active, 0x175B6BFC15CDD0C5, (), enabled: bool);
	native!(draw_debug_line, 0x7FDFADE676AA3CB0, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32);
	native!(draw_debug_line_with_two_colours, 0xD8B9A8AC5608FF94, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, r1: i32, g1: i32, b1: i32, r2: i32, g2: i32, b2: i32, alpha1: i32, alpha2: i32);
	native!(draw_debug_sphere, 0xAAD68E1AB39DA632, (), x: f32, y: f32, z: f32, radius: f32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(draw_debug_box, 0x083A2CA4F2E573BD, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32);
	native!(draw_debug_cross, 0x73B1189623049839, (), x: f32, y: f32, z: f32, size: f32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(draw_debug_text, 0x3903E216620488E8, (), text: *const c_char, x: f32, y: f32, z: f32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(draw_debug_text_2d, 0xA3BB2E9555C05A8F, (), text: *const c_char, x: f32, y: f32, z: f32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(draw_line, 0x6B7256074AE34680, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(draw_poly, 0xAC26716048436851, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, x3: f32, y3: f32, z3: f32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(_0x29280002282f1928, 0x29280002282F1928, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32, p10: i32, p11: i32, p12: i32, p13: i32, p14: i32, p15: i32, p16: i32, p17: i32, p18: i32, p19: i32, p20: i32, p21: i32, p22: i32, p23: i32);
	native!(_0x736d7aa1b750856b, 0x736D7AA1B750856B, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32, p10: i32, p11: i32, p12: i32, p13: i32, p14: i32, p15: i32, p16: i32, p17: i32, p18: i32, p19: i32, p20: i32, p21: i32, p22: i32, p23: i32, p24: i32, p25: i32, p26: i32, p27: i32, p28: i32, p29: i32, p30: i32, p31: i32);
	native!(draw_box, 0xD3A9971CADAC7252, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(set_backfaceculling, 0x23BA6B0C2AD7B0D3, (), toggle: bool);
	native!(_0xc5c8f970d4edff71, 0xC5C8F970D4EDFF71, (), p0: i32);
	native!(_0x1dd2139a9a20dce8, 0x1DD2139A9A20DCE8, i32);
	native!(_0x90a78ecaa4e78453, 0x90A78ECAA4E78453, i32);
	native!(_0x0a46af8a78dc5e0a, 0x0A46AF8A78DC5E0A, ());
	native!(_0x4862437a486f91b0, 0x4862437A486F91B0, bool, p0: &mut i32, p1: i32, p2: i32, p3: i32);
	native!(_0x1670f8d05056f257, 0x1670F8D05056F257, i32, p0: &mut i32);
	native!(_0x7fa5d82b8f58ec06, 0x7FA5D82B8F58EC06, i32);
	native!(_0x5b0316762afd4a64, 0x5B0316762AFD4A64, i32);
	native!(_0x346ef3ecaaab149e, 0x346EF3ECAAAB149E, ());
	native!(begin_take_high_quality_photo, 0xA67C35C56EB1BD9D, bool);
	native!(get_status_of_take_high_quality_photo, 0x0D6CA79EEEBD8CA3, i32);
	native!(_0xd801cc02177fa3f1, 0xD801CC02177FA3F1, ());
	native!(_0x1bbc135a4d25edde, 0x1BBC135A4D25EDDE, (), p0: bool);
	native!(_0xf3f776ada161e47d, 0xF3F776ADA161E47D, (), p0: i32, p1: i32);
	native!(save_high_quality_photo, 0x3DEC726C25A11BAC, bool, unused: i32);
	native!(get_status_of_save_high_quality_photo, 0x0C0C4E81E1AC60A0, i32);
	native!(_0x759650634f07b6b4, 0x759650634F07B6B4, bool, p0: i32);
	native!(_0xcb82a0bf0e3e3265, 0xCB82A0BF0E3E3265, i32, p0: i32);
	native!(_0x6a12d88881435dca, 0x6A12D88881435DCA, ());
	native!(_0x1072f115dab0717e, 0x1072F115DAB0717E, (), p0: bool, p1: bool);
	native!(get_maximum_number_of_photos, 0x34D23450F028B0BF, i32);
	native!(get_maximum_number_of_cloud_photos, 0xDC54A7AF8B3A14EF, i32);
	native!(_get_current_number_of_photos, 0x473151EBC762C6DA, i32);
	native!(_0x2a893980e96b659a, 0x2A893980E96B659A, i32, p0: i32);
	native!(_0xf5bed327cea362b1, 0xF5BED327CEA362B1, i32, p0: i32);
	native!(_0x4af92acd3141d96c, 0x4AF92ACD3141D96C, ());
	native!(_0xe791df1f73ed2c8b, 0xE791DF1F73ED2C8B, i32, p0: i32);
	native!(_0xec72c258667be5ea, 0xEC72C258667BE5EA, i32, p0: i32);
	native!(_return_two, 0x40AFB081F8ADD4EE, i32, p0: i32);
	native!(_draw_light_with_range_and_shadow, 0xF49E9A9716A04595, (), x: f32, y: f32, z: f32, r: i32, g: i32, b: i32, range: f32, intensity: f32, shadow: f32);
	native!(draw_light_with_range, 0xF2A1B2771A01DBD4, (), pos_x: f32, pos_y: f32, pos_z: f32, color_r: i32, color_g: i32, color_b: i32, range: f32, intensity: f32);
	native!(draw_spot_light, 0xD0F64B265C8C8B33, (), pos_x: f32, pos_y: f32, pos_z: f32, dir_x: f32, dir_y: f32, dir_z: f32, color_r: i32, color_g: i32, color_b: i32, distance: f32, brightness: f32, hardness: f32, radius: f32, falloff: f32);
	native!(_draw_spot_light_with_shadow, 0x5BCA583A583194DB, (), pos_x: f32, pos_y: f32, pos_z: f32, dir_x: f32, dir_y: f32, dir_z: f32, color_r: i32, color_g: i32, color_b: i32, distance: f32, brightness: f32, roundness: f32, radius: f32, falloff: f32, shadow_id: i32);
	native!(fade_up_ped_light, 0xC9B18B4619F48F7B, (), p0: f32);
	native!(update_lights_on_entity, 0xDEADC0DEDEADC0DE, (), entity: Entity);
	native!(_0x9641588dab93b4b5, 0x9641588DAB93B4B5, (), p0: i32);
	native!(_0x393bd2275ceb7793, 0x393BD2275CEB7793, i32);
	native!(draw_marker, 0x28477EC23D892089, (), r#type: i32, pos_x: f32, pos_y: f32, pos_z: f32, dir_x: f32, dir_y: f32, dir_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, scale_x: f32, scale_y: f32, scale_z: f32, red: i32, green: i32, blue: i32, alpha: i32, bob_up_and_down: bool, face_camera: bool, p19: i32, rotate: bool, texture_dict: *const c_char, texture_name: *const c_char, draw_on_ents: bool);
	native!(_draw_marker_2, 0xE82728F0DE75D13A, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32, p10: i32, p11: i32, p12: i32, p13: i32, p14: i32, p15: i32, p16: i32, p17: i32, p18: i32, p19: i32, p20: i32, p21: i32, p22: i32, p23: i32, p24: i32, p25: i32);
	native!(_draw_sphere, 0x799017F9E3B10112, (), x: f32, y: f32, z: f32, radius: f32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(create_checkpoint, 0x0134F0835AB6BFCB, i32, r#type: i32, pos_x1: f32, pos_y1: f32, pos_z1: f32, pos_x2: f32, pos_y2: f32, pos_z2: f32, radius: f32, red: i32, green: i32, blue: i32, alpha: i32, reserved: i32);
	native!(_set_checkpoint_scale, 0x4B5B4DA5D79F1943, (), checkpoint: i32, p0: f32);
	native!(_0x44621483ff966526, 0x44621483FF966526, (), p0: i32, p1: i32);
	native!(set_checkpoint_cylinder_height, 0x2707AAE9D9297D89, (), checkpoint: i32, near_height: f32, far_height: f32, radius: f32);
	native!(set_checkpoint_rgba, 0x7167371E8AD747F7, (), checkpoint: i32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(_set_checkpoint_icon_rgba, 0xB9EA40907C680580, (), checkpoint: i32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(_0xf51d36185993515d, 0xF51D36185993515D, (), checkpoint: i32, pos_x: f32, pos_y: f32, pos_z: f32, unk_x: f32, unk_y: f32, unk_z: f32);
	native!(_0xfcf6788fc4860cd4, 0xFCF6788FC4860CD4, (), checkpoint: i32);
	native!(_0x615d3925e87a3b26, 0x615D3925E87A3B26, (), checkpoint: i32);
	native!(_0xdb1ea9411c8911ec, 0xDB1EA9411C8911EC, (), p0: i32);
	native!(_0x3c788e7f6438754d, 0x3C788E7F6438754D, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(delete_checkpoint, 0xF5ED37F54CD4D52E, (), checkpoint: i32);
	native!(_0x22a249a53034450a, 0x22A249A53034450A, (), p0: bool);
	native!(_0xdc459cfa0cce245b, 0xDC459CFA0CCE245B, (), toggle: bool);
	native!(request_streamed_texture_dict, 0xDFA2EF8E04127DD5, (), texture_dict: *const c_char, p1: bool);
	native!(has_streamed_texture_dict_loaded, 0x0145F696AAAAD2E4, bool, texture_dict: *const c_char);
	native!(set_streamed_texture_dict_as_no_longer_needed, 0xBE2CACCF5A8AA805, (), texture_dict: *const c_char);
	native!(draw_rect, 0x3A618A217E5154F0, (), x: f32, y: f32, width: f32, height: f32, r: i32, g: i32, b: i32, a: i32, p8: bool);
	native!(set_script_gfx_draw_behind_pausemenu, 0xC6372ECD45D73BCD, (), toggle: bool);
	native!(set_script_gfx_draw_order, 0x61BB1D9B3A95D802, (), draw_order: i32);
	native!(set_script_gfx_align, 0xB8A850F20A067EB6, (), x: i32, y: i32);
	native!(reset_script_gfx_align, 0xE3A3DB414A373DAB, ());
	native!(set_script_gfx_align_params, 0xF5A2C681787E579D, (), x: f32, y: f32, p2: f32, p3: f32);
	native!(_get_script_gfx_position, 0x6DD8F5AA635EB4B2, (), p0: f32, p1: f32, p2: &mut f32, p3: &mut f32);
	native!(get_safe_zone_size, 0xBAF107B6BB2C97F0, f32);
	native!(draw_sprite, 0xE7FFAE5EBF23D890, (), texture_dict: *const c_char, texture_name: *const c_char, screen_x: f32, screen_y: f32, width: f32, height: f32, heading: f32, red: i32, green: i32, blue: i32, alpha: i32, p11: bool);
	native!(_0x2d3b147afad49de0, 0x2D3B147AFAD49DE0, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32, p10: i32, p11: i32);
	native!(_draw_interactive_sprite, 0x2BC54A8188768488, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32, p10: i32);
	native!(add_entity_icon, 0x9CD43EEE12BF4DD0, i32, entity: Entity, icon: *const c_char);
	native!(set_entity_icon_visibility, 0xE0E8BEECCA96BA31, (), entity: Entity, toggle: bool);
	native!(set_entity_icon_color, 0x1D5F595CCAE2E238, (), entity: Entity, red: i32, green: i32, blue: i32, alpha: i32);
	native!(set_draw_origin, 0xAA0008F3BBB8F416, (), x: f32, y: f32, z: f32, p3: i32);
	native!(clear_draw_origin, 0xFF0B610F6BE0D7AF, ());
	native!(_set_bink_movie_requested, 0x338D9F609FD632DB, i32, name: *const c_char);
	native!(_play_bink_movie, 0x70D2CC8A542A973C, (), bink_movie: i32);
	native!(_stop_bink_movie, 0x63606A61DE68898A, (), bink_movie: i32);
	native!(_release_bink_movie, 0x04D950EEFA4EED8C, (), bink_movie: i32);
	native!(_draw_bink_movie, 0x7118E83EEB9F7238, (), bink_movie: i32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, r: i32, g: i32, b: i32, a: i32);
	native!(_set_bink_movie_progress, 0x0CB6B3446855B57A, (), bink_movie: i32, progress: f32);
	native!(_get_bink_movie_progress, 0x8E17DDD6B9D5BF29, f32, bink_movie: i32);
	native!(_set_bink_movie_unk, 0xAFF33B1178172223, (), bink_movie: i32, value: f32);
	native!(attach_tv_audio_to_entity, 0x845BAD77CC770633, (), entity: Entity);
	native!(set_tv_audio_frontend, 0x113D2C5DC57E1774, (), toggle: bool);
	native!(_0x6805d58caa427b72, 0x6805D58CAA427B72, (), p0: i32, p1: i32);
	native!(load_movie_mesh_set, 0xB66064452270E8F1, i32, movie_mesh_set_name: *const c_char);
	native!(release_movie_mesh_set, 0xEB119AA014E89183, (), movie_mesh_set: i32);
	native!(_0x9b6e70c5ceef4eeb, 0x9B6E70C5CEEF4EEB, i32, p0: i32);
	native!(get_screen_resolution, 0x888D57E407E63624, (), x: &mut i32, y: &mut i32);
	native!(_get_active_screen_resolution, 0x873C9F3104101DD3, (), x: &mut i32, y: &mut i32);
	native!(_get_aspect_ratio, 0xF1307EF624A80D87, f32, b: bool);
	native!(_0xb2ebe8cbc58b90e9, 0xB2EBE8CBC58B90E9, i32);
	native!(get_is_widescreen, 0x30CF4BDA4FCB1905, bool);
	native!(get_is_hidef, 0x84ED31191CC5D2C9, bool);
	native!(_0xefabc7722293da7c, 0xEFABC7722293DA7C, ());
	native!(set_nightvision, 0x18F621F7A5B1F85D, (), toggle: bool);
	native!(get_requestingnightvision, 0x35FB78DC42B7BD21, bool);
	native!(get_usingnightvision, 0x2202A3F42C8E5F79, bool);
	native!(_0xef398beee4ef45f9, 0xEF398BEEE4EF45F9, (), p0: bool);
	native!(_0x814af7dcaacc597b, 0x814AF7DCAACC597B, (), p0: i32);
	native!(_0x43fa7cbe20dab219, 0x43FA7CBE20DAB219, (), p0: i32);
	native!(set_noiseoveride, 0xE787BF1C5CF823C9, (), toggle: bool);
	native!(set_noisinessoveride, 0xCB6A7C3BB17A0C67, (), value: f32);
	native!(get_screen_coord_from_world_coord, 0x34E82F05DF2974F5, bool, world_x: f32, world_y: f32, world_z: f32, screen_x: &mut f32, screen_y: &mut f32);
	native!(get_texture_resolution, 0x35736EE65BD00C11, Vec3, texture_dict: *const c_char, texture_name: *const c_char);
	native!(_0x95eb5e34f821babe, 0x95EB5E34F821BABE, i32, p0: i32, p1: i32, p2: i32);
	native!(_0xe2892e7e55d7073a, 0xE2892E7E55D7073A, (), p0: f32);
	native!(set_flash, 0x0AB84296FED9CFC6, (), p0: f32, p1: f32, fade_in: f32, duration: f32, fade_out: f32);
	native!(disable_occlusion_this_frame, 0x3669F1B198DCAA4F, ());
	native!(set_artificial_lights_state, 0x1268615ACE24D504, (), state: bool);
	native!(_0xc35a6d07c93802b2, 0xC35A6D07C93802B2, ());
	native!(create_tracked_point, 0xE2C9439ED45DEA60, i32);
	native!(set_tracked_point_info, 0x164ECBB3CF750CB0, (), point: i32, x: f32, y: f32, z: f32, radius: f32);
	native!(is_tracked_point_visible, 0xC45CCDAAC9221CA8, bool, point: i32);
	native!(destroy_tracked_point, 0xB25DC90BAD56CA42, (), point: i32);
	native!(_0xbe197eaa669238f4, 0xBE197EAA669238F4, i32, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x61f95e5bb3e0a8c6, 0x61F95E5BB3E0A8C6, (), p0: i32);
	native!(_0xae51bc858f32ba66, 0xAE51BC858F32BA66, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: f32);
	native!(_0x649c97d52332341a, 0x649C97D52332341A, (), p0: i32);
	native!(_0x2c42340f916c5930, 0x2C42340F916C5930, i32, p0: i32);
	native!(_0x14fc5833464340a8, 0x14FC5833464340A8, ());
	native!(_0x0218ba067d249dea, 0x0218BA067D249DEA, ());
	native!(_0x1612c45f9e3e0d44, 0x1612C45F9E3E0D44, ());
	native!(_0x5debd9c4dc995692, 0x5DEBD9C4DC995692, ());
	native!(_0xaae9be70ec7c69ab, 0xAAE9BE70EC7C69AB, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32);
	native!(_grass_lod_shrink_script_areas, 0x6D955F6A9E0295B1, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(_grass_lod_reset_script_areas, 0x302C91AB2D477F7E, ());
	native!(_0x03fc694ae06c5a20, 0x03FC694AE06C5A20, ());
	native!(_0xd2936cab8b58fcbd, 0xD2936CAB8B58FCBD, (), p0: i32, p1: bool, p2: f32, p3: f32, p4: f32, p5: f32, p6: bool, p7: f32);
	native!(_0x5f0f3f56635809ef, 0x5F0F3F56635809EF, (), p0: f32);
	native!(_0x5e9daf5a20f15908, 0x5E9DAF5A20F15908, (), p0: f32);
	native!(_0x36f6626459d91457, 0x36F6626459D91457, (), p0: f32);
	native!(_0x259ba6d4e6f808f1, 0x259BA6D4E6F808F1, (), p0: i32);
	native!(_set_far_shadows_suppressed, 0x80ECBC0C856D3B0B, (), toggle: bool);
	native!(_0x25fc3e33a31ad0c9, 0x25FC3E33A31AD0C9, (), p0: bool);
	native!(_cascadeshadows_set_type, 0xB11D94BC55F41932, (), r#type: *const c_char);
	native!(_cascadeshadows_reset_type, 0x27CB772218215325, ());
	native!(_0x6ddbf9dffc4ac080, 0x6DDBF9DFFC4AC080, (), p0: bool);
	native!(_0xd39d13c9febf0511, 0xD39D13C9FEBF0511, (), p0: bool);
	native!(_0x02ac28f3a01fa04a, 0x02AC28F3A01FA04A, (), p0: f32);
	native!(_0x0ae73d8df3a762b2, 0x0AE73D8DF3A762B2, (), p0: bool);
	native!(_0xca465d9cc0d231ba, 0xCA465D9CC0D231BA, (), p0: i32);
	native!(golf_trail_set_enabled, 0xA51C4B86B71652AE, (), toggle: bool);
	native!(golf_trail_set_path, 0x312342E1A4874F3F, (), p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: bool);
	native!(golf_trail_set_radius, 0x2485D34E50A22E84, (), p0: f32, p1: f32, p2: f32);
	native!(golf_trail_set_colour, 0x12995F2E53FFA601, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32, p10: i32, p11: i32);
	native!(golf_trail_set_tessellation, 0xDBAA5EC848BA2D46, (), p0: i32, p1: i32);
	native!(_0xc0416b061f2b7e5e, 0xC0416B061F2B7E5E, (), p0: bool);
	native!(golf_trail_set_fixed_control_point, 0xB1BB03742917A5D6, (), r#type: i32, x_pos: f32, y_pos: f32, z_pos: f32, p4: f32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(golf_trail_set_shader_params, 0x9CFDD90B2B844BF7, (), p0: f32, p1: f32, p2: f32, p3: f32, p4: f32);
	native!(golf_trail_set_facing, 0x06F761EA47C1D3ED, (), p0: bool);
	native!(golf_trail_get_max_height, 0xA4819F5E23E2FFAD, f32);
	native!(golf_trail_get_visual_control_point, 0xA4664972A9B8F8BA, Vec3, p0: i32);
	native!(set_seethrough, 0x7E08924259E08CE0, (), toggle: bool);
	native!(get_usingseethrough, 0x44B80ABAB9D80BD3, bool);
	native!(seethrough_reset, 0x70A64C0234EF522C, ());
	native!(_seethrough_set_fade_start_distance, 0xA78DE25577300BA1, (), distance: f32);
	native!(_seethrough_set_fade_end_distance, 0x9D75795B9DC6EBBF, (), distance: f32);
	native!(_seethrough_get_max_thickness, 0x43DBAE39626CE83F, f32);
	native!(_seethrough_set_max_thickness, 0x0C8FAC83902A62DF, (), thickness: f32);
	native!(_seethrough_set_noise_amount_min, 0xFF5992E1C9E65D05, (), amount: f32);
	native!(_seethrough_set_noise_amount_max, 0xFEBFBFDFB66039DE, (), amount: f32);
	native!(_seethrough_set_hi_light_intensity, 0x19E50EB6E33E1D28, (), intensity: f32);
	native!(_seethrough_set_hi_light_noise, 0x1636D7FC127B10D2, (), noise: f32);
	native!(seethrough_set_heatscale, 0xD7D0B00177485411, (), index: i32, heat_scale: f32);
	native!(_seethrough_set_color_near, 0x1086127B3A63505E, (), red: i32, green: i32, blue: i32);
	native!(_0xb3c641f3630bf6da, 0xB3C641F3630BF6DA, (), p0: f32);
	native!(_0xe59343e9e96529e7, 0xE59343E9E96529E7, f32);
	native!(_0x6a51f78772175a51, 0x6A51F78772175A51, (), toggle: bool);
	native!(_0xe63d7c6eececb66b, 0xE63D7C6EECECB66B, (), toggle: bool);
	native!(_0xe3e2c1b4c59dbc77, 0xE3E2C1B4C59DBC77, (), unk: i32);
	native!(trigger_screenblur_fade_in, 0xA328A24AAA6B7FDC, bool, transition_time: f32);
	native!(trigger_screenblur_fade_out, 0xEFACC8AEF94430D5, bool, transition_time: f32);
	native!(disable_screenblur_fade, 0xDE81239437E8C5A8, ());
	native!(get_screenblur_fade_current_time, 0x5CCABFFCA31DDE33, f32);
	native!(is_screenblur_fade_running, 0x7B226C785A52A0A9, bool);
	native!(toggle_paused_renderphases, 0xDFC252D8A3E15AB7, (), toggle: bool);
	native!(get_toggle_paused_renderphases_status, 0xEB3DAC2C86001E5E, bool);
	native!(reset_paused_renderphases, 0xE1C8709406F2C41C, ());
	native!(_0x851cd923176eba7c, 0x851CD923176EBA7C, ());
	native!(_set_hidof_env_blur_params, 0xBA3D65906822BED5, (), p0: bool, p1: bool, p2: f32, p3: f32, p4: f32, p5: f32);
	native!(_0xb569f41f3e7e83a4, 0xB569F41F3E7E83A4, (), p0: i32);
	native!(_0x7ac24eab6d74118d, 0x7AC24EAB6D74118D, bool, p0: bool);
	native!(_0xbcedb009461da156, 0xBCEDB009461DA156, i32);
	native!(_0x27feb5254759cde3, 0x27FEB5254759CDE3, bool, texture_dict: *const c_char, p1: bool);
	native!(start_particle_fx_non_looped_at_coord, 0x25129531F77B9ED3, i32, effect_name: *const c_char, x_pos: f32, y_pos: f32, z_pos: f32, x_rot: f32, y_rot: f32, z_rot: f32, scale: f32, x_axis: bool, y_axis: bool, z_axis: bool);
	native!(start_networked_particle_fx_non_looped_at_coord, 0xF56B8137DF10135D, bool, effect_name: *const c_char, x_pos: f32, y_pos: f32, z_pos: f32, x_rot: f32, y_rot: f32, z_rot: f32, scale: f32, x_axis: bool, y_axis: bool, z_axis: bool, p11: bool);
	native!(start_particle_fx_non_looped_on_ped_bone, 0x0E7E72961BA18619, bool, effect_name: *const c_char, ped: Ped, offset_x: f32, offset_y: f32, offset_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, bone_index: i32, scale: f32, axis_x: bool, axis_y: bool, axis_z: bool);
	native!(start_networked_particle_fx_non_looped_on_ped_bone, 0xA41B6A43642AC2CF, bool, effect_name: *const c_char, ped: Ped, offset_x: f32, offset_y: f32, offset_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, bone_index: i32, scale: f32, axis_x: bool, axis_y: bool, axis_z: bool);
	native!(start_particle_fx_non_looped_on_entity, 0x0D53A3B8DA0809D2, bool, effect_name: *const c_char, entity: Entity, offset_x: f32, offset_y: f32, offset_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, scale: f32, axis_x: bool, axis_y: bool, axis_z: bool);
	native!(start_networked_particle_fx_non_looped_on_entity, 0xC95EB1DB6E92113D, bool, effect_name: *const c_char, entity: Entity, offset_x: f32, offset_y: f32, offset_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, scale: f32, axis_x: bool, axis_y: bool, axis_z: bool);
	native!(set_particle_fx_non_looped_colour, 0x26143A59EF48B262, (), r: f32, g: f32, b: f32);
	native!(set_particle_fx_non_looped_alpha, 0x77168D722C58B2FC, (), alpha: f32);
	native!(_0x8cde909a0370bb3a, 0x8CDE909A0370BB3A, (), toggle: bool);
	native!(start_particle_fx_looped_at_coord, 0xE184F4F0DC5910E7, i32, effect_name: *const c_char, x: f32, y: f32, z: f32, x_rot: f32, y_rot: f32, z_rot: f32, scale: f32, x_axis: bool, y_axis: bool, z_axis: bool, p11: bool);
	native!(start_particle_fx_looped_on_ped_bone, 0xF28DA9F38CD1787C, i32, effect_name: *const c_char, ped: Ped, x_offset: f32, y_offset: f32, z_offset: f32, x_rot: f32, y_rot: f32, z_rot: f32, bone_index: i32, scale: f32, x_axis: bool, y_axis: bool, z_axis: bool);
	native!(start_particle_fx_looped_on_entity, 0x1AE42C1660FD6517, i32, effect_name: *const c_char, entity: Entity, x_offset: f32, y_offset: f32, z_offset: f32, x_rot: f32, y_rot: f32, z_rot: f32, scale: f32, x_axis: bool, y_axis: bool, z_axis: bool);
	native!(start_particle_fx_looped_on_entity_bone, 0xC6EB449E33977F0B, i32, effect_name: *const c_char, entity: Entity, x_offset: f32, y_offset: f32, z_offset: f32, x_rot: f32, y_rot: f32, z_rot: f32, bone_index: i32, scale: f32, x_axis: bool, y_axis: bool, z_axis: bool);
	native!(start_networked_particle_fx_looped_on_entity, 0x6F60E89A7B64EE1D, i32, effect_name: *const c_char, entity: Entity, x_offset: f32, y_offset: f32, z_offset: f32, x_rot: f32, y_rot: f32, z_rot: f32, scale: f32, x_axis: bool, y_axis: bool, z_axis: bool, p12: i32, p13: i32, p14: i32, p15: i32);
	native!(start_networked_particle_fx_looped_on_entity_bone, 0xDDE23F30CC5A0F03, i32, effect_name: *const c_char, entity: Entity, x_offset: f32, y_offset: f32, z_offset: f32, x_rot: f32, y_rot: f32, z_rot: f32, bone_index: i32, scale: f32, x_axis: bool, y_axis: bool, z_axis: bool, p13: i32, p14: i32, p15: i32, p16: i32);
	native!(stop_particle_fx_looped, 0x8F75998877616996, (), ptfx_handle: i32, p1: bool);
	native!(remove_particle_fx, 0xC401503DFE8D53CF, (), ptfx_handle: i32, p1: bool);
	native!(remove_particle_fx_from_entity, 0xB8FEAEEBCC127425, (), entity: Entity);
	native!(remove_particle_fx_in_range, 0xDD19FA1C6D657305, (), x: f32, y: f32, z: f32, radius: f32);
	native!(_0xba0127da25fd54c9, 0xBA0127DA25FD54C9, (), p0: i32, p1: i32);
	native!(does_particle_fx_looped_exist, 0x74AFEF0D2E1E409B, bool, ptfx_handle: i32);
	native!(set_particle_fx_looped_offsets, 0xF7DDEBEC43483C43, (), ptfx_handle: i32, x: f32, y: f32, z: f32, rot_x: f32, rot_y: f32, rot_z: f32);
	native!(set_particle_fx_looped_evolution, 0x5F0C4B5B1C393BE2, (), ptfx_handle: i32, property_name: *const c_char, amount: f32, no_network: bool);
	native!(set_particle_fx_looped_colour, 0x7F8F65877F88783B, (), ptfx_handle: i32, r: f32, g: f32, b: f32, p4: bool);
	native!(set_particle_fx_looped_alpha, 0x726845132380142E, (), ptfx_handle: i32, alpha: f32);
	native!(set_particle_fx_looped_scale, 0xB44250AAA456492D, (), ptfx_handle: i32, scale: f32);
	native!(set_particle_fx_looped_far_clip_dist, 0xDCB194B85EF7B541, (), ptfx_handle: i32, range: f32);
	native!(set_particle_fx_cam_inside_vehicle, 0xEEC4047028426510, (), p0: bool);
	native!(set_particle_fx_cam_inside_nonplayer_vehicle, 0xACEE6F360FC1F6B6, (), vehicle: Vehicle, p1: bool);
	native!(set_particle_fx_shootout_boat, 0x96EF97DAEB89BEF5, (), p0: i32);
	native!(_0x2a251aa48b2b46db, 0x2A251AA48B2B46DB, ());
	native!(_0x908311265d42a820, 0x908311265D42A820, (), p0: i32);
	native!(_0x5f6df3d92271e8a1, 0x5F6DF3D92271E8A1, (), toggle: bool);
	native!(_0x2b40a97646381508, 0x2B40A97646381508, (), p0: i32);
	native!(enable_clown_blood_vfx, 0xD821490579791273, (), toggle: bool);
	native!(enable_alien_blood_vfx, 0x9DCE1F0F78260875, (), toggle: bool);
	native!(_0x27e32866e9a5c416, 0x27E32866E9A5C416, (), p0: f32);
	native!(_0xbb90e12cac1dab25, 0xBB90E12CAC1DAB25, (), p0: f32);
	native!(_0xca4ae345a153d573, 0xCA4AE345A153D573, (), p0: bool);
	native!(_0x54e22ea2c1956a8d, 0x54E22EA2C1956A8D, (), p0: f32);
	native!(_0x949f397a288b28b3, 0x949F397A288B28B3, (), p0: f32);
	native!(_0xba3d194057c79a7b, 0xBA3D194057C79A7B, (), p0: *const c_char);
	native!(_0x5dbf05db5926d089, 0x5DBF05DB5926D089, (), p0: i32);
	native!(_0x9b079e5221d984d3, 0x9B079E5221D984D3, (), p0: bool);
	native!(use_particle_fx_asset, 0x6C38AF3693A69A91, (), name: *const c_char);
	native!(set_particle_fx_override, 0xEA1E2D93F6F75ED9, (), old_asset: *const c_char, new_asset: *const c_char);
	native!(reset_particle_fx_override, 0x89C8553DD3274AAE, (), name: *const c_char);
	native!(_0xa46b73faa3460ae1, 0xA46B73FAA3460AE1, (), p0: bool);
	native!(_0xf78b803082d4386f, 0xF78B803082D4386F, (), p0: f32);
	native!(wash_decals_in_range, 0x9C30613D50A6ADEF, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(wash_decals_from_vehicle, 0x5B712761429DBC14, (), vehicle: Vehicle, p1: f32);
	native!(fade_decals_in_range, 0xD77EDADB0420E6E0, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(remove_decals_in_range, 0x5D6B2D4830A67C62, (), x: f32, y: f32, z: f32, range: f32);
	native!(remove_decals_from_object, 0xCCF71CBDDF5B6CB9, (), obj: Object);
	native!(remove_decals_from_object_facing, 0xA6F6F70FDC6D144C, (), obj: Object, x: f32, y: f32, z: f32);
	native!(remove_decals_from_vehicle, 0xE91F1B65F2B48D57, (), vehicle: Vehicle);
	native!(add_decal, 0xB302244A1839BDAD, i32, decal_type: i32, pos_x: f32, pos_y: f32, pos_z: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: f32, width: f32, height: f32, r_coef: f32, g_coef: f32, b_coef: f32, opacity: f32, timeout: f32, p17: bool, p18: bool, p19: bool);
	native!(add_petrol_decal, 0x4F5212C7AD880DF8, i32, x: f32, y: f32, z: f32, ground_lvl: f32, width: f32, transparency: f32);
	native!(start_petrol_trail_decals, 0x99AC7F0D8B9C893D, (), p0: f32);
	native!(add_petrol_trail_decal_info, 0x967278682CB6967A, (), x: f32, y: f32, z: f32, p3: f32);
	native!(end_petrol_trail_decals, 0x0A123435A26C36CD, ());
	native!(remove_decal, 0xED3F346429CCD659, (), decal: i32);
	native!(is_decal_alive, 0xC694D74949CAFD0C, bool, decal: i32);
	native!(get_decal_wash_level, 0x323F647679A09103, f32, decal: i32);
	native!(_0xd9454b5752c857dc, 0xD9454B5752C857DC, ());
	native!(_0x27cfb1b1e078cb2d, 0x27CFB1B1E078CB2D, ());
	native!(_0x4b5cfc83122df602, 0x4B5CFC83122DF602, ());
	native!(get_is_petrol_decal_in_range, 0x2F09F7976C512404, bool, x_coord: f32, y_coord: f32, z_coord: f32, radius: f32);
	native!(_override_decal_texture, 0x8A35C742130C6080, (), decal_type: i32, texture_dict: *const c_char, texture_name: *const c_char);
	native!(_undo_decal_texture_override, 0xB7ED70C49521A61D, (), decal_type: i32);
	native!(move_vehicle_decals, 0x84C8D7C2D30D3280, (), p0: i32, p1: i32);
	native!(add_vehicle_crew_emblem, 0x428BDCB9DA58DA53, bool, vehicle: Vehicle, ped: Ped, bone_index: i32, x1: f32, x2: f32, x3: f32, y1: f32, y2: f32, y3: f32, z1: f32, z2: f32, z3: f32, scale: f32, p13: i32, alpha: i32);
	native!(_0x82acc484ffa3b05f, 0x82ACC484FFA3B05F, i32, p0: i32);
	native!(remove_vehicle_crew_emblem, 0xD2300034310557E4, (), vehicle: Vehicle, p1: i32);
	native!(get_vehicle_crew_emblem_request_state, 0xFE26117A5841B2FF, i32, vehicle: Vehicle, p1: i32);
	native!(does_vehicle_have_crew_emblem, 0x060D935D3981A275, bool, vehicle: Vehicle, p1: i32);
	native!(_0x0e4299c549f0d1f1, 0x0E4299C549F0D1F1, (), toggle: bool);
	native!(_0x02369d5c8a51fdcf, 0x02369D5C8A51FDCF, (), toggle: bool);
	native!(_0x46d1a61a21f566fc, 0x46D1A61A21F566FC, (), p0: f32);
	native!(override_interior_smoke_name, 0x2A2A52824DB96700, (), name: *const c_char);
	native!(override_interior_smoke_level, 0x1600FD8CF72EBC12, (), level: f32);
	native!(override_interior_smoke_end, 0xEFB55E7C25D3B3BE, ());
	native!(_0xa44ff770dfbc5dae, 0xA44FF770DFBC5DAE, ());
	native!(disable_vehicle_distantlights, 0xC9F98AC1884E73A2, (), toggle: bool);
	native!(_0x03300b57fcac6ddb, 0x03300B57FCAC6DDB, (), p0: bool);
	native!(_0x98edf76a7271e4f2, 0x98EDF76A7271E4F2, ());
	native!(_set_force_ped_footsteps_tracks, 0xAEEDAD1420C65CC0, (), toggle: bool);
	native!(_set_force_vehicle_trails, 0x4CC7F0FEA5283FE0, (), toggle: bool);
	native!(_disable_script_ambient_effects, 0xEFD97FF47B745B8D, (), p0: i32);
	native!(preset_interior_ambient_cache, 0xD7021272EB0A451E, (), timecycle_modifier_name: *const c_char);
	native!(set_timecycle_modifier, 0x2C933ABF17A1DF41, (), modifier_name: *const c_char);
	native!(set_timecycle_modifier_strength, 0x82E7FFCD5B2326B3, (), strength: f32);
	native!(set_transition_timecycle_modifier, 0x3BCF567485E1971C, (), modifier_name: *const c_char, transition: f32);
	native!(_0x1cba05ae7bd7ee05, 0x1CBA05AE7BD7EE05, (), p0: f32);
	native!(clear_timecycle_modifier, 0x0F07E7745A236711, ());
	native!(get_timecycle_modifier_index, 0xFDF3D97C674AFB66, i32);
	native!(get_timecycle_transition_modifier_index, 0x459FD2C8D0AB78BC, i32);
	native!(_0x98d18905bf723b99, 0x98D18905BF723B99, i32);
	native!(push_timecycle_modifier, 0x58F735290861E6B4, ());
	native!(pop_timecycle_modifier, 0x3C8938D7D872211E, ());
	native!(set_current_player_tcmodifier, 0xBBF327DED94E4DEB, (), modifier_name: *const c_char);
	native!(set_player_tcmodifier_transition, 0xBDEB86F4D5809204, (), value: f32);
	native!(set_next_player_tcmodifier, 0xBF59707B3E5ED531, (), modifier_name: *const c_char);
	native!(add_tcmodifier_override, 0x1A8E2C8B9CF4549C, (), modifier_name1: *const c_char, modifier_name2: *const c_char);
	native!(_0x15e33297c3e8dc60, 0x15E33297C3E8DC60, (), p0: *const c_char);
	native!(_set_extra_timecycle_modifier, 0x5096FD9CCB49056D, (), modifier_name: *const c_char);
	native!(_clear_extra_timecycle_modifier, 0x92CCC17A7A2285DA, ());
	native!(_get_extra_timecycle_modifier_index, 0xBB0527EC6341496D, i32);
	native!(_set_extra_timecycle_modifier_strength, 0x2C328AF17210F009, (), strength: f32);
	native!(_reset_extra_timecycle_modifier_strength, 0x2BF72AD5B41AA739, ());
	native!(request_scaleform_movie, 0x11FE353CF9733E6F, i32, scaleform_name: *const c_char);
	native!(_request_scaleform_movie_2, 0x65E7E78842E74CDB, i32, scaleform_name: *const c_char);
	native!(request_scaleform_movie_instance, 0xC514489CFB8AF806, i32, scaleform_name: *const c_char);
	native!(_request_scaleform_movie_interactive, 0xBD06C611BB9048C2, i32, scaleform_name: *const c_char);
	native!(has_scaleform_movie_loaded, 0x85F01B8D5B90570E, bool, scaleform_handle: i32);
	native!(_0x2fcb133ca50a49eb, 0x2FCB133CA50A49EB, i32, p0: i32);
	native!(_0x86255b1fc929e33e, 0x86255B1FC929E33E, i32, p0: i32);
	native!(has_scaleform_movie_filename_loaded, 0x0C1C5D756FB5F337, bool, scaleform_name: *const c_char);
	native!(has_scaleform_container_movie_loaded_into_parent, 0x8217150E1217EBFD, bool, scaleform_handle: i32);
	native!(set_scaleform_movie_as_no_longer_needed, 0x1D132D614DD86811, (), scaleform_handle: &mut i32);
	native!(set_scaleform_movie_to_use_system_time, 0x6D8EB211944DCE08, (), scaleform: i32, toggle: bool);
	native!(_0x32f34ff7f617643b, 0x32F34FF7F617643B, (), p0: i32, p1: i32);
	native!(_0xe6a9f00d4240b519, 0xE6A9F00D4240B519, (), p0: i32, p1: i32);
	native!(draw_scaleform_movie, 0x54972ADAF0294A93, (), scaleform_handle: i32, x: f32, y: f32, width: f32, height: f32, red: i32, green: i32, blue: i32, alpha: i32, unk: i32);
	native!(draw_scaleform_movie_fullscreen, 0x0DF606929C105BE1, (), scaleform: i32, red: i32, green: i32, blue: i32, alpha: i32, unk: i32);
	native!(draw_scaleform_movie_fullscreen_masked, 0xCF537FDE4FBD4CE5, (), scaleform1: i32, scaleform2: i32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(draw_scaleform_movie_3d, 0x87D51D72255D4E78, (), scaleform: i32, pos_x: f32, pos_y: f32, pos_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, p7: f32, p8: f32, p9: f32, scale_x: f32, scale_y: f32, scale_z: f32, p13: i32);
	native!(draw_scaleform_movie_3d_solid, 0x1CE592FDC749D6F5, (), scaleform: i32, pos_x: f32, pos_y: f32, pos_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, p7: f32, p8: f32, p9: f32, scale_x: f32, scale_y: f32, scale_z: f32, p13: i32);
	native!(call_scaleform_movie_method, 0xFBD96D87AC96D533, (), scaleform: i32, method: *const c_char);
	native!(call_scaleform_movie_method_with_number, 0xD0837058AE2E4BEE, (), scaleform: i32, method_name: *const c_char, param1: f32, param2: f32, param3: f32, param4: f32, param5: f32);
	native!(call_scaleform_movie_method_with_string, 0x51BC1ED3CC44E8F7, (), scaleform: i32, method_name: *const c_char, param1: *const c_char, param2: *const c_char, param3: *const c_char, param4: *const c_char, param5: *const c_char);
	native!(call_scaleform_movie_method_with_number_and_string, 0xEF662D8D57E290B1, (), scaleform: i32, method_name: *const c_char, float_param1: f32, float_param2: f32, float_param3: f32, float_param4: f32, float_param5: f32, string_param1: *const c_char, string_param2: *const c_char, string_param3: *const c_char, string_param4: *const c_char, string_param5: *const c_char);
	native!(begin_scaleform_script_hud_movie_method, 0x98C494FD5BDFBFD5, bool, hud_component: i32, method_name: *const c_char);
	native!(begin_scaleform_movie_method, 0xF6E48914C7A8694E, bool, scaleform: i32, method_name: *const c_char);
	native!(begin_scaleform_movie_method_on_frontend, 0xAB58C27C2E6123C6, bool, method_name: *const c_char);
	native!(begin_scaleform_movie_method_on_frontend_header, 0xB9449845F73F5E9C, bool, method_name: *const c_char);
	native!(end_scaleform_movie_method, 0xC6796A8FFA375E53, ());
	native!(end_scaleform_movie_method_return_value, 0xC50AA39A577AF886, i32);
	native!(is_scaleform_movie_method_return_value_ready, 0x768FF8961BA904D6, bool, return_value_data: i32);
	native!(get_scaleform_movie_method_return_value_int, 0x2DE7EFA66B906036, i32, return_value_data: i32);
	native!(_get_scaleform_movie_method_return_value_bool, 0xD80A80346A45D761, bool, return_value_data: i32);
	native!(get_scaleform_movie_method_return_value_string, 0xE1E258829A885245, *const c_char, return_value_data: i32);
	native!(scaleform_movie_method_add_param_int, 0xC3D0841A0CC546A6, (), value: i32);
	native!(scaleform_movie_method_add_param_float, 0xD69736AAE04DB51A, (), value: f32);
	native!(scaleform_movie_method_add_param_bool, 0xC58424BA936EB458, (), value: bool);
	native!(begin_text_command_scaleform_string, 0x80338406F3475E55, (), component_type: *const c_char);
	native!(end_text_command_scaleform_string, 0x362E2D3FE93A9959, ());
	native!(_end_text_command_scaleform_string_2, 0xAE4E8157D9ECF087, ());
	native!(_scaleform_movie_method_add_param_texture_name_string_2, 0x77FE3402004CD1B0, (), string: *const c_char);
	native!(scaleform_movie_method_add_param_texture_name_string, 0xBA7148484BD90365, (), string: *const c_char);
	native!(scaleform_movie_method_add_param_player_name_string, 0xE83A3E3557A56640, (), string: *const c_char);
	native!(_0x5e657ef1099edd65, 0x5E657EF1099EDD65, bool, p0: i32);
	native!(scaleform_movie_method_add_param_latest_brief_string, 0xEC52C631A1831C03, (), value: i32);
	native!(request_scaleform_script_hud_movie, 0x9304881D6F6537EA, (), hud_component: i32);
	native!(has_scaleform_script_hud_movie_loaded, 0xDF6E5987D2B4D140, bool, hud_component: i32);
	native!(remove_scaleform_script_hud_movie, 0xF44A5456AC3F4F97, (), hud_component: i32);
	native!(_0xd1c7cb175e012964, 0xD1C7CB175E012964, bool, scaleform_handle: i32);
	native!(set_tv_channel, 0xBAABBB23EB6E484E, (), channel: i32);
	native!(get_tv_channel, 0xFC1E275A90D39995, i32);
	native!(set_tv_volume, 0x2982BF73F66E9DDC, (), volume: f32);
	native!(get_tv_volume, 0x2170813D3DD8661B, f32);
	native!(draw_tv_channel, 0xFDDC2B4ED3C69DF0, (), x_pos: f32, y_pos: f32, x_scale: f32, y_scale: f32, rotation: f32, red: i32, green: i32, blue: i32, alpha: i32);
	native!(set_tv_channel_playlist, 0xF7B38B8305F1FE8B, (), tv_channel: i32, playlist_name: *const c_char, restart: bool);
	native!(set_tv_channel_playlist_at_hour, 0x2201C576FACAEBE8, (), tv_channel: i32, playlist_name: *const c_char, hour: i32);
	native!(clear_tv_channel_playlist, 0xBEB3D46BB7F043C0, (), tv_channel: i32);
	native!(_is_playlist_unk, 0x1F710BFF7DAE6261, bool, tv_channel: i32, p1: i32);
	native!(_is_tv_playlist_item_playing, 0x0AD973CA1E077B60, bool, video_cliphash: Hash);
	native!(enable_movie_keyframe_wait, 0x74C180030FDE4B69, (), toggle: bool);
	native!(_0xd1c55b110e4df534, 0xD1C55B110E4DF534, (), p0: i32);
	native!(_0x30432a0118736e00, 0x30432A0118736E00, Hash);
	native!(enable_movie_subtitles, 0x873FA65C778AD970, (), toggle: bool);
	native!(ui3dscene_is_available, 0xD3A10FC7FD8D98CD, bool);
	native!(ui3dscene_push_preset, 0xF1CEA8A4198D8E9A, bool, preset_name: *const c_char);
	native!(_0x98c4fe6ec34154ca, 0x98C4FE6EC34154CA, bool, preset_name: *const c_char, ped: Ped, p2: i32, pos_x: f32, pos_y: f32, pos_z: f32);
	native!(_0x7a42b2e236e71415, 0x7A42B2E236E71415, ());
	native!(_0x108be26959a9d9bb, 0x108BE26959A9D9BB, (), toggle: bool);
	native!(terraingrid_activate, 0xA356990E161C9E65, (), toggle: bool);
	native!(terraingrid_set_params, 0x1C4FC5752BCD8E48, (), x: f32, y: f32, z: f32, p3: f32, rotation: f32, p5: f32, width: f32, height: f32, p8: f32, scale: f32, glow_intensity: f32, normal_height: f32, height_diff: f32);
	native!(terraingrid_set_colours, 0x5CE62918F8D703C7, (), low_r: i32, low_g: i32, low_b: i32, low_alpha: i32, r: i32, g: i32, b: i32, alpha: i32, high_r: i32, high_g: i32, high_b: i32, high_alpha: i32);
	native!(animpostfx_play, 0x2206BF9A37B7F724, (), effect_name: *const c_char, duration: i32, looped: bool);
	native!(animpostfx_stop, 0x068E835A1D0DC0E3, (), effect_name: *const c_char);
	native!(_animpostfx_get_unk, 0xE35B38A27E8E7179, f32, effect_name: *const c_char);
	native!(animpostfx_is_running, 0x36AD3E690DA5ACEB, bool, effect_name: *const c_char);
	native!(animpostfx_stop_all, 0xB4EDDC19532BFB85, ());
	native!(_animpostfx_stop_and_do_unk, 0xD2209BE128B5418C, (), effect_name: *const c_char);
}

pub mod hud {
	use super::*;

	native!(begin_text_command_busyspinner_on, 0xABA17D7CE615ADBF, (), string: *const c_char);
	native!(end_text_command_busyspinner_on, 0xBD12F8228410D9B4, (), busy_spinner_type: i32);
	native!(busyspinner_off, 0x10D373323E5B9C0D, ());
	native!(preload_busyspinner, 0xC65AB383CD91DF98, ());
	native!(busyspinner_is_on, 0xD422FCC5F239A915, bool);
	native!(busyspinner_is_displaying, 0xB2A592B04648A9CB, bool);
	native!(_0x9245e81072704b8a, 0x9245E81072704B8A, (), p0: bool);
	native!(_set_mouse_cursor_active_this_frame, 0xAAE7CE1D63167423, ());
	native!(_set_mouse_cursor_sprite, 0x8DB8CFFD58B62552, (), sprite_id: i32);
	native!(_0x98215325a695e78a, 0x98215325A695E78A, (), p0: bool);
	native!(_0x3d9acb1eb139e702, 0x3D9ACB1EB139E702, i32);
	native!(_0x632b2940c67f4ea9, 0x632B2940C67F4EA9, bool, scaleform_handle: i32, p1: &mut i32, p2: &mut i32, p3: &mut i32);
	native!(thefeed_only_show_tooltips, 0x6F1554B0CC2089FA, (), toggle: bool);
	native!(thefeed_set_scripted_menu_height, 0x55598D21339CB998, (), pos: f32);
	native!(_thefeed_disable, 0x32888337579A5970, ());
	native!(thefeed_hide_this_frame, 0x25F87B30C382FCA7, ());
	native!(_0x15cfa549788d35ef, 0x15CFA549788D35EF, ());
	native!(thefeed_flush_queue, 0xA8FDB297A8D25FBA, ());
	native!(thefeed_remove_item, 0xBE4390CB40B3E627, (), notification_id: i32);
	native!(thefeed_force_render_on, 0xA13C11E1B5C06BFC, ());
	native!(thefeed_force_render_off, 0x583049884A2EEE3C, ());
	native!(thefeed_pause, 0xFDB423997FA30340, ());
	native!(thefeed_resume, 0xE1CD1E48E025E661, ());
	native!(thefeed_is_paused, 0xA9CBFD40B3FA3010, bool);
	native!(thefeed_sps_extend_widescreen_on, 0xD4438C0564490E63, ());
	native!(thefeed_sps_extend_widescreen_off, 0xB695E2CD0A2DA9EE, ());
	native!(thefeed_get_first_visible_delete_remaining, 0x82352748437638CA, i32);
	native!(thefeed_comment_teleport_pool_on, 0x56C8B608CFD49854, ());
	native!(thefeed_comment_teleport_pool_off, 0xADED7F5748ACAFE6, ());
	native!(_thefeed_set_next_post_background_color, 0x92F0DA1E27DB96DC, (), hud_color_index: i32);
	native!(_thefeed_set_animpostfx_color, 0x17430B918701C342, (), red: i32, green: i32, blue: i32, alpha: i32);
	native!(_thefeed_set_animpostfx_count, 0x17AD8C9706BDD88A, (), count: i32);
	native!(_thefeed_set_animpostfx_sound, 0x4A0C7C9BB10ABB36, (), toggle: bool);
	native!(thefeed_reset_all_parameters, 0xFDD85225B2DEA55E, ());
	native!(thefeed_freeze_next_post, 0xFDEC055AB549E328, ());
	native!(thefeed_clear_frozen_post, 0x80FE4F3AB4E1B62A, ());
	native!(_thefeed_set_flush_animpostfx, 0xBAE4F9B97CD43B30, (), p0: bool);
	native!(_thefeed_add_txd_ref, 0x317EBA71D7543F52, (), p0: &mut i32, p1: &mut i32, p2: &mut i32, p3: &mut i32);
	native!(begin_text_command_thefeed_post, 0x202709F4C58A0424, (), text: *const c_char);
	native!(end_text_command_thefeed_post_stats, 0x2B7E9A4EAAA93C89, i32, txd_name: *const c_char, texture_name: *const c_char, flash: bool, icon_type: i32, p4: bool, sender: *const c_char, subject: *const c_char);
	native!(end_text_command_thefeed_post_messagetext, 0x1CCD9A37359072CF, i32, pic_name1: *const c_char, pic_name2: *const c_char, flash: bool, icon_type: i32, sender: *const c_char, subject: *const c_char);
	native!(_end_text_command_thefeed_post_messagetext_gxt_entry, 0xC6F580E4C94926AC, i32, pic_name1: *const c_char, pic_name2: *const c_char, flash: bool, icon_type: i32, sender: *const c_char, subject: *const c_char);
	native!(end_text_command_thefeed_post_messagetext_tu, 0x1E6611149DB3DB6B, i32, pic_name1: *const c_char, pic_name2: *const c_char, flash: bool, icon_type: i32, sender: *const c_char, subject: *const c_char, duration: f32);
	native!(end_text_command_thefeed_post_messagetext_with_crew_tag, 0x5CBF7BADE20DB93E, i32, pic_name1: *const c_char, pic_name2: *const c_char, flash: bool, icon_type: i32, sender: *const c_char, subject: *const c_char, duration: f32, clan_tag: *const c_char);
	native!(end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon, 0x531B84E7DA981FB6, i32, pic_name1: *const c_char, pic_name2: *const c_char, flash: bool, icon_type1: i32, sender: *const c_char, subject: *const c_char, duration: f32, clan_tag: *const c_char, icon_type2: i32, p9: i32);
	native!(end_text_command_thefeed_post_ticker, 0x2ED7843F8F801023, i32, blink: bool, p1: bool);
	native!(end_text_command_thefeed_post_ticker_forced, 0x44FA03975424A0EE, i32, blink: bool, p1: bool);
	native!(end_text_command_thefeed_post_ticker_with_tokens, 0x378E809BF61EC840, i32, blink: bool, p1: bool);
	native!(end_text_command_thefeed_post_award, 0xAA295B6F28BD587D, i32, p0: *const c_char, p1: *const c_char, p2: i32, p3: i32, p4: *const c_char);
	native!(end_text_command_thefeed_post_crewtag, 0x97C9E4E7024A8F2C, i32, p0: bool, p1: bool, p2: &mut i32, p3: i32, is_leader: bool, unk0: bool, clan_desc: i32, r: i32, g: i32, b: i32);
	native!(end_text_command_thefeed_post_crewtag_with_game_name, 0x137BC35589E34E1E, i32, p0: bool, p1: bool, p2: &mut i32, p3: i32, is_leader: bool, unk0: bool, clan_desc: i32, player_name: *const c_char, r: i32, g: i32, b: i32);
	native!(end_text_command_thefeed_post_unlock, 0x33EE12743CCD6343, i32, p0: i32, p1: i32, p2: i32);
	native!(end_text_command_thefeed_post_unlock_tu, 0xC8F3AAF93D0600BF, i32, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(end_text_command_thefeed_post_unlock_tu_with_color, 0x7AE0589093A2E088, i32, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(end_text_command_thefeed_post_mpticker, 0xF020C96915705B3A, i32, blink: bool, p1: bool);
	native!(end_text_command_thefeed_post_crew_rankup, 0x8EFCCF6EC66D85E4, i32, p0: *const c_char, p1: *const c_char, p2: *const c_char, p3: bool, p4: bool);
	native!(end_text_command_thefeed_post_versus_tu, 0xB6871B0555B02996, i32, p0: &mut i32, p1: &mut i32, p2: i32, p3: &mut i32, p4: &mut i32, p5: i32, p6: i32, p7: i32);
	native!(_end_text_command_thefeed_post_replay_icon, 0xD202B92CBF1D816F, i32, r#type: i32, image: i32, text: *const c_char);
	native!(_end_text_command_thefeed_post_replay_input, 0xDD6CB2CCE7C2735C, i32, r#type: i32, button: *const c_char, text: *const c_char);
	native!(begin_text_command_print, 0xB87A37EEB7FAA67D, (), gxt_entry: *const c_char);
	native!(end_text_command_print, 0x9D77056A530643F6, (), duration: i32, draw_immediately: bool);
	native!(begin_text_command_is_message_displayed, 0x853648FD1063A213, (), text: *const c_char);
	native!(end_text_command_is_message_displayed, 0x8A9BA1AB3E237613, bool);
	native!(begin_text_command_display_text, 0x25FBB336DF1804CB, (), text: *const c_char);
	native!(end_text_command_display_text, 0xCD015E5BB0D96A57, (), x: f32, y: f32, p2: i32);
	native!(_begin_text_command_get_width, 0x54CE8AC98E120CAB, (), text: *const c_char);
	native!(_end_text_command_get_width, 0x85F061DA64ED2F67, f32, p0: bool);
	native!(_begin_text_command_line_count, 0x521FB041D93DD0E4, (), entry: *const c_char);
	native!(_end_text_command_line_count, 0x9040DFB09BE75706, i32, x: f32, y: f32);
	native!(begin_text_command_display_help, 0x8509B634FBE7DA11, (), input_type: *const c_char);
	native!(end_text_command_display_help, 0x238FFE5C7B0498A6, (), p0: i32, r#loop: bool, beep: bool, shape: i32);
	native!(begin_text_command_is_this_help_message_being_displayed, 0x0A24DA3A41B718F5, (), label_name: *const c_char);
	native!(end_text_command_is_this_help_message_being_displayed, 0x10BDDBFC529428DD, bool, p0: i32);
	native!(begin_text_command_set_blip_name, 0xF9113A30DE5C6670, (), gxtentry: *const c_char);
	native!(end_text_command_set_blip_name, 0xBC38B49BCB83BC9B, (), blip: Blip);
	native!(_begin_text_command_objective, 0x23D69E0465570028, (), p0: *const c_char);
	native!(_end_text_command_objective, 0xCFDBDF5AE59BA0F4, (), p0: bool);
	native!(begin_text_command_clear_print, 0xE124FA80A759019C, (), text: *const c_char);
	native!(end_text_command_clear_print, 0xFCC75460ABA29378, ());
	native!(begin_text_command_override_button_text, 0x8F9EE5687F8EECCD, (), gxt_entry: *const c_char);
	native!(end_text_command_override_button_text, 0xA86911979638106F, (), p0: i32);
	native!(add_text_component_integer, 0x03B504CF259931BC, (), value: i32);
	native!(add_text_component_float, 0xE7DCB5B874BCD96E, (), value: f32, decimal_places: i32);
	native!(add_text_component_substring_text_label, 0xC63CD5D2920ACBE7, (), label_name: *const c_char);
	native!(add_text_component_substring_text_label_hash_key, 0x17299B63C7683A2B, (), gxt_entry_hash: Hash);
	native!(add_text_component_substring_blip_name, 0x80EAD8E2E1D5D52E, (), blip: Blip);
	native!(add_text_component_substring_player_name, 0x6C188BE134E074AA, (), text: *const c_char);
	native!(add_text_component_substring_time, 0x1115F16B8AB9E8BF, (), timestamp: i32, flags: i32);
	native!(add_text_component_formatted_integer, 0x0E4C749FF9DE9CC4, (), value: i32, comma_separated: bool);
	native!(add_text_component_substring_phone_number, 0x761B77454205A61D, (), p0: *const c_char, p1: i32);
	native!(add_text_component_substring_website, 0x94CF4AC034C9C986, (), website: *const c_char);
	native!(_add_text_component_substring_unk, 0x5F68520888E69014, (), p0: *const c_char);
	native!(set_colour_of_next_text_component, 0x39BBF623FC803EAC, (), hud_color: i32);
	native!(_get_text_substring, 0x169BD9382084C8C0, *const c_char, text: *const c_char, position: i32, length: i32);
	native!(_get_text_substring_safe, 0xB2798643312205C5, *const c_char, text: *const c_char, position: i32, length: i32, max_length: i32);
	native!(_get_text_substring_slice, 0xCE94AEBA5D82908A, *const c_char, text: *const c_char, start_position: i32, end_position: i32);
	native!(_get_label_text, 0x7B5280EBA9840C72, *const c_char, label_name: *const c_char);
	native!(clear_prints, 0xCC33FA791322B9D9, ());
	native!(clear_brief, 0x9D292F73ADBD9313, ());
	native!(clear_all_help_messages, 0x6178F68A87A4D3A0, ());
	native!(clear_this_print, 0xCF708001E1E536DD, (), p0: *const c_char);
	native!(clear_small_prints, 0x2CEA2839313C09AC, ());
	native!(does_text_block_exist, 0x1C7302E725259789, bool, gxt: *const c_char);
	native!(request_additional_text, 0x71A78003C8E71424, (), gxt: *const c_char, slot: i32);
	native!(request_additional_text_for_dlc, 0x6009F9F1AE90D8A6, (), gxt: *const c_char, slot: i32);
	native!(has_additional_text_loaded, 0x02245FE4BED318B8, bool, slot: i32);
	native!(clear_additional_text, 0x2A179DF17CCF04CD, (), p0: i32, p1: bool);
	native!(is_streaming_additional_text, 0x8B6817B71B85EBF0, bool, p0: i32);
	native!(has_this_additional_text_loaded, 0xADBF060E2B30C5BC, bool, gxt: *const c_char, slot: i32);
	native!(is_message_being_displayed, 0x7984C03AA5CC2F41, bool);
	native!(does_text_label_exist, 0xAC09CA973C564252, bool, gxt: *const c_char);
	native!(_0x98c3cf913d895111, 0x98C3CF913D895111, *const c_char, string: *const c_char, length: i32);
	native!(get_length_of_string_with_this_text_label, 0x801BD273D3A23F74, i32, gxt: *const c_char);
	native!(get_length_of_literal_string, 0xF030907CCBB8A9FD, i32, string: *const c_char);
	native!(get_length_of_literal_string_in_bytes, 0x43E4111189E54F0E, i32, string: *const c_char);
	native!(get_street_name_from_hash_key, 0xD0EF8A959B8A4CB9, *const c_char, hash: Hash);
	native!(is_hud_preference_switched_on, 0x1930DFA731813EC4, bool);
	native!(is_radar_preference_switched_on, 0x9EB6522EA68F22FE, bool);
	native!(is_subtitle_preference_switched_on, 0xAD6DACA4BA53E0A4, bool);
	native!(display_hud, 0xA6294919E56FF02A, (), toggle: bool);
	native!(_0x7669f9e39dc17063, 0x7669F9E39DC17063, ());
	native!(display_hud_when_paused_this_frame, 0x402F9ED62087E898, ());
	native!(display_radar, 0xA0EBB943C300E693, (), toggle: bool);
	native!(_0xcd74233600c4ea6b, 0xCD74233600C4EA6B, (), toggle: bool);
	native!(_0xc2d2ad9eaae265b8, 0xC2D2AD9EAAE265B8, bool);
	native!(is_hud_hidden, 0xA86478C6958735C5, bool);
	native!(is_radar_hidden, 0x157F93B036700462, bool);
	native!(is_minimap_rendering, 0xAF754F20EB5CD51A, bool);
	native!(_0x0c698d8f099174c7, 0x0C698D8F099174C7, (), p0: i32);
	native!(_0xe4c3b169876d33d7, 0xE4C3B169876D33D7, (), p0: i32);
	native!(_0xeb81a3dadd503187, 0xEB81A3DADD503187, ());
	native!(set_blip_route, 0x4F7D8A9BFB0B43E9, (), blip: Blip, enabled: bool);
	native!(_clear_all_blip_routes, 0xD12882D3FF82BF11, ());
	native!(set_blip_route_colour, 0x837155CD2F63DA09, (), blip: Blip, colour: i32);
	native!(_0x2790f4b17d098e26, 0x2790F4B17D098E26, (), toggle: bool);
	native!(_0x6cdd58146a436083, 0x6CDD58146A436083, (), p0: i32);
	native!(_0xd1942374085c8469, 0xD1942374085C8469, (), p0: i32);
	native!(add_next_message_to_previous_briefs, 0x60296AF4BA14ABC5, (), p0: bool);
	native!(_0x57d760d55f54e071, 0x57D760D55F54E071, (), p0: i32);
	native!(set_radar_zoom_precise, 0xBD12C5EEE184C337, (), zoom: f32);
	native!(set_radar_zoom, 0x096EF57A0C999BBA, (), zoom_level: i32);
	native!(set_radar_zoom_to_blip, 0xF98E4B3E56AFC7B1, (), blip: Blip, zoom: f32);
	native!(set_radar_zoom_to_distance, 0xCB7CC0D58405AD41, (), zoom: f32);
	native!(_0xd2049635deb9c375, 0xD2049635DEB9C375, ());
	native!(get_hud_colour, 0x7C9C91AB74A0360F, (), hud_color_index: i32, r: &mut i32, g: &mut i32, b: &mut i32, a: &mut i32);
	native!(set_script_variable_hud_colour, 0xD68A5FF8A3A89874, (), r: i32, g: i32, b: i32, a: i32);
	native!(_set_script_variable_2_hud_colour, 0x16A304E6CB2BFAB9, (), r: i32, g: i32, b: i32, a: i32);
	native!(replace_hud_colour, 0x1CCC708F0F850613, (), hud_color_index: i32, hud_color_index2: i32);
	native!(replace_hud_colour_with_rgba, 0xF314CF4F0211894E, (), hud_color_index: i32, r: i32, g: i32, b: i32, a: i32);
	native!(_set_ability_bar_visibility_in_multiplayer, 0x1DFEDD15019315A9, (), visible: bool);
	native!(flash_ability_bar, 0x02CFBA0C9E9275CE, (), milliseconds_to_flash: i32);
	native!(set_ability_bar_value, 0x9969599CCFF5D85E, (), p0: f32, p1: f32);
	native!(flash_wanted_display, 0xA18AFB39081B6A1F, (), p0: bool);
	native!(_0xba8d65c1c65702e5, 0xBA8D65C1C65702E5, (), toggle: bool);
	native!(_get_text_scale_height, 0xDB88A37483346780, f32, size: f32, font: i32);
	native!(set_text_scale, 0x07C837F9A01C34C9, (), scale: f32, size: f32);
	native!(set_text_colour, 0xBE6B23FFA53FB442, (), red: i32, green: i32, blue: i32, alpha: i32);
	native!(set_text_centre, 0xC02F4DBFB51D988B, (), align: bool);
	native!(set_text_right_justify, 0x6B3C4650BC8BEE47, (), toggle: bool);
	native!(set_text_justification, 0x4E096588B13FFECA, (), justify_type: i32);
	native!(set_text_wrap, 0x63145D9C883A1A70, (), start: f32, end: f32);
	native!(set_text_leading, 0xA50ABC31E3CDFAFF, (), p0: i32);
	native!(set_text_proportional, 0x038C1F517D7FDCF8, (), p0: bool);
	native!(set_text_font, 0x66E0276CC5F6B9DA, (), font_type: i32);
	native!(set_text_drop_shadow, 0x1CA3E9EAC9D93E5E, ());
	native!(set_text_dropshadow, 0x465C84BC39F1C351, (), distance: i32, r: i32, g: i32, b: i32, a: i32);
	native!(set_text_outline, 0x2513DFB0FB8400FE, ());
	native!(set_text_edge, 0x441603240D202FA6, (), p0: i32, r: i32, g: i32, b: i32, a: i32);
	native!(set_text_render_id, 0x5F15302936E07111, (), render_id: i32);
	native!(get_default_script_rendertarget_render_id, 0x52F0982D7FD156B6, i32);
	native!(register_named_rendertarget, 0x57D9C12635E25CE3, bool, name: *const c_char, p1: bool);
	native!(is_named_rendertarget_registered, 0x78DCDC15C9F116B4, bool, name: *const c_char);
	native!(release_named_rendertarget, 0xE9F6FFE837354DD4, bool, name: *const c_char);
	native!(link_named_rendertarget, 0xF6C09E276AEB3F2D, (), model_hash: Hash);
	native!(get_named_rendertarget_render_id, 0x1A6478B61C6BDC3B, i32, name: *const c_char);
	native!(is_named_rendertarget_linked, 0x113750538FA31298, bool, model_hash: Hash);
	native!(clear_help, 0x8DFCED7A656F8802, (), toggle: bool);
	native!(is_help_message_on_screen, 0xDAD37F45428801AE, bool);
	native!(_0x214cd562a939246a, 0x214CD562A939246A, bool);
	native!(is_help_message_being_displayed, 0x4D79439A6B55AC67, bool);
	native!(is_help_message_fading_out, 0x327EDEEEAC55C369, bool);
	native!(_set_help_message_text_style, 0xB9C362BABECDDC7A, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_get_level_blip_sprite, 0x4A9923385BDB9DAD, bool);
	native!(_get_waypoint_blip_sprite, 0x186E5D252FA50E7D, i32);
	native!(get_number_of_active_blips, 0x9A3FF3DE163034E8, i32);
	native!(get_next_blip_info_id, 0x14F96AA50D6FBEA7, Blip, blip_sprite: i32);
	native!(get_first_blip_info_id, 0x1BEDE233E6CD2A1F, Blip, blip_sprite: i32);
	native!(_0xd484bf71050ca1ee, 0xD484BF71050CA1EE, i32, p0: i32);
	native!(get_blip_info_id_coord, 0xFA7C7F0AADF25D09, Vec3, blip: Blip);
	native!(get_blip_info_id_display, 0x1E314167F701DC3B, i32, blip: Blip);
	native!(get_blip_info_id_type, 0xBE9B0959FFD0779B, i32, blip: Blip);
	native!(get_blip_info_id_entity_index, 0x4BA4E2553AFEDC2C, Entity, blip: Blip);
	native!(get_blip_info_id_pickup_index, 0x9B6786E4C03DD382, Pickup, blip: Blip);
	native!(get_blip_from_entity, 0xBC8DBDCA2436F7E8, Blip, entity: Entity);
	native!(add_blip_for_radius, 0x46818D79B1F7499A, Blip, pos_x: f32, pos_y: f32, pos_z: f32, radius: f32);
	native!(_add_blip_for_area, 0xCE5D0E5E315DB238, Blip, x: f32, y: f32, z: f32, scale_x: f32, scale_y: f32);
	native!(add_blip_for_entity, 0x5CDE92C702A8FCE7, Blip, entity: Entity);
	native!(add_blip_for_pickup, 0xBE339365C863BD36, Blip, pickup: Pickup);
	native!(add_blip_for_coord, 0x5A039BB0BCA604B6, Blip, x: f32, y: f32, z: f32);
	native!(trigger_sonar_blip, 0x72DD432F3CDFC0EE, (), pos_x: f32, pos_y: f32, pos_z: f32, radius: f32, p4: i32);
	native!(allow_sonar_blips, 0x60734CC207C9833C, (), toggle: bool);
	native!(set_blip_coords, 0xAE2AF67E9D9AF65D, (), blip: Blip, pos_x: f32, pos_y: f32, pos_z: f32);
	native!(get_blip_coords, 0x586AFE3FF72D996E, Vec3, blip: Blip);
	native!(set_blip_sprite, 0xDF735600A4696DAF, (), blip: Blip, sprite_id: i32);
	native!(get_blip_sprite, 0x1FC877464A04FC4F, i32, blip: Blip);
	native!(_0x9fcb3cbfb3ead69a, 0x9FCB3CBFB3EAD69A, (), p0: i32, p1: f32);
	native!(_0xb7b873520c84c118, 0xB7B873520C84C118, ());
	native!(set_blip_name_from_text_file, 0xEAA0FFE120D92784, (), blip: Blip, gxt_entry: *const c_char);
	native!(set_blip_name_to_player_name, 0x127DE7B20C60A6A3, (), blip: Blip, player: Player);
	native!(set_blip_alpha, 0x45FF974EEE1C8734, (), blip: Blip, alpha: i32);
	native!(get_blip_alpha, 0x970F608F0EE6C885, i32, blip: Blip);
	native!(set_blip_fade, 0x2AEE8F8390D2298C, (), blip: Blip, opacity: i32, duration: i32);
	native!(_0x2c173ae2bdb9385e, 0x2C173AE2BDB9385E, i32, blip: Blip);
	native!(set_blip_rotation, 0xF87683CDF73C3F6E, (), blip: Blip, rotation: i32);
	native!(_set_blip_squared_rotation, 0xA8B6AFDAC320AC87, (), p0: i32, p1: i32);
	native!(set_blip_flash_timer, 0xD3CD6FD297AE87CC, (), blip: Blip, duration: i32);
	native!(set_blip_flash_interval, 0xAA51DB313C010A7E, (), blip: Blip, p1: i32);
	native!(set_blip_colour, 0x03D7FB09E75D6B7E, (), blip: Blip, color: i32);
	native!(set_blip_secondary_colour, 0x14892474891E09EB, (), blip: Blip, r: f32, g: f32, b: f32);
	native!(get_blip_colour, 0xDF729E8D20CF7327, i32, blip: Blip);
	native!(get_blip_hud_colour, 0x729B5F1EFBC0AAEE, i32, blip: Blip);
	native!(is_blip_short_range, 0xDA5F8727EB75B926, bool, blip: Blip);
	native!(is_blip_on_minimap, 0xE41CA53051197A27, bool, blip: Blip);
	native!(does_blip_have_gps_route, 0xDD2238F57B977751, bool, blip: Blip);
	native!(set_blip_hidden_on_legend, 0x54318C915D27E4CE, (), blip: Blip, toggle: bool);
	native!(set_blip_high_detail, 0xE2590BC29220CEBB, (), blip: Blip, toggle: bool);
	native!(set_blip_as_mission_creator_blip, 0x24AC0137444F9FD5, (), blip: Blip, toggle: bool);
	native!(is_mission_creator_blip, 0x26F49BF3381D933D, bool, blip: Blip);
	native!(get_new_selected_mission_creator_blip, 0x5C90988E7C8E1AF4, Blip);
	native!(is_hovering_over_mission_creator_blip, 0x4167EFE0527D706E, bool);
	native!(_0xf1a6c18b35bcade6, 0xF1A6C18B35BCADE6, (), p0: bool);
	native!(_0x2916a928514c9827, 0x2916A928514C9827, ());
	native!(_0xb552929b85fc27ec, 0xB552929B85FC27EC, (), p0: i32, p1: i32);
	native!(set_blip_flashes, 0xB14552383D39CE3E, (), blip: Blip, toggle: bool);
	native!(set_blip_flashes_alternate, 0x2E8D9498C56DD0D1, (), blip: Blip, toggle: bool);
	native!(is_blip_flashing, 0xA5E41FD83AD6CEF0, bool, blip: Blip);
	native!(set_blip_as_short_range, 0xBE8BE4FE60E27B72, (), blip: Blip, toggle: bool);
	native!(set_blip_scale, 0xD38744167B2FA257, (), blip: Blip, scale: f32);
	native!(_0xcd6524439909c979, 0xCD6524439909C979, (), blip: Blip, p1: f32, p2: f32);
	native!(set_blip_priority, 0xAE9FC9EF6A9FAC79, (), blip: Blip, priority: i32);
	native!(set_blip_display, 0x9029B2F3DA924928, (), blip: Blip, display_id: i32);
	native!(set_blip_category, 0x234CDD44D996FD9A, (), blip: Blip, index: i32);
	native!(remove_blip, 0x86A652570E5F25DD, (), blip: &mut Blip);
	native!(set_blip_as_friendly, 0x6F6F290102C02AB4, (), blip: Blip, toggle: bool);
	native!(pulse_blip, 0x742D6FD43115AF73, (), blip: Blip);
	native!(show_number_on_blip, 0xA3C0B359DCB848B6, (), blip: Blip, number: i32);
	native!(hide_number_on_blip, 0x532CFF637EF80148, (), blip: Blip);
	native!(show_height_on_blip, 0x75A16C3DA34F1245, (), blip: Blip, toggle: bool);
	native!(show_tick_on_blip, 0x74513EA3E505181E, (), blip: Blip, toggle: bool);
	native!(show_heading_indicator_on_blip, 0x5FBCA48327B914DF, (), blip: Blip, toggle: bool);
	native!(show_outline_indicator_on_blip, 0xB81656BC81FE24D1, (), blip: Blip, toggle: bool);
	native!(show_friend_indicator_on_blip, 0x23C3EB807312F01A, (), blip: Blip, toggle: bool);
	native!(show_crew_indicator_on_blip, 0xDCFB5D4DB8BF367E, (), blip: Blip, toggle: bool);
	native!(_set_blip_display_indicator_on_blip, 0xC4278F70131BAA6D, (), blip: Blip, toggle: bool);
	native!(_0x4b5b620c9b59ed34, 0x4B5B620C9B59ED34, (), p0: i32, p1: i32);
	native!(_0x2c9f302398e13141, 0x2C9F302398E13141, (), p0: i32, p1: i32);
	native!(_set_blip_shrink, 0x2B6D467DAB714E8D, (), blip: Blip, toggle: bool);
	native!(set_radius_blip_edge, 0x25615540D894B814, (), p0: i32, p1: bool);
	native!(does_blip_exist, 0xA6DB27D19ECBB7DA, bool, blip: Blip);
	native!(set_waypoint_off, 0xA7E4E2D361C2627F, ());
	native!(_delete_waypoint, 0xD8E694757BCEA8E9, ());
	native!(refresh_waypoint, 0x81FA173F170560D1, ());
	native!(is_waypoint_active, 0x1DD1F58F493F1DA5, bool);
	native!(set_new_waypoint, 0xFE43368D2AA4F2FC, (), x: f32, y: f32);
	native!(set_blip_bright, 0xB203913733F27884, (), blip: Blip, toggle: bool);
	native!(set_blip_show_cone, 0x13127EC3665E8EE1, (), blip: Blip, toggle: bool);
	native!(_0xc594b315edf2d4af, 0xC594B315EDF2D4AF, (), ped: Ped);
	native!(_0xf83d0febe75e62c9, 0xF83D0FEBE75E62C9, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32);
	native!(_0x35a3cd97b2c0a6d2, 0x35A3CD97B2C0A6D2, (), p0: i32);
	native!(_0x8410c5e0cd847b9d, 0x8410C5E0CD847B9D, ());
	native!(set_minimap_component, 0x75A9A10948D1DEA6, i32, p0: i32, p1: bool, p2: i32);
	native!(_show_signin_ui, 0x60E892BA4F5BDCA4, ());
	native!(get_main_player_blip_id, 0xDCD4EC3F419D02FA, Blip);
	native!(_0x41350b4fc28e3941, 0x41350B4FC28E3941, (), p0: bool);
	native!(hide_loading_on_fade_this_frame, 0x4B0311D3CDC4648F, ());
	native!(set_radar_as_interior_this_frame, 0x59E727A1C9D3E31A, (), interior: Hash, x: f32, y: f32, z: i32, zoom: i32);
	native!(_0x504dfe62a1692296, 0x504DFE62A1692296, (), toggle: bool);
	native!(set_radar_as_exterior_this_frame, 0xE81B7D2A3DAB2D81, ());
	native!(_set_player_blip_position_this_frame, 0x77E2DD177910E1CF, (), x: f32, y: f32);
	native!(_0xa17784fca9548d15, 0xA17784FCA9548D15, (), p0: i32, p1: i32, p2: i32);
	native!(_is_minimap_in_interior, 0x9049FE339D5F6F6F, bool);
	native!(hide_minimap_exterior_map_this_frame, 0x5FBAE526203990C9, ());
	native!(hide_minimap_interior_map_this_frame, 0x20FE7FDFEEAD38C0, ());
	native!(dont_tilt_minimap_this_frame, 0x6D14BFDC33B34F55, ());
	native!(_0x55f5a5f07134de60, 0x55F5A5F07134DE60, ());
	native!(set_widescreen_format, 0xC3B07BA00A83B0F1, (), p0: i32);
	native!(display_area_name, 0x276B6CE369C33678, (), toggle: bool);
	native!(display_cash, 0x96DEC8D5430208B7, (), toggle: bool);
	native!(_0x170f541e1cadd1de, 0x170F541E1CADD1DE, (), p0: bool);
	native!(_set_player_cash_change, 0x0772DF77852C2E30, (), cash: i32, bank: i32);
	native!(display_ammo_this_frame, 0xA5E78BA2B1331C55, (), display: bool);
	native!(display_sniper_scope_this_frame, 0x73115226F4814E62, ());
	native!(hide_hud_and_radar_this_frame, 0x719FF505F097FD20, ());
	native!(_0xe67c6dfd386ea5e7, 0xE67C6DFD386EA5E7, (), p0: bool);
	native!(set_multiplayer_wallet_cash, 0xC2D15BEF167E27BC, ());
	native!(remove_multiplayer_wallet_cash, 0x95CF81BD06EE1887, ());
	native!(set_multiplayer_bank_cash, 0xDD21B55DF695CD0A, ());
	native!(remove_multiplayer_bank_cash, 0xC7C6789AA1CFEDD0, ());
	native!(set_multiplayer_hud_cash, 0xFD1D220394BCB824, (), p0: i32, p1: i32);
	native!(remove_multiplayer_hud_cash, 0x968F270E39141ECA, ());
	native!(hide_help_text_this_frame, 0xD46923FC481CA285, ());
	native!(_0x801879a9b4f4b2fb, 0x801879A9B4F4B2FB, bool);
	native!(display_help_text_this_frame, 0x960C9FF8F616E41C, (), message: *const c_char, p1: bool);
	native!(hud_force_weapon_wheel, 0xEB354E5376BC81A7, (), show: bool);
	native!(_0x488043841bbe156f, 0x488043841BBE156F, ());
	native!(_hud_weapon_wheel_ignore_selection, 0x0AFC4AF510774B47, ());
	native!(_hud_weapon_wheel_get_selected_hash, 0xA48931185F0536FE, Hash);
	native!(_hud_weapon_wheel_set_slot_hash, 0x72C1056D678BB7D8, (), weapon_hash: Hash);
	native!(_hud_weapon_wheel_get_slot_hash, 0xA13E93403F26C812, i32, p0: i32);
	native!(_hud_weapon_wheel_ignore_control_input, 0x14C9FDCC41F81F63, (), p0: bool);
	native!(set_gps_flags, 0x5B440763A4C8D15B, (), p0: i32, p1: f32);
	native!(clear_gps_flags, 0x21986729D6A3A830, ());
	native!(set_race_track_render, 0x1EAC5F91BCBC5073, (), toggle: bool);
	native!(clear_gps_race_track, 0x7AA5B4CE533C858B, ());
	native!(start_gps_custom_route, 0xDB34E8D56FC13B08, (), hud_color: i32, p1: bool, p2: bool);
	native!(add_point_to_gps_custom_route, 0x311438A071DD9B1A, (), x: f32, y: f32, z: f32);
	native!(set_gps_custom_route_render, 0x900086F371220B6F, (), p0: bool, p1: i32, p2: i32);
	native!(clear_gps_custom_route, 0xE6DE0561D9232A64, ());
	native!(start_gps_multi_route, 0x3D3D15AF7BCAAF83, (), hud_color: i32, p1: bool, p2: bool);
	native!(add_point_to_gps_multi_route, 0xA905192A6781C41B, (), x: f32, y: f32, z: f32);
	native!(set_gps_multi_route_render, 0x3DDA37128DD1ACA8, (), toggle: bool);
	native!(clear_gps_multi_route, 0x67EEDEA1B9BAFD94, ());
	native!(clear_gps_player_waypoint, 0xFF4FB7C8CDFA3DA7, ());
	native!(set_gps_flashes, 0x320D0E0D936A0E9B, (), toggle: bool);
	native!(_0x7b21e0bb01e8224a, 0x7B21E0BB01E8224A, (), p0: i32);
	native!(flash_minimap_display, 0xF2DD778C22B15BDA, ());
	native!(flash_minimap_display_with_color, 0x6B1DE27EE78E6A19, (), p0: i32);
	native!(toggle_stealth_radar, 0x6AFDFB93754950C7, (), toggle: bool);
	native!(set_minimap_in_spectator_mode, 0x1A5CD7752DD28CD3, (), toggle: bool, ped: Ped);
	native!(set_mission_name, 0x5F28ECF5FC84772F, (), p0: bool, name: *const c_char);
	native!(_set_mission_name_2, 0xE45087D85F468BC2, (), p0: bool, name: *const c_char);
	native!(_0x817b86108eb94e51, 0x817B86108EB94E51, (), p0: bool, p1: &mut i32, p2: &mut i32, p3: &mut i32, p4: &mut i32, p5: &mut i32, p6: &mut i32, p7: &mut i32, p8: &mut i32);
	native!(set_minimap_block_waypoint, 0x58FADDED207897DC, (), toggle: bool);
	native!(set_minimap_in_prologue, 0x9133955F1A2DA957, (), toggle: bool);
	native!(set_minimap_hide_fow, 0xF8DEE0A5600CBB93, (), toggle: bool);
	native!(_get_minimap_reveal_percentage, 0xE0130B41D3CF4574, f32);
	native!(_get_minimap_area_is_revealed, 0x6E31B91145873922, bool, x: f32, y: f32, radius: f32);
	native!(_0x62e849b7eb28e770, 0x62E849B7EB28E770, (), p0: bool);
	native!(_0x0923dbf87dff735e, 0x0923DBF87DFF735E, (), x: f32, y: f32, z: f32);
	native!(set_minimap_golf_course, 0x71BDB63DBAF8DA59, (), hole: i32);
	native!(set_minimap_golf_course_off, 0x35EDD5B2E3FF01C0, ());
	native!(lock_minimap_angle, 0x299FAEBB108AE05B, (), angle: i32);
	native!(unlock_minimap_angle, 0x8183455E16C42E3A, ());
	native!(lock_minimap_position, 0x1279E861A329E73F, (), x: f32, y: f32);
	native!(unlock_minimap_position, 0x3E93E06DB8EF1F30, ());
	native!(_set_minimap_altitude_indicator_level, 0xD201F3FF917A506D, (), altitude: f32, p1: bool, p2: i32);
	native!(set_health_hud_display_values, 0x3F5CC444DCAAA8F2, (), p0: i32, p1: i32, p2: bool);
	native!(set_max_health_hud_display, 0x975D66A0BC17064C, (), p0: i32);
	native!(set_max_armour_hud_display, 0x06A320535F5F0248, (), p0: i32);
	native!(set_bigmap_active, 0x231C8F89D0539D8F, (), toggle_big_map: bool, show_full_map: bool);
	native!(is_hud_component_active, 0xBC4C9EA5391ECC0D, bool, id: i32);
	native!(is_scripted_hud_component_active, 0xDD100EB17A94FF65, bool, id: i32);
	native!(hide_scripted_hud_component_this_frame, 0xE374C498D8BADC14, (), id: i32);
	native!(_show_scripted_hud_component_this_frame, 0x4F38DCA127DAAEA2, (), id: i32);
	native!(is_scripted_hud_component_hidden_this_frame, 0x09C0403ED9A751C2, bool, id: i32);
	native!(hide_hud_component_this_frame, 0x6806C51AD12B83B8, (), id: i32);
	native!(show_hud_component_this_frame, 0x0B4DF1FA60C0E664, (), id: i32);
	native!(_hide_area_and_vehicle_name_this_frame, 0xA4DEDE28B1814289, ());
	native!(reset_reticule_values, 0x12782CE0A636E9F0, ());
	native!(reset_hud_component_values, 0x450930E616475D0D, (), id: i32);
	native!(set_hud_component_position, 0xAABB1F56E2A17CED, (), id: i32, x: f32, y: f32);
	native!(get_hud_component_position, 0x223CA69A8C4417FD, Vec3, id: i32);
	native!(clear_reminder_message, 0xB57D8DD645CFA2CF, ());
	native!(get_hud_screen_position_from_world_position, 0xF9904D11F1ACBEC3, bool, world_x: f32, world_y: f32, world_z: f32, screen_x: &mut f32, screen_y: &mut f32);
	native!(open_reportugc_menu, 0x523A590C1A3CC0D3, ());
	native!(force_close_reportugc_menu, 0xEE4C0E6DBC6F2C6F, ());
	native!(is_reportugc_menu_open, 0x9135584D09A3437E, bool);
	native!(is_floating_help_text_on_screen, 0x2432784ACA090DA4, bool, p0: i32);
	native!(set_floating_help_text_screen_position, 0x7679CC1BCEBE3D4C, (), p0: i32, x: f32, y: f32);
	native!(set_floating_help_text_world_position, 0x784BA7E0ECEB4178, (), p0: i32, x: f32, y: f32, z: f32);
	native!(set_floating_help_text_to_entity, 0xB094BC1DB4018240, (), p0: i32, entity: Entity, p2: f32, p3: f32);
	native!(set_floating_help_text_style, 0x788E7FD431BD67F1, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(clear_floating_help, 0x50085246ABD3FEFA, (), p0: i32, p1: bool);
	native!(create_mp_gamer_tag_with_crew_color, 0x6DD05E9D83EFA4C9, (), player: Player, username: *const c_char, pointed_clan_tag: bool, is_rockstar_clan: bool, clan_tag: *const c_char, p5: i32, r: i32, g: i32, b: i32);
	native!(is_mp_gamer_tag_movie_active, 0x6E0EB3EB47C8D7AA, bool);
	native!(create_fake_mp_gamer_tag, 0xBFEFE3321A3F5015, i32, ped: Ped, username: *const c_char, pointed_clan_tag: bool, is_rockstar_clan: bool, clan_tag: *const c_char, p5: i32);
	native!(remove_mp_gamer_tag, 0x31698AA80E0223F8, (), gamer_tag_id: i32);
	native!(is_mp_gamer_tag_active, 0x4E929E7A5796FD26, bool, gamer_tag_id: i32);
	native!(is_mp_gamer_tag_free, 0x595B5178E412E199, bool, gamer_tag_id: i32);
	native!(set_mp_gamer_tag_visibility, 0x63BB75ABEDC1F6A0, (), gamer_tag_id: i32, component: i32, toggle: bool, p3: i32);
	native!(_0xee76ff7e6a0166b0, 0xEE76FF7E6A0166B0, (), gamer_tag_id: i32, p1: bool);
	native!(_set_mp_gamer_tag_icons, 0xA67F9C46D612B6F1, (), gamer_tag_id: i32, p1: bool);
	native!(_set_mp_gamer_health_bar_display, 0xD29EC58C2F6B5014, (), p0: i32, p1: i32);
	native!(_set_mp_gamer_health_bar_max, 0x1563FE35E9928E67, (), p0: i32, p1: i32, p2: i32);
	native!(set_mp_gamer_tag_colour, 0x613ED644950626AE, (), gamer_tag_id: i32, flag: i32, color: i32);
	native!(set_mp_gamer_tag_health_bar_colour, 0x3158C77A7E888AB4, (), head_display_id: i32, color: i32);
	native!(set_mp_gamer_tag_alpha, 0xD48FE545CD46F857, (), gamer_tag_id: i32, component: i32, alpha: i32);
	native!(set_mp_gamer_tag_wanted_level, 0xCF228E2AA03099C3, (), gamer_tag_id: i32, wantedlvl: i32);
	native!(_set_mp_gamer_tag_unk, 0x9C16459B2324B2CF, (), gamer_tag_id: i32, p1: i32);
	native!(set_mp_gamer_tag_name, 0xDEA2B8283BAA3944, (), gamer_tag_id: i32, string: *const c_char);
	native!(_is_valid_mp_gamer_tag_movie, 0xEB709A36958ABE0D, bool, gamer_tag_id: i32);
	native!(set_mp_gamer_tag_big_text, 0x7B7723747CCB55B6, (), gamer_tag_id: i32, string: *const c_char);
	native!(get_current_webpage_id, 0x01A358D9128B7A86, i32);
	native!(get_current_website_id, 0x97D47996FC48CBAD, i32);
	native!(_0xe3b05614dce1d014, 0xE3B05614DCE1D014, i32, p0: i32);
	native!(_0xb99c4e4d9499df29, 0xB99C4E4D9499DF29, (), p0: i32);
	native!(_is_warning_message_active_2, 0xAF42195A42C63BBA, bool);
	native!(set_warning_message, 0x7B1776B3B53F8D74, (), title_msg: *const c_char, flags: i32, prompt_msg: *const c_char, p3: bool, p4: i32, p5: *const c_char, p6: *const c_char, show_bg: bool, p8: i32);
	native!(set_warning_message_with_header, 0xDC38CC1E35B6A5D7, (), title_msg: *const c_char, p1: *const c_char, flags: i32, prompt_msg: *const c_char, p4: bool, p5: i32, p6: &mut i32, p7: &mut i32, show_bg: bool, p9: i32);
	native!(set_warning_message_with_header_and_substring_flags, 0x701919482C74B5AB, (), entry_header: *const c_char, entry_line1: *const c_char, instructional_key: i32, entry_line2: *const c_char, p4: bool, p5: i32, p6: i32, p7: &mut i32, p8: &mut i32, p9: bool, p10: i32);
	native!(_set_warning_message_with_header_unk, 0x38B55259C2E078ED, (), entry_header: *const c_char, entry_line1: *const c_char, flags: i32, entry_line2: *const c_char, p4: bool, p5: i32, p6: &mut i32, p7: &mut i32, show_bg: bool, p9: i32, p10: i32);
	native!(_set_warning_message_4, 0x15803FEC3B9A872B, (), p0: *const c_char, p1: *const c_char, p2: i32, p3: i32, p4: *const c_char, p5: bool, p6: i32, p7: i32, p8: *const c_char, p9: *const c_char, p10: bool, p11: i32);
	native!(_get_warning_message_title_hash, 0x81DF9ABA6C83DFF9, Hash);
	native!(_set_warning_message_list_row, 0x0C5A80A9E096D529, bool, index: i32, name: *const c_char, cash: i32, rp: i32, lvl: i32, colour: i32);
	native!(_0xdaf87174be7454ff, 0xDAF87174BE7454FF, bool, p0: i32);
	native!(_remove_warning_message_list_items, 0x6EF54AB721DC6242, ());
	native!(is_warning_message_active, 0xE18B138FABC53103, bool);
	native!(clear_dynamic_pause_menu_error_message, 0x7792424AA0EAC32E, ());
	native!(_race_gallery_fullscreen, 0x5354C5BA2EA868A4, (), toggle: bool);
	native!(_race_gallery_next_blip_sprite, 0x1EAE6DD17B7A5EFA, (), p0: i32);
	native!(_race_gallery_add_blip, 0x551DF99658DB6EE8, i32, p0: f32, p1: f32, p2: f32);
	native!(_clear_race_gallery_blips, 0x2708FC083123F9FF, ());
	native!(force_sonar_blips_this_frame, 0x1121BFA1A1A522A8, i32);
	native!(_0x3f0cf9cb7e589b88, 0x3F0CF9CB7E589B88, i32);
	native!(_0x82cedc33687e1f50, 0x82CEDC33687E1F50, (), p0: bool);
	native!(_0x211c4ef450086857, 0x211C4EF450086857, ());
	native!(_0xbf4f34a85ca2970c, 0xBF4F34A85CA2970C, ());
	native!(activate_frontend_menu, 0xEF01D36B9C9D0C7B, (), menuhash: Hash, toggle_pause: bool, component: i32);
	native!(restart_frontend_menu, 0x10706DC6AD2D49C0, (), menu_hash: Hash, p1: i32);
	native!(get_current_frontend_menu_version, 0x2309595AD6145265, Hash);
	native!(set_pause_menu_active, 0xDF47FC56C71569CF, (), toggle: bool);
	native!(disable_frontend_this_frame, 0x6D3465A73092F0E6, ());
	native!(suppress_frontend_rendering_this_frame, 0xBA751764F0821256, ());
	native!(_allow_pause_menu_when_dead_this_frame, 0xCC3FDDED67BCFC63, ());
	native!(set_frontend_active, 0x745711A75AB09277, (), active: bool);
	native!(is_pause_menu_active, 0xB0034A223497FFCB, bool);
	native!(_0x2f057596f2bd0061, 0x2F057596F2BD0061, bool);
	native!(get_pause_menu_state, 0x272ACD84970869C5, i32);
	native!(_0x5bff36d6ed83e0ae, 0x5BFF36D6ED83E0AE, Vec3);
	native!(is_pause_menu_restarting, 0x1C491717107431C7, bool);
	native!(_log_debug_info, 0x2162C446DFDF38FD, (), p0: *const c_char);
	native!(_0x77f16b447824da6c, 0x77F16B447824DA6C, (), p0: i32);
	native!(_0xcdca26e80faecb8f, 0xCDCA26E80FAECB8F, ());
	native!(_0x2de6c5e2e996f178, 0x2DE6C5E2E996F178, (), p0: i32);
	native!(pause_menu_activate_context, 0xDD564BDD0472C936, (), context_hash: Hash);
	native!(pause_menu_deactivate_context, 0x444D8CF241EC25C5, (), context_hash: Hash);
	native!(pause_menu_is_context_active, 0x84698AB38D0C6636, bool, context_hash: Hash);
	native!(_0x2a25adc48f87841f, 0x2A25ADC48F87841F, i32);
	native!(_0xde03620f8703a9df, 0xDE03620F8703A9DF, i32);
	native!(_0x359af31a4b52f5ed, 0x359AF31A4B52F5ED, i32);
	native!(_0x13c4b962653a5280, 0x13C4B962653A5280, i32);
	native!(_0xc8e1071177a23be5, 0xC8E1071177A23BE5, bool, p0: &mut i32, p1: &mut i32, p2: &mut i32);
	native!(_0x4895bdea16e7c080, 0x4895BDEA16E7C080, (), p0: i32);
	native!(_0xc78e239ac5b2ddb9, 0xC78E239AC5B2DDB9, (), p0: bool, p1: i32, p2: i32);
	native!(_0xf06ebb91a81e09e3, 0xF06EBB91A81E09E3, (), p0: bool);
	native!(is_frontend_ready_for_control, 0x3BAB9A4E4F2FF5C7, bool);
	native!(_0xec9264727eec0f28, 0xEC9264727EEC0F28, ());
	native!(_0x14621bb1df14e2b2, 0x14621BB1DF14E2B2, ());
	native!(_0x66e7cb63c97b7d20, 0x66E7CB63C97B7D20, i32);
	native!(_0x593feae1f73392d4, 0x593FEAE1F73392D4, i32);
	native!(_0x4e3cd0ef8a489541, 0x4E3CD0EF8A489541, i32);
	native!(_0xf284ac67940c6812, 0xF284AC67940C6812, i32);
	native!(_0x2e22fefa0100275e, 0x2E22FEFA0100275E, i32);
	native!(_0x0cf54f20de43879c, 0x0CF54F20DE43879C, (), p0: i32);
	native!(_0x36c1451a88a09630, 0x36C1451A88A09630, (), p0: &mut i32, p1: &mut i32);
	native!(_0x7e17be53e1aaabaf, 0x7E17BE53E1AAABAF, (), p0: &mut i32, p1: &mut i32, p2: &mut i32);
	native!(_0xa238192f33110615, 0xA238192F33110615, bool, p0: &mut i32, p1: &mut i32, p2: &mut i32);
	native!(_0xef4ced81cebedc6d, 0xEF4CED81CEBEDC6D, bool, p0: i32, p1: &mut i32);
	native!(_0xca6b2f7ce32ab653, 0xCA6B2F7CE32AB653, bool, p0: i32, p1: &mut i32, p2: i32);
	native!(_0x90a6526cf0381030, 0x90A6526CF0381030, bool, p0: i32, p1: &mut i32, p2: i32, p3: i32);
	native!(_0x24a49beaf468dc90, 0x24A49BEAF468DC90, bool, p0: i32, p1: &mut i32, p2: i32, p3: i32, p4: i32);
	native!(_0x5fbd7095fe7ae57f, 0x5FBD7095FE7AE57F, bool, p0: i32, p1: &mut f32);
	native!(_0x8f08017f9d7c47bd, 0x8F08017F9D7C47BD, bool, p0: i32, p1: &mut i32, p2: i32);
	native!(_0x052991e59076e4e4, 0x052991E59076E4E4, bool, p0: Hash, p1: &mut i32);
	native!(clear_ped_in_pause_menu, 0x5E62BE5DC58E9E06, ());
	native!(give_ped_to_pause_menu, 0xAC0BFBDC3BE00E14, (), ped: Ped, p1: i32);
	native!(set_pause_menu_ped_lighting, 0x3CA6050692BC61B0, (), p0: bool);
	native!(set_pause_menu_ped_sleep_state, 0xECF128344E9FF9F1, (), state: bool);
	native!(open_online_policies_menu, 0x805D7CBB36FD6C4C, ());
	native!(_0xf13fe2a80c05c561, 0xF13FE2A80C05C561, bool);
	native!(is_online_policies_menu_active, 0x6F72CD94F7B5B68C, bool);
	native!(open_social_club_menu, 0x75D3691713C3B05A, ());
	native!(close_social_club_menu, 0xD2B32BE3FC1626C6, ());
	native!(set_social_club_tour, 0x9E778248D6685FE0, (), name: *const c_char);
	native!(is_social_club_active, 0xC406BE343FC4B9AF, bool);
	native!(_0x1185a8087587322c, 0x1185A8087587322C, (), p0: bool);
	native!(_force_close_text_input_box, 0x8817605C2BA76200, ());
	native!(_0x577599cced639ca2, 0x577599CCED639CA2, (), p0: i32);
	native!(_override_multiplayer_chat_prefix, 0x6A1738B4323FE2D9, (), p0: i32);
	native!(_is_multiplayer_chat_active, 0xB118AF58B5F332A1, bool);
	native!(_close_multiplayer_chat, 0x1AC8F4AD40E22127, ());
	native!(_0x7c226d5346d4d10a, 0x7C226D5346D4D10A, (), p0: i32);
	native!(_override_multiplayer_chat_colour, 0xF47E567B3630DD12, (), p0: i32, p1: i32);
	native!(_set_text_chat_unk, 0x1DB21A44B09E8BA3, (), p0: bool);
	native!(flag_player_context_in_tournament, 0xCEF214315D276FD1, (), toggle: bool);
	native!(set_ped_has_ai_blip, 0xD30C50DF888D58B5, (), ped: Ped, has_cone: bool);
	native!(_set_ped_has_ai_blip_with_color, 0xB13DCB4C6FAAD238, (), ped: Ped, has_cone: bool, color: i32);
	native!(does_ped_have_ai_blip, 0x15B8ECF844EE67ED, bool, ped: Ped);
	native!(set_ped_ai_blip_gang_id, 0xE52B8E7F85D39A08, (), ped: Ped, gang_id: i32);
	native!(set_ped_ai_blip_has_cone, 0x3EED80DFF7325CAA, (), ped: Ped, toggle: bool);
	native!(set_ped_ai_blip_forced_on, 0x0C4BBF625CA98C4E, (), ped: Ped, toggle: bool);
	native!(set_ped_ai_blip_notice_range, 0x97C65887D4B37FA9, (), ped: Ped, range: f32);
	native!(_set_ped_ai_blip_sprite, 0xFCFACD0DB9D7A57D, (), ped: Ped, sprite_id: i32);
	native!(_get_ai_blip_2, 0x7CD934010E115C2C, Blip, ped: Ped);
	native!(_get_ai_blip, 0x56176892826A4FE8, Blip, ped: Ped);
	native!(_has_director_mode_been_triggered, 0xA277800A9EAE340E, bool);
	native!(_set_director_mode_clear_triggered_flag, 0x2632482FD6B9AB87, ());
	native!(_set_player_is_in_director_mode, 0x808519373FD336A3, (), toggle: bool);
	native!(_0x04655f9d075d0ae5, 0x04655F9D075D0AE5, (), toggle: bool);
}

pub mod interior {
	use super::*;

	native!(_get_interior_heading, 0xF49B58631D9E22D9, f32, interior: Interior);
	native!(_get_interior_info, 0x252BDC06B73FA6EA, (), interior: Interior, position: &mut Vec3, name_hash: &mut Hash);
	native!(get_interior_group_id, 0xE4A84ABF135EF91A, i32, interior: Interior);
	native!(get_offset_from_interior_in_world_coords, 0x9E3B3E6D66F6E22F, Vec3, interior: Interior, x: f32, y: f32, z: f32);
	native!(is_interior_scene, 0xBC72B5D7A1CBD54D, bool);
	native!(is_valid_interior, 0x26B0E73D7EAAF4D3, bool, interior: Interior);
	native!(clear_room_for_entity, 0xB365FC0C4E27FFA7, (), entity: Entity);
	native!(force_room_for_entity, 0x52923C4710DD9907, (), entity: Entity, interior: Interior, room_hash_key: Hash);
	native!(get_room_key_from_entity, 0x47C2A06D4F5F424B, Hash, entity: Entity);
	native!(get_key_for_entity_in_room, 0x399685DB942336BC, Hash, entity: Entity);
	native!(get_interior_from_entity, 0x2107BA504071A6BB, Interior, entity: Entity);
	native!(_0x82ebb79e258fa2b7, 0x82EBB79E258FA2B7, (), entity: Entity, interior: Interior);
	native!(_0x38c1cb1cb119a016, 0x38C1CB1CB119A016, (), p0: i32, p1: i32);
	native!(force_room_for_game_viewport, 0x920D853F3E17F1DA, (), interior_id: i32, room_hash_key: Hash);
	native!(_0xaf348afcb575a441, 0xAF348AFCB575A441, (), room_name: *const c_char);
	native!(_0x405dc2aef6af95b9, 0x405DC2AEF6AF95B9, (), room_hash_key: Hash);
	native!(get_room_key_for_game_viewport, 0xA6575914D2A0B450, Hash);
	native!(clear_room_for_game_viewport, 0x23B59D8912F94246, ());
	native!(_0xe7d267ec6ca966c3, 0xE7D267EC6CA966C3, i32);
	native!(get_interior_at_coords, 0xB0F7F8663821D9C3, Interior, x: f32, y: f32, z: f32);
	native!(add_pickup_to_interior_room_by_name, 0x3F6167F351168730, (), pickup: Pickup, room_name: *const c_char);
	native!(pin_interior_in_memory, 0x2CA429C029CCF247, (), interior: Interior);
	native!(unpin_interior, 0x261CCE7EED010641, (), interior: Interior);
	native!(is_interior_ready, 0x6726BDCCC1932F0E, bool, interior: Interior);
	native!(_0x4c2330e61d3deb56, 0x4C2330E61D3DEB56, i32, interior: Interior);
	native!(get_interior_at_coords_with_type, 0x05B7A89BD78797FC, Interior, x: f32, y: f32, z: f32, interior_type: *const c_char);
	native!(get_interior_at_coords_with_typehash, 0xF0F77ADB9F67E79D, Interior, x: f32, y: f32, z: f32, type_hash: Hash);
	native!(_0x483aca1176ca93f1, 0x483ACA1176CA93F1, ());
	native!(is_collision_marked_outside, 0xEEA5AC2EDA7C33E8, bool, x: f32, y: f32, z: f32);
	native!(get_interior_from_collision, 0xEC4CF9FCB29A4424, i32, x: f32, y: f32, z: f32);
	native!(_0x7ecdf98587e92dec, 0x7ECDF98587E92DEC, (), p0: i32);
	native!(activate_interior_entity_set, 0x55E86AF2712B36A1, (), interior: Interior, entity_set_name: *const c_char);
	native!(deactivate_interior_entity_set, 0x420BD37289EEE162, (), interior: Interior, entity_set_name: *const c_char);
	native!(is_interior_entity_set_active, 0x35F7DD45E8C0A16D, bool, interior: Interior, entity_set_name: *const c_char);
	native!(_set_interior_entity_set_color, 0xC1F1920BAF281317, (), interior: Interior, entity_set_name: *const c_char, color: i32);
	native!(refresh_interior, 0x41F37C3427C75AE0, (), interior: Interior);
	native!(enable_exterior_cull_model_this_frame, 0xA97F257D0151A6AB, (), map_object_hash: Hash);
	native!(_enable_script_cull_model_this_frame, 0x50C375537449F369, (), p0: i32);
	native!(disable_interior, 0x6170941419D7D8EC, (), interior: Interior, toggle: bool);
	native!(is_interior_disabled, 0xBC5115A5A939DD15, bool, interior: Interior);
	native!(cap_interior, 0xD9175F941610DB54, (), interior: Interior, toggle: bool);
	native!(is_interior_capped, 0x92BAC8ACF88CEC26, bool, interior: Interior);
	native!(_0x9e6542f0ce8e70a3, 0x9E6542F0CE8E70A3, (), toggle: bool);
	native!(_0x7241ccb7d020db69, 0x7241CCB7D020DB69, (), entity: Entity, toggle: bool);
}

pub mod itemset {
	use super::*;

	native!(create_itemset, 0x35AD299F50D91B24, Vehicle, p0: bool);
	native!(destroy_itemset, 0xDE18220B1C183EDA, (), p0: i32);
	native!(is_itemset_valid, 0xB1B1EA596344DFAB, bool, p0: i32);
	native!(add_to_itemset, 0xE3945201F14637DD, bool, p0: i32, p1: i32);
	native!(remove_from_itemset, 0x25E68244B0177686, (), p0: i32, p1: i32);
	native!(get_itemset_size, 0xD9127E83ABF7C631, i32, x: ScrHandle);
	native!(get_indexed_item_in_itemset, 0x7A197E2521EE2BAB, i32, p0: i32, p1: i32);
	native!(is_in_itemset, 0x2D0FC594D1E9C107, bool, p0: i32, p1: i32);
	native!(clean_itemset, 0x41BC0D722FC04221, (), p0: i32);
}

pub mod loadingscreen {
	use super::*;

	native!(_0xf2ca003f167e21d2, 0xF2CA003F167E21D2, i32);
	native!(_loadingscreen_get_load_freemode, 0xEF7D17BC6C85264C, bool);
	native!(_loadingscreen_set_load_freemode, 0xB0C56BD3D808D863, (), toggle: bool);
	native!(_loadingscreen_get_load_freemode_with_event_name, 0x8AA464D4E0F6ACCD, bool);
	native!(_loadingscreen_set_load_freemode_with_event_name, 0xFC309E94546FCDB5, (), toggle: bool);
	native!(_loadingscreen_is_loading_freemode, 0xC6DC823253FBB366, bool);
	native!(_loadingscreen_set_is_loading_freemode, 0xC7E7181C09F33B69, (), toggle: bool);
	native!(_0xfa1e0e893d915215, 0xFA1E0E893D915215, (), toggle: bool);
}

pub mod localization {
	use super::*;

	native!(_localization_get_system_language, 0x497420E022796B3F, i32);
	native!(get_current_language, 0x2BDD44CC428A7EAE, i32);
	native!(_localization_get_user_language, 0xA8AE43AEC1A61314, i32);
}

pub mod misc {
	use super::*;

	native!(get_allocated_stack_size, 0x8B3CA62B1EF19B62, i32);
	native!(get_number_of_free_stacks_of_this_size, 0xFEAD16FC8F9DFC0F, i32, stack_size: i32);
	native!(set_random_seed, 0x444D98F98C11F3EC, (), seed: i32);
	native!(set_time_scale, 0x1D408577D440E81E, (), time_scale: f32);
	native!(set_mission_flag, 0xC4301E5121A0ED73, (), toggle: bool);
	native!(get_mission_flag, 0xA33CDCCDA663159E, bool);
	native!(set_random_event_flag, 0x971927086CFD2158, (), toggle: bool);
	native!(get_random_event_flag, 0xD2D57F1D764117B1, bool);
	native!(_get_global_char_buffer, 0x24DA7D7667FD7B09, *const c_char);
	native!(_0x4dcdf92bf64236cd, 0x4DCDF92BF64236CD, (), p0: *const c_char, p1: *const c_char);
	native!(_0x31125fd509d9043f, 0x31125FD509D9043F, (), p0: *const c_char);
	native!(_0xebd3205a207939ed, 0xEBD3205A207939ED, (), p0: *const c_char);
	native!(_0x97e7e2c04245115b, 0x97E7E2C04245115B, (), p0: i32);
	native!(_0xeb078ca2b5e82add, 0xEB078CA2B5E82ADD, (), p0: *const c_char, p1: *const c_char);
	native!(_0x703cc7f60cbb2b57, 0x703CC7F60CBB2B57, (), p0: *const c_char);
	native!(_0x8951eb9c6906d3c8, 0x8951EB9C6906D3C8, ());
	native!(_0xba4b8d83bdc75551, 0xBA4B8D83BDC75551, (), p0: *const c_char);
	native!(_has_resumed_from_suspend, 0xE8B9C0EC9E183F35, bool);
	native!(_0x65d2ebb47e1cec21, 0x65D2EBB47E1CEC21, (), toggle: bool);
	native!(_0x6f2135b6129620c1, 0x6F2135B6129620C1, (), toggle: bool);
	native!(_0x8d74e26f54b4e5c3, 0x8D74E26F54B4E5C3, (), p0: *const c_char);
	native!(_get_base_element_metadata, 0xB335F761606DB47C, bool, p0: &mut i32, p1: &mut i32, p2: i32, p3: bool);
	native!(get_prev_weather_type_hash_name, 0x564B884A05EC45A3, Hash);
	native!(get_next_weather_type_hash_name, 0x711327CD09C8F162, Hash);
	native!(is_prev_weather_type, 0x44F28F86433B10A9, bool, weather_type: *const c_char);
	native!(is_next_weather_type, 0x2FAA3A30BEC0F25D, bool, weather_type: *const c_char);
	native!(set_weather_type_persist, 0x704983DF373B198F, (), weather_type: *const c_char);
	native!(set_weather_type_now_persist, 0xED712CA327900C8A, (), weather_type: *const c_char);
	native!(set_weather_type_now, 0x29B487C359E19889, (), weather_type: *const c_char);
	native!(set_weather_type_overtime_persist, 0xFB5045B7C42B75BF, (), weather_type: *const c_char, time: f32);
	native!(set_random_weather_type, 0x8B05F884CF7E8020, ());
	native!(clear_weather_type_persist, 0xCCC39339BEF76CF5, ());
	native!(_0x0cf97f497fe7d048, 0x0CF97F497FE7D048, (), p0: i32);
	native!(_get_weather_type_transition, 0xF3BBE884A14BB413, (), weather_type1: &mut Hash, weather_type2: &mut Hash, percent_weather2: &mut f32);
	native!(_set_weather_type_transition, 0x578C752848ECFA0C, (), weather_type1: Hash, weather_type2: Hash, percent_weather2: f32);
	native!(set_override_weather, 0xA43D5C6FE51ADBEF, (), weather_type: *const c_char);
	native!(clear_override_weather, 0x338D2E3477711050, ());
	native!(_0xb8f87ead7533b176, 0xB8F87EAD7533B176, (), p0: f32);
	native!(_0xc3ead29ab273ece8, 0xC3EAD29AB273ECE8, (), p0: f32);
	native!(_0xa7a1127490312c36, 0xA7A1127490312C36, (), p0: f32);
	native!(_0x31727907b2c43c55, 0x31727907B2C43C55, (), p0: f32);
	native!(_0x405591ec8fd9096d, 0x405591EC8FD9096D, (), p0: f32);
	native!(_0xf751b16fb32abc1d, 0xF751B16FB32ABC1D, (), p0: f32);
	native!(_0xb3e6360dde733e82, 0xB3E6360DDE733E82, (), p0: f32);
	native!(_0x7c9c0b1eeb1f9072, 0x7C9C0B1EEB1F9072, (), p0: f32);
	native!(_0x6216b116083a7cb4, 0x6216B116083A7CB4, (), p0: f32);
	native!(_0x9f5e6bb6b34540da, 0x9F5E6BB6B34540DA, (), p0: f32);
	native!(_0xb9854dfde0d833d6, 0xB9854DFDE0D833D6, (), p0: f32);
	native!(_0xc54a08c85ae4d410, 0xC54A08C85AE4D410, (), p0: f32);
	native!(_0xa8434f1dff41d6e7, 0xA8434F1DFF41D6E7, (), p0: f32);
	native!(_0xc3c221addde31a11, 0xC3C221ADDDE31A11, (), p0: f32);
	native!(set_wind, 0xAC3A74E8384A9919, (), speed: f32);
	native!(set_wind_speed, 0xEE09ECEDBABE47FC, (), speed: f32);
	native!(get_wind_speed, 0xA8CF1CC0AFCD3F12, f32);
	native!(set_wind_direction, 0xEB0F4468467B4528, (), direction: f32);
	native!(get_wind_direction, 0x1F400FEF721170DA, Vec3);
	native!(_set_rain_fx_intensity, 0x643E26EA6E024D92, (), intensity: f32);
	native!(get_rain_level, 0x96695E368AD855F3, f32);
	native!(get_snow_level, 0xC5868A966E5BE3AE, f32);
	native!(force_lightning_flash, 0xF6062E089251C898, ());
	native!(_0x02deaac8f8ea7fe7, 0x02DEAAC8F8EA7FE7, (), p0: *const c_char);
	native!(preload_cloud_hat, 0x11B56FBBF7224868, (), name: *const c_char);
	native!(load_cloud_hat, 0xFC4842A34657BFCB, (), name: *const c_char, transition_time: f32);
	native!(unload_cloud_hat, 0xA74802FB8D0B7814, (), name: *const c_char, p1: f32);
	native!(_clear_cloud_hat, 0x957E790EA1727B64, ());
	native!(_set_cloud_hat_opacity, 0xF36199225D6D8C86, (), opacity: f32);
	native!(_get_cloud_hat_opacity, 0x20AC25E781AE4A84, f32);
	native!(get_game_timer, 0x9CD27B0045628463, i32);
	native!(get_frame_time, 0x15C40837039FFAF7, f32);
	native!(_get_benchmark_time, 0xE599A503B3837E1B, f32);
	native!(get_frame_count, 0xFC8202EFC642E6F2, i32);
	native!(get_random_float_in_range, 0x313CE5879CEB6FCD, f32, start_range: f32, end_range: f32);
	native!(get_random_int_in_range, 0xD53343AA4FB7DD28, i32, start_range: i32, end_range: i32);
	native!(_get_random_int_in_range_2, 0xF2D49816A804D134, i32, start_range: i32, end_range: i32);
	native!(get_ground_z_for_3d_coord, 0xC906A7DAB05C8D2B, bool, x: f32, y: f32, z: f32, ground_z: &mut f32, unk: bool, p5: bool);
	native!(get_ground_z_and_normal_for_3d_coord, 0x8BDC7BFC57A81E76, bool, x: f32, y: f32, z: f32, ground_z: &mut f32, normal: &mut Vec3);
	native!(_get_ground_z_for_3d_coord_2, 0x9E82F0F362881B29, i32, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(asin, 0xC843060B5765DCE7, f32, p0: f32);
	native!(acos, 0x1D08B970013C34B6, f32, p0: f32);
	native!(tan, 0x632106CC96E82E91, f32, p0: f32);
	native!(atan, 0xA9D1795CD5043663, f32, p0: f32);
	native!(atan2, 0x8927CBF9D22261A4, f32, p0: f32, p1: f32);
	native!(get_distance_between_coords, 0xF1B760881820C952, f32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, use_z: bool);
	native!(get_angle_between_2d_vectors, 0x186FC4BE848E1C92, f32, x1: f32, y1: f32, x2: f32, y2: f32);
	native!(get_heading_from_vector_2d, 0x2FFB6B224F4B2926, f32, dx: f32, dy: f32);
	native!(_0x7f8f6405f4777af6, 0x7F8F6405F4777AF6, f32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: bool);
	native!(_0x21c235bc64831e5a, 0x21C235BC64831E5A, Vec3, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: bool);
	native!(_0xf56dfb7b61be7276, 0xF56DFB7B61BE7276, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: f32, p10: f32, p11: f32, p12: &mut f32);
	native!(set_bit, 0x933D6A9EEC1BACD0, (), address: &mut i32, offset: i32);
	native!(clear_bit, 0xE80492A9AC099A93, (), address: &mut i32, offset: i32);
	native!(get_hash_key, 0xD24D37CC275948CC, Hash, string: *const c_char);
	native!(slerp_near_quaternion, 0xF2F6A2FA49278625, (), p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: &mut f32, p10: &mut f32, p11: &mut f32, p12: &mut f32);
	native!(is_area_occupied, 0xA61B4DF533DCB56E, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: bool, p7: bool, p8: bool, p9: bool, p10: bool, p11: i32, p12: bool);
	native!(is_position_occupied, 0xADCDE75E1C60F32D, bool, x: f32, y: f32, z: f32, range: f32, p4: bool, p5: bool, p6: bool, p7: bool, p8: bool, p9: i32, p10: bool);
	native!(is_point_obscured_by_a_mission_entity, 0xE54E209C35FFA18D, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: i32);
	native!(clear_area, 0xA56F01F3765B93A0, (), x: f32, y: f32, z: f32, radius: f32, p4: bool, ignore_cop_cars: bool, ignore_objects: bool, p7: bool);
	native!(_clear_area_of_everything, 0x957838AAF91BD12D, (), x: f32, y: f32, z: f32, radius: f32, p4: bool, p5: bool, p6: bool, p7: bool);
	native!(clear_area_of_vehicles, 0x01C7B9B38428AEB6, (), x: f32, y: f32, z: f32, radius: f32, p4: bool, p5: bool, p6: bool, p7: bool, p8: bool, p9: bool);
	native!(clear_angled_area_of_vehicles, 0x11DB3500F042A8AA, (), p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: bool, p8: bool, p9: bool, p10: bool, p11: bool, p12: i32);
	native!(clear_area_of_objects, 0xDD9B9B385AAC7F5B, (), x: f32, y: f32, z: f32, radius: f32, flags: i32);
	native!(clear_area_of_peds, 0xBE31FD6CE464AC59, (), x: f32, y: f32, z: f32, radius: f32, flags: i32);
	native!(clear_area_of_cops, 0x04F8FC8FCF58F88D, (), x: f32, y: f32, z: f32, radius: f32, flags: i32);
	native!(clear_area_of_projectiles, 0x0A1CB9094635D1A6, (), x: f32, y: f32, z: f32, radius: f32, flags: i32);
	native!(_0x7ec6f9a478a6a512, 0x7EC6F9A478A6A512, ());
	native!(set_save_menu_active, 0xC9BF75D28165FF77, (), ignore_vehicle: bool);
	native!(_0x397baa01068baa96, 0x397BAA01068BAA96, i32);
	native!(set_credits_active, 0xB938B7E6D3C0620C, (), toggle: bool);
	native!(_0xb51b9ab9ef81868c, 0xB51B9AB9EF81868C, (), toggle: bool);
	native!(have_credits_reached_end, 0x075F1D57402C93BA, bool);
	native!(terminate_all_scripts_with_this_name, 0x9DC711BC69C548DF, (), script_name: *const c_char);
	native!(network_set_script_is_safe_for_network_game, 0x9243BAC96D64C050, ());
	native!(add_hospital_restart, 0x1F464EF988465A81, i32, x: f32, y: f32, z: f32, p3: f32, p4: i32);
	native!(disable_hospital_restart, 0xC8535819C450EBA8, (), hospital_index: i32, toggle: bool);
	native!(add_police_restart, 0x452736765B31FC4B, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: i32);
	native!(disable_police_restart, 0x23285DED6EBD7EA3, (), police_index: i32, toggle: bool);
	native!(_set_restart_custom_position, 0x706B5EDCAA7FA663, (), x: f32, y: f32, z: f32, heading: f32);
	native!(_clear_restart_custom_position, 0xA2716D40842EAF79, ());
	native!(pause_death_arrest_restart, 0x2C2B3493FBF51C71, (), toggle: bool);
	native!(ignore_next_restart, 0x21FFB63D8C615361, (), toggle: bool);
	native!(set_fade_out_after_death, 0x4A18E01DF2C87B86, (), toggle: bool);
	native!(set_fade_out_after_arrest, 0x1E0B4DC0D990A4E7, (), toggle: bool);
	native!(set_fade_in_after_death_arrest, 0xDA66D2796BA33F12, (), toggle: bool);
	native!(set_fade_in_after_load, 0xF3D78F59DFE18D79, (), toggle: bool);
	native!(register_save_house, 0xC0714D0A7EEECA54, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: &mut i32, p5: i32, p6: i32);
	native!(set_save_house, 0x4F548CABEAE553BC, (), p0: i32, p1: bool, p2: bool);
	native!(override_save_house, 0x1162EA8AE9D24EEA, bool, p0: bool, p1: f32, p2: f32, p3: f32, p4: f32, p5: bool, p6: f32, p7: f32);
	native!(_0xa4a0065e39c9f25c, 0xA4A0065E39C9F25C, bool, p0: &mut Vec3, p1: &mut f32, fade_in_after_load: &mut bool, p3: &mut bool);
	native!(do_auto_save, 0x50EEAAD86232EE55, ());
	native!(get_is_auto_save_off, 0x6E04F06094C87047, bool);
	native!(is_auto_save_in_progress, 0x69240733738C19A0, bool);
	native!(_0x2107a3773771186d, 0x2107A3773771186D, bool);
	native!(_0x06462a961e94b67c, 0x06462A961E94B67C, ());
	native!(begin_replay_stats, 0xE0E500246FF73D66, (), p0: i32, p1: i32);
	native!(add_replay_stat_value, 0x69FE6DC87BD2A5E9, (), value: i32);
	native!(end_replay_stats, 0xA23E821FBDF8A5F2, ());
	native!(_0xd642319c54aadeb6, 0xD642319C54AADEB6, i32);
	native!(_0x5b1f2e327b6b6fe1, 0x5B1F2E327B6B6FE1, i32);
	native!(get_replay_stat_mission_type, 0x2B626A0150E4D449, i32);
	native!(get_replay_stat_count, 0xDC9274A7EF6B2867, i32);
	native!(get_replay_stat_at_index, 0x8098C8D6597AAE18, i32, index: i32);
	native!(clear_replay_stats, 0x1B1AB132A16FDA55, ());
	native!(_0x72de52178c291cb5, 0x72DE52178C291CB5, i32);
	native!(_0x44a0bdc559b35f6e, 0x44A0BDC559B35F6E, i32);
	native!(_0xeb2104e905c6f2e9, 0xEB2104E905C6F2E9, i32);
	native!(_0x2b5e102e4a42f2bf, 0x2B5E102E4A42F2BF, i32);
	native!(is_memory_card_in_use, 0x8A75CE2956274ADD, bool);
	native!(shoot_single_bullet_between_coords, 0x867654CBC7606F2C, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, damage: i32, p7: bool, weapon_hash: Hash, owner_ped: Ped, is_audible: bool, is_invisible: bool, speed: f32);
	native!(shoot_single_bullet_between_coords_ignore_entity, 0xE3A7742E0B7A2F8B, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, damage: i32, p7: bool, weapon_hash: Hash, owner_ped: Ped, is_audible: bool, is_invisible: bool, speed: f32, entity: Entity, p14: i32);
	native!(shoot_single_bullet_between_coords_ignore_entity_new, 0xBFE5756E7407064A, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, damage: i32, p7: bool, weapon_hash: Hash, owner_ped: Ped, is_audible: bool, is_invisible: bool, speed: f32, entity: Entity, p14: bool, p15: bool, p16: bool, p17: bool, p18: i32, p19: i32);
	native!(get_model_dimensions, 0x03E8D3D5F549087A, (), model_hash: Hash, minimum: &mut Vec3, maximum: &mut Vec3);
	native!(set_fake_wanted_level, 0x1454F2448DE30163, (), fake_wanted_level: i32);
	native!(get_fake_wanted_level, 0x4C9296CBCD1B971E, i32);
	native!(is_bit_set, 0xA921AA820C25702F, bool, address: i32, offset: i32);
	native!(using_mission_creator, 0xF14878FC50BEC6EE, (), toggle: bool);
	native!(allow_mission_creator_warp, 0xDEA36202FC3382DF, (), toggle: bool);
	native!(set_minigame_in_progress, 0x19E00D7322C6F85B, (), toggle: bool);
	native!(is_minigame_in_progress, 0x2B4A15E44DE0F478, bool);
	native!(is_this_a_minigame_script, 0x7B30F65D7B710098, bool);
	native!(is_sniper_inverted, 0x61A23B7EDA9BDA24, bool);
	native!(should_use_metric_measurements, 0xD3D15555431AB793, bool);
	native!(get_profile_setting, 0xC488FF2356EA7791, i32, profile_setting: i32);
	native!(are_strings_equal, 0x0C515FAB3FF9EA92, bool, string1: *const c_char, string2: *const c_char);
	native!(compare_strings, 0x1E34710ECD4AB0EB, i32, str1: *const c_char, str2: *const c_char, match_case: bool, max_length: i32);
	native!(absi, 0xF0D31AD191A74F87, i32, value: i32);
	native!(absf, 0x73D57CFFDD12C355, f32, value: f32);
	native!(is_sniper_bullet_in_area, 0xFEFCF11B01287125, bool, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
	native!(is_projectile_in_area, 0x5270A8FBC098C3F8, bool, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, owned_by_player: bool);
	native!(is_projectile_type_in_area, 0x2E0DC353342C4A6D, bool, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, r#type: i32, p7: bool);
	native!(is_projectile_type_in_angled_area, 0xF0BC12401061DEA0, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: i32, p8: bool);
	native!(_is_projectile_type_in_radius, 0x34318593248C8FB2, bool, p0: f32, p1: f32, p2: f32, p3: i32, p4: f32, p5: bool);
	native!(_get_is_projectile_type_in_area, 0x8D7A43EC6A5FEA45, i32, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32);
	native!(_get_projectile_near_ped_coords, 0xDFB4138EEFED7B81, bool, ped: Ped, weapon_hash: Hash, radius: f32, entity: &mut Entity, p4: bool);
	native!(_get_projectile_near_ped, 0x82FDE6A57EE4EE44, bool, ped: Ped, weaponhash: Hash, p2: f32, p3: f32, p4: f32, p5: bool);
	native!(is_bullet_in_angled_area, 0x1A8B5F3C01E2B477, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: bool);
	native!(is_bullet_in_area, 0x3F2023999AD51C1F, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: bool);
	native!(is_bullet_in_box, 0xDE0F6D7450D37351, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: bool);
	native!(has_bullet_impacted_in_area, 0x9870ACFB89A90995, bool, x: f32, y: f32, z: f32, p3: f32, p4: bool, p5: bool);
	native!(has_bullet_impacted_in_box, 0xDC8C5D7CFEAB8394, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: bool, p7: bool);
	native!(is_orbis_version, 0xA72BC0B675B1519E, bool);
	native!(is_durango_version, 0x4D982ADB1978442D, bool);
	native!(is_xbox360_version, 0xF6201B4DAF662A9D, bool);
	native!(is_ps3_version, 0xCCA1072C29D096C2, bool);
	native!(is_pc_version, 0x48AF36444B965238, bool);
	native!(is_aussie_version, 0x9F1935CA1F724008, bool);
	native!(is_string_null, 0xF22B6C47C6EAB066, bool, string: *const c_char);
	native!(is_string_null_or_empty, 0xCA042B6957743895, bool, string: *const c_char);
	native!(string_to_int, 0x5A5F40FE637EB584, bool, string: *const c_char, out_integer: &mut i32);
	native!(set_bits_in_range, 0x8EF07E15701D61ED, (), var: &mut i32, range_start: i32, range_end: i32, p3: i32);
	native!(get_bits_in_range, 0x53158863FCC0893A, i32, var: i32, range_start: i32, range_end: i32);
	native!(add_stunt_jump, 0x1A992DA297A4630C, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: f32, p10: f32, p11: f32, p12: f32, p13: f32, p14: f32, p15: i32, p16: i32, p17: i32);
	native!(add_stunt_jump_angled, 0xBBE5D803A5360CBF, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: f32, p10: f32, p11: f32, p12: f32, p13: f32, p14: f32, p15: f32, p16: f32, p17: i32, p18: i32, p19: i32);
	native!(_0xfb80ab299d2ee1bd, 0xFB80AB299D2EE1BD, (), toggle: bool);
	native!(delete_stunt_jump, 0xDC518000E39DAE1F, (), p0: i32);
	native!(enable_stunt_jump_set, 0xE369A5783B866016, (), p0: i32);
	native!(disable_stunt_jump_set, 0xA5272EBEDD4747F6, (), p0: i32);
	native!(set_stunt_jumps_can_trigger, 0xD79185689F8FD5DF, (), toggle: bool);
	native!(is_stunt_jump_in_progress, 0x7A3F19700A4D0525, bool);
	native!(is_stunt_jump_message_showing, 0x2272B0A1343129F4, bool);
	native!(get_num_successful_stunt_jumps, 0x996DD1E1E02F1008, i32);
	native!(get_total_successful_stunt_jumps, 0x6856EC3D35C81EA4, i32);
	native!(cancel_stunt_jump, 0xE6B7B0ACD4E4B75E, ());
	native!(set_game_paused, 0x577D1284D6873711, (), toggle: bool);
	native!(set_this_script_can_be_paused, 0xAA391C728106F7AF, (), toggle: bool);
	native!(set_this_script_can_remove_blips_created_by_any_script, 0xB98236CAAECEF897, (), toggle: bool);
	native!(_has_button_combination_just_been_entered, 0x071E2A839DE82D90, bool, hash: Hash, amount: i32);
	native!(_has_cheat_string_just_been_entered, 0x557E43C447E700A8, bool, hash: Hash);
	native!(set_instance_priority_mode, 0x9BAE5AD2508DF078, (), p0: i32);
	native!(set_instance_priority_hint, 0xC5F0A8EBD3F361CE, (), flag: i32);
	native!(is_frontend_fading, 0x7EA2B6AF97ECA6ED, bool);
	native!(populate_now, 0x7472BB270D7B4F3E, ());
	native!(get_index_of_current_level, 0xCBAD6729F7B1F4FC, i32);
	native!(set_gravity_level, 0x740E14FAD5842351, (), level: i32);
	native!(start_save_data, 0xA9575F812C6A7997, (), p0: &mut i32, p1: i32, p2: bool);
	native!(stop_save_data, 0x74E20C9145FB66FD, ());
	native!(_0xa09f896ce912481f, 0xA09F896CE912481F, i32, p0: bool);
	native!(register_int_to_save, 0x34C9EE5986258415, (), p0: &mut i32, name: *const c_char);
	native!(_register_int64_to_save, 0xA735353C77334EA0, (), p0: &mut i32, name: *const c_char);
	native!(register_enum_to_save, 0x10C2FA78D0E128A1, (), p0: &mut i32, name: *const c_char);
	native!(register_float_to_save, 0x7CAEC29ECB5DFEBB, (), p0: &mut i32, name: *const c_char);
	native!(register_bool_to_save, 0xC8F4131414C835A1, (), p0: &mut i32, name: *const c_char);
	native!(register_text_label_to_save, 0xEDB1232C5BEAE62F, (), p0: &mut i32, name: *const c_char);
	native!(_register_text_label_to_save_2, 0x6F7794F28C6B2535, (), p0: &mut i32, name: *const c_char);
	native!(_0x48f069265a0e4bec, 0x48F069265A0E4BEC, (), p0: &mut i32, name: *const c_char);
	native!(_0x8269816f6cfd40f8, 0x8269816F6CFD40F8, (), p0: &mut i32, name: *const c_char);
	native!(_0xfaa457ef263e8763, 0xFAA457EF263E8763, (), p0: &mut i32, name: *const c_char);
	native!(start_save_struct_with_size, 0xBF737600CDDBEADD, (), p0: &mut i32, size: i32, struct_name: *const c_char);
	native!(stop_save_struct, 0xEB1774DF12BB9F12, ());
	native!(start_save_array_with_size, 0x60FE567DF1B1AF9D, (), p0: &mut i32, size: i32, array_name: *const c_char);
	native!(stop_save_array, 0x04456F95153C6BE4, ());
	native!(_copy_memory, 0x213AEB2B90CBA7AC, (), dst: &mut i32, src: &mut i32, size: i32);
	native!(enable_dispatch_service, 0xDC0F817884CDD856, (), dispatch_service: i32, toggle: bool);
	native!(block_dispatch_service_resource_creation, 0x9B2BD3773123EA2F, (), dispatch_service: i32, toggle: bool);
	native!(_get_num_dispatched_units_for_player, 0xEB4A0C2D56441717, i32, dispatch_service: i32);
	native!(create_incident, 0x3F892CAF67444AE7, bool, dispatch_service: i32, x: f32, y: f32, z: f32, num_units: i32, radius: f32, out_incident_id: &mut i32, p7: i32, p8: i32);
	native!(create_incident_with_entity, 0x05983472F0494E60, bool, dispatch_service: i32, ped: Ped, num_units: i32, radius: f32, out_incident_id: &mut i32, p5: i32, p6: i32);
	native!(delete_incident, 0x556C1AA270D5A207, (), incident_id: i32);
	native!(is_incident_valid, 0xC8BC6461E629BEAA, bool, incident_id: i32);
	native!(set_incident_requested_units, 0xB08B85D860E7BA3C, (), incident_id: i32, dispatch_service: i32, num_units: i32);
	native!(_set_incident_unk, 0xD261BA3E7E998072, (), incident_id: i32, p1: f32);
	native!(find_spawn_point_in_direction, 0x6874E2190B0C1972, bool, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, distance: f32, spawn_point: &mut Vec3);
	native!(add_pop_multiplier_area, 0x67F6413D3220E18D, i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, p6: f32, p7: f32, p8: bool, p9: bool);
	native!(does_pop_multiplier_area_exist, 0x1327E2FE9746BAEE, bool, id: i32);
	native!(remove_pop_multiplier_area, 0xB129E447A2EDA4BF, (), id: i32, p1: bool);
	native!(_is_pop_multiplier_area_unk, 0x1312F4B242609CE3, bool, id: i32);
	native!(add_pop_multiplier_sphere, 0x32C7A7E8C43A1F80, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: bool, p7: bool);
	native!(does_pop_multiplier_sphere_exist, 0x171BAFB3C60389F4, bool, id: i32);
	native!(remove_pop_multiplier_sphere, 0xE6869BECDD8F2403, (), id: i32, p1: bool);
	native!(enable_tennis_mode, 0x28A04B411933F8A6, (), ped: Ped, toggle: bool, p2: bool);
	native!(is_tennis_mode, 0x5D5479D115290C3F, bool, ped: Ped);
	native!(play_tennis_swing_anim, 0xE266ED23311F24D4, (), ped: Ped, anim_dict: *const c_char, anim_name: *const c_char, p3: f32, p4: f32, p5: bool);
	native!(get_tennis_swing_anim_complete, 0x17DF68D720AA77F8, bool, ped: Ped);
	native!(_0x19bfed045c647c49, 0x19BFED045C647C49, bool, ped: Ped);
	native!(_0xe95b0c7d5ba3b96b, 0xE95B0C7D5BA3B96B, bool, ped: Ped);
	native!(play_tennis_dive_anim, 0x8FA9C42FC5D7C64B, (), ped: Ped, p1: i32, p2: f32, p3: f32, p4: f32, p5: bool);
	native!(_0x54f157e0336a3822, 0x54F157E0336A3822, (), ped: Ped, p1: *const c_char, p2: f32);
	native!(set_dispatch_spawn_location, 0xD10F442036302D50, (), x: f32, y: f32, z: f32);
	native!(reset_dispatch_ideal_spawn_distance, 0x77A84429DD9F0A15, ());
	native!(set_dispatch_ideal_spawn_distance, 0x6FE601A64180D423, (), p0: f32);
	native!(reset_dispatch_time_between_spawn_attempts, 0xEB2DB0CAD13154B3, (), p0: i32);
	native!(set_dispatch_time_between_spawn_attempts, 0x44F7CBC1BEB3327D, (), p0: i32, p1: f32);
	native!(set_dispatch_time_between_spawn_attempts_multiplier, 0x48838ED9937A15D1, (), p0: i32, p1: f32);
	native!(_add_dispatch_spawn_blocking_angled_area, 0x918C7B2D2FF3928B, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32);
	native!(_add_dispatch_spawn_blocking_area, 0x2D4259F1FEB81DA9, i32, p0: f32, p1: f32, p2: f32, p3: f32);
	native!(remove_dispatch_spawn_blocking_area, 0x264AC28B01B353A5, (), p0: i32);
	native!(reset_dispatch_spawn_blocking_areas, 0xAC7BFD5C1D83EA75, ());
	native!(_0xd9f692d349249528, 0xD9F692D349249528, ());
	native!(_0xe532ec1a63231b4f, 0xE532EC1A63231B4F, (), p0: i32, p1: i32);
	native!(_add_tactical_analysis_point, 0xB8721407EE9C3FF6, (), p0: i32, p1: i32, p2: i32);
	native!(_clear_tactical_analysis_points, 0xB3CD58CCA6CDA852, ());
	native!(_0x2587a48bc88dfadf, 0x2587A48BC88DFADF, (), p0: bool);
	native!(display_onscreen_keyboard_with_longer_initial_string, 0xCA78CFA0366592FE, (), p0: i32, window_title: *const c_char, p2: &mut i32, default_text: *const c_char, default_concat1: *const c_char, default_concat2: *const c_char, default_concat3: *const c_char, default_concat4: *const c_char, default_concat5: *const c_char, default_concat6: *const c_char, default_concat7: *const c_char, max_input_length: i32);
	native!(display_onscreen_keyboard, 0x00DC833F2568DBF6, (), p0: i32, window_title: *const c_char, p2: *const c_char, default_text: *const c_char, default_concat1: *const c_char, default_concat2: *const c_char, default_concat3: *const c_char, max_input_length: i32);
	native!(update_onscreen_keyboard, 0x0CF2B696BBF945AE, i32);
	native!(get_onscreen_keyboard_result, 0x8362B09B91893647, *const c_char);
	native!(_cancel_onscreen_keyboard, 0x58A39BE597CE99CD, ());
	native!(_0x3ed1438c1f5c6612, 0x3ED1438C1F5C6612, (), p0: i32);
	native!(_remove_stealth_kill, 0xA6A12939F16D85BE, (), hash: Hash, p1: bool);
	native!(_0x1eae0a6e978894a2, 0x1EAE0A6E978894A2, (), p0: i32, p1: bool);
	native!(set_explosive_ammo_this_frame, 0xA66C71C98D5F2CFB, (), player: Player);
	native!(set_fire_ammo_this_frame, 0x11879CDD803D30F4, (), player: Player);
	native!(set_explosive_melee_this_frame, 0xFF1BED81BFDC0FE0, (), player: Player);
	native!(set_super_jump_this_frame, 0x57FFF03E423A4C0B, (), player: Player);
	native!(_0x438822c279b73b93, 0x438822C279B73B93, (), p0: i32);
	native!(_0xa1183bcfee0f93d1, 0xA1183BCFEE0F93D1, (), p0: i32);
	native!(_0x6fddf453c0c756ec, 0x6FDDF453C0C756EC, bool);
	native!(_0xfb00ca71da386228, 0xFB00CA71DA386228, ());
	native!(are_profile_settings_valid, 0x5AA3BEFA29F03AD4, bool);
	native!(_0xe3d969d2785ffb5e, 0xE3D969D2785FFB5E, ());
	native!(_reset_localplayer_state, 0xC0AA53F866B3134D, ());
	native!(_0x0a60017f841a54f2, 0x0A60017F841A54F2, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x1ff6bf9a63e5757f, 0x1FF6BF9A63E5757F, ());
	native!(_0x1bb299305c3e8c13, 0x1BB299305C3E8C13, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x8ef5573a1f801a5c, 0x8EF5573A1F801A5C, bool, p0: i32, p1: &mut i32, p2: &mut i32);
	native!(_start_benchmark_recording, 0x92790862E36C2ADA, ());
	native!(_stop_benchmark_recording, 0xC7DB36C24634F52B, ());
	native!(_reset_benchmark_recording, 0x437138B6A830166A, ());
	native!(_save_benchmark_recording, 0x37DEB0AA183FB6D8, ());
	native!(_ui_is_singleplayer_pause_menu_active, 0xEA2F2061875EED90, bool);
	native!(_landing_menu_is_active, 0x3BBBD13E5041A79E, bool);
	native!(_is_command_line_benchmark_value_set, 0xA049A5BE0F04F2F8, bool);
	native!(_get_benchmark_iterations_from_command_line, 0x4750FC27570311EC, i32);
	native!(_get_benchmark_pass_from_command_line, 0x1B2366C3F2A5C8DF, i32);
	native!(_restart_game, 0xE574A662ACAEFBB1, ());
	native!(_force_social_club_update, 0xEB6891F03362FB12, ());
	native!(_has_async_install_finished, 0x14832BF2ABA53FC5, bool);
	native!(_cleanup_async_install, 0xC79AE21974B01FB2, ());
	native!(_is_in_power_saving_mode, 0x684A41975F077262, bool);
	native!(_get_power_saving_mode_duration, 0xABB2FA71C83A1B72, i32);
	native!(_set_player_is_in_animal_form, 0x4EBB7E87AA0DBED4, (), toggle: bool);
	native!(get_is_player_in_animal_form, 0x9689123E3F213AA5, bool);
	native!(_set_player_rockstar_editor_disabled, 0x9D8D44ADBBA61EF2, (), toggle: bool);
	native!(_0x23227df0b2115469, 0x23227DF0B2115469, ());
	native!(_0xd10282b6e3751ba0, 0xD10282B6E3751BA0, i32);
	native!(_0x693478acbd7f18e7, 0x693478ACBD7F18E7, ());
}

pub mod mobile {
	use super::*;

	native!(create_mobile_phone, 0xA4E8E696C532FBC7, (), phone_type: i32);
	native!(destroy_mobile_phone, 0x3BC861DF703E5097, ());
	native!(set_mobile_phone_scale, 0xCBDD322A73D6D932, (), scale: f32);
	native!(set_mobile_phone_rotation, 0xBB779C0CA917E865, (), rot_x: f32, rot_y: f32, rot_z: f32, p3: i32);
	native!(get_mobile_phone_rotation, 0x1CEFB61F193070AE, (), rotation: &mut Vec3, p1: Vehicle);
	native!(set_mobile_phone_position, 0x693A5C6D6734085B, (), pos_x: f32, pos_y: f32, pos_z: f32);
	native!(get_mobile_phone_position, 0x584FDFDA48805B86, (), position: &mut Vec3);
	native!(script_is_moving_mobile_phone_offscreen, 0xF511F759238A5122, (), toggle: bool);
	native!(can_phone_be_seen_on_screen, 0xC4E2813898C97A4B, bool);
	native!(_set_mobile_phone_unk, 0x375A706A5C2FD084, (), toggle: bool);
	native!(_cell_cam_move_finger, 0x95C9E72F3D7DEC9B, (), direction: i32);
	native!(_cell_cam_set_lean, 0x44E44169EF70138E, (), toggle: bool);
	native!(cell_cam_activate, 0xFDE8F069C542D126, (), p0: bool, p1: bool);
	native!(_cell_cam_disable_this_frame, 0x015C49A93E3E086E, (), toggle: bool);
	native!(_0xa2ccbe62cd4c91a4, 0xA2CCBE62CD4C91A4, (), toggle: &mut i32);
	native!(_0x1b0b4aeed5b9b41c, 0x1B0B4AEED5B9B41C, (), p0: f32);
	native!(_0x53f4892d18ec90a4, 0x53F4892D18EC90A4, (), p0: f32);
	native!(_0x3117d84efa60f77b, 0x3117D84EFA60F77B, (), p0: f32);
	native!(_0x15e69e2802c24b8d, 0x15E69E2802C24B8D, (), p0: f32);
	native!(_0xac2890471901861c, 0xAC2890471901861C, (), p0: f32);
	native!(_0xd6ade981781fca09, 0xD6ADE981781FCA09, (), p0: f32);
	native!(_0xf1e22dc13f5eebad, 0xF1E22DC13F5EEBAD, (), p0: f32);
	native!(_0x466da42c89865553, 0x466DA42C89865553, (), p0: f32);
	native!(cell_cam_is_char_visible_no_face_check, 0x439E9BC95B7E7FBE, bool, entity: Entity);
	native!(get_mobile_phone_render_id, 0xB4A53E05F68B6FA1, (), render_id: &mut i32);
}

pub mod money {
	use super::*;

	native!(network_initialize_cash, 0x3DA5ECD1A56CBA6D, (), wallet: i32, bank: i32);
	native!(network_delete_character, 0x05A50AF38947EB8D, (), character_slot: i32, p1: bool, p2: bool);
	native!(_network_manual_delete_character, 0x821418C727FCACD7, (), character_slot: i32);
	native!(_network_get_is_high_earner, 0xFB2456B2040A6A67, bool);
	native!(network_clear_character_wallet, 0xA921DED15FDF28F5, (), character_slot: i32);
	native!(network_give_player_jobshare_cash, 0xFB18DF9CB95E0105, (), amount: i32, network_handle: &mut i32);
	native!(network_receive_player_jobshare_cash, 0x56A3B51944C50598, (), value: i32, network_handle: &mut i32);
	native!(network_can_share_job_cash, 0x1C2473301B1C66BA, bool);
	native!(network_refund_cash, 0xF9C812CD7C46E817, (), index: i32, context: *const c_char, reason: *const c_char, unk: bool);
	native!(_network_deduct_cash, 0x18B7AE224B087E26, (), amount: i32, p1: *const c_char, p2: *const c_char, p3: bool, p4: bool, p5: bool);
	native!(network_money_can_bet, 0x81404F3DC124FE5B, bool, amount: i32, p1: bool, p2: bool);
	native!(network_can_bet, 0x3A54E33660DED67F, bool, amount: i32);
	native!(network_can_buy_lottery_ticket, 0xC62DD18375C99130, bool, cost: i32);
	native!(_network_casino_can_use_gambling_type, 0x158C16F5E4CF41F8, bool, hash: Hash);
	native!(_network_casino_can_purchase_chips_with_pvc, 0x394DCDB9E836B7A9, bool);
	native!(_network_casino_can_gamble, 0xF62F6D9528358FE4, bool, p0: i32);
	native!(_network_casino_can_purchase_chips_with_pvc_2, 0x8968D4D8C6C40C11, bool);
	native!(_network_casino_purchase_chips, 0x3BD101471C7F9EEC, bool, p0: i32, p1: i32);
	native!(_network_casino_sell_chips, 0xED44897CB336F480, bool, p0: i32, p1: i32);
	native!(_0xcd0f5b5d932ae473, 0xCD0F5B5D932AE473, ());
	native!(_can_pay_goon, 0x9777734DAD16992F, bool, p0: i32, p1: i32, amount: i32, p3: &mut i32);
	native!(_network_earn_from_cashing_out, 0xEFE9C9A1651B81E6, (), amount: i32);
	native!(network_earn_from_pickup, 0xED1517D3AF17C698, (), amount: i32);
	native!(_network_earn_from_gang_pickup, 0xA03D4ACE0A3284CE, (), amount: i32);
	native!(_network_earn_from_assassinate_target_killed, 0xFA700D8A9905F78A, (), amount: i32);
	native!(_network_earn_from_armour_truck, 0xF514621E8EA463D0, (), amount: i32);
	native!(network_earn_from_crate_drop, 0xB1CC1B9EC3007A2A, (), amount: i32);
	native!(network_earn_from_betting, 0x827A5BA1A44ACA6D, (), amount: i32, p1: *const c_char);
	native!(network_earn_from_job, 0xB2CC4836834E8A98, (), amount: i32, p1: *const c_char);
	native!(_network_earn_from_job_x2, 0xDEBBF584665411D0, (), amount: i32, p1: *const c_char);
	native!(_network_earn_from_premium_job, 0xC8407624CEF2354B, (), amount: i32, p1: *const c_char);
	native!(network_earn_from_bend_job, 0x61326EE6DF15B0CA, (), amount: i32, heist_hash: *const c_char);
	native!(network_earn_from_challenge_win, 0x2B171E6B2F64D8DF, (), p0: i32, p1: &mut i32, p2: bool);
	native!(network_earn_from_bounty, 0x131BB5DA15453ACF, (), amount: i32, network_handle: &mut i32, p2: &mut i32, p3: i32);
	native!(network_earn_from_import_export, 0xF92A014A634442D6, (), amount: i32, model_hash: Hash);
	native!(network_earn_from_holdups, 0x45B8154E077D9E4D, (), amount: i32);
	native!(network_earn_from_property, 0x849648349D77F5C5, (), amount: i32, property_name: Hash);
	native!(network_earn_from_ai_target_kill, 0x515B4A22E4D3C6D7, (), p0: i32, p1: i32);
	native!(network_earn_from_not_badsport, 0x4337511FA8221D36, (), amount: i32);
	native!(network_earn_from_rockstar, 0x02CE1D6AC0FC73EA, (), amount: i32);
	native!(network_earn_from_vehicle, 0xB539BD8A4C1EECF8, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32);
	native!(network_earn_from_personal_vehicle, 0x3F4D00167E41E0AD, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32);
	native!(network_earn_from_daily_objectives, 0x6EA318C91C1A8786, (), p0: i32, p1: *const c_char, p2: i32);
	native!(network_earn_from_ambient_job, 0xFB6DB092FBAE29E6, (), p0: i32, p1: *const c_char, p2: &mut i32);
	native!(_0xd20d79671a598594, 0xD20D79671A598594, (), p0: i32, p1: i32, p2: i32);
	native!(network_earn_from_job_bonus, 0x6816FB4416760775, (), p0: i32, p1: &mut i32, p2: &mut i32);
	native!(_0x9d4fdbb035229669, 0x9D4FDBB035229669, (), p0: i32, p1: i32, p2: i32);
	native!(_0x11b0a20c493f7e36, 0x11B0A20C493F7E36, (), p0: i32, p1: i32, p2: i32);
	native!(_0xcda1c62be2777802, 0xCDA1C62BE2777802, (), p0: i32, p1: i32, p2: i32);
	native!(_0x08b0ca7a6ab3ac32, 0x08B0CA7A6AB3AC32, (), p0: i32, p1: i32, p2: i32);
	native!(_0x0cb1be0633c024a8, 0x0CB1BE0633C024A8, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_earn_from_warehouse, 0x3E4ADAFF1830F146, (), amount: i32, id: i32);
	native!(_network_earn_from_contraband, 0xECA658CE2A4E5A72, (), amount: i32, p1: i32);
	native!(_0x84c0116d012e8fc2, 0x84C0116D012E8FC2, (), p0: i32);
	native!(_0x6b7e4fb50d5f3d65, 0x6B7E4FB50D5F3D65, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_0x31ba138f6304fb9f, 0x31BA138F6304FB9F, (), p0: i32, p1: i32);
	native!(_0x55a1e095db052fa5, 0x55A1E095DB052FA5, (), p0: i32, p1: i32);
	native!(_network_earn_from_business_product, 0x8586789730B10CAF, (), amount: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_earn_from_vehicle_export, 0xEDEAD9A91EC768B3, (), amount: i32, p1: i32, p2: i32);
	native!(_network_earn_from_smuggling, 0xDEE612F2D71B0308, (), amount: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xf6b170f9a02e9e87, 0xF6B170F9A02E9E87, (), p0: i32);
	native!(_0x42fce14f50f27291, 0x42FCE14F50F27291, (), p0: i32);
	native!(_0xa75eac69f59e96e7, 0xA75EAC69F59E96E7, (), p0: i32);
	native!(_0xc5156361f26e2212, 0xC5156361F26E2212, (), p0: i32);
	native!(_0x0b39cf0d53f1c883, 0x0B39CF0D53F1C883, (), p0: i32, p1: i32, p2: i32);
	native!(_0x1fda0aa679c9919b, 0x1FDA0AA679C9919B, (), p0: i32);
	native!(_0xfffba1b1f7c0b6f4, 0xFFFBA1B1F7C0B6F4, (), p0: i32);
	native!(network_can_spend_money, 0xAB3CAA6B422164DA, bool, p0: i32, p1: bool, p2: bool, p3: bool, p4: i32, p5: i32);
	native!(_network_can_spend_money_2, 0x7303E27CC6532080, bool, p0: i32, p1: bool, p2: bool, p3: bool, p4: &mut i32, p5: i32, p6: i32);
	native!(network_buy_item, 0xF0077C797F66A355, (), amount: i32, item: Hash, p2: i32, p3: i32, p4: bool, item_name: *const c_char, p6: i32, p7: i32, p8: i32, p9: bool);
	native!(network_spent_taxi, 0x17C3A7D31EAE39F9, (), amount: i32, p1: bool, p2: bool);
	native!(network_pay_employee_wage, 0x5FD5ED82CBBE9989, (), p0: i32, p1: bool, p2: bool);
	native!(network_pay_utility_bill, 0xAFE08B35EC0C9EAE, (), amount: i32, p1: bool, p2: bool);
	native!(network_pay_match_entry_fee, 0x9346E14F2AF74D46, (), amount: i32, match_id: *const c_char, p2: bool, p3: bool);
	native!(network_spent_betting, 0x1C436FD11FFA692F, (), amount: i32, p1: i32, match_id: *const c_char, p3: bool, p4: bool);
	native!(_network_spent_wager, 0xD99DB210089617FE, (), p0: i32, p1: i32, amount: i32);
	native!(network_spent_in_stripclub, 0xEE99784E4467689C, (), p0: i32, p1: bool, p2: i32, p3: bool);
	native!(network_buy_healthcare, 0xD9B067E55253E3DD, (), cost: i32, p1: bool, p2: bool);
	native!(network_buy_airstrike, 0x763B4BD305338F19, (), cost: i32, p1: bool, p2: bool);
	native!(network_buy_backup_gang, 0xA3EDDAA42411D3B9, (), p0: i32, p1: i32, p2: bool, p3: bool);
	native!(network_buy_heli_strike, 0x81AA4610E3FD3A69, (), cost: i32, p1: bool, p2: bool);
	native!(network_spent_ammo_drop, 0xB162DC95C0A3317B, (), p0: i32, p1: bool, p2: bool);
	native!(network_buy_bounty, 0x7B718E197453F2D9, (), amount: i32, victim: Player, p2: bool, p3: bool);
	native!(network_buy_property, 0x650A08A280870AF6, (), cost: i32, property_name: Hash, p2: bool, p3: bool);
	native!(network_buy_smokes, 0x75AF80E61248EEBD, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_heli_pickup, 0x7BF1D73DB2ECA492, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_boat_pickup, 0x524EE43A37232C00, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_bull_shark, 0xA6DD8458CE24012C, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_cash_drop, 0x289016EC778D60E0, (), amount: i32, p1: bool, p2: bool);
	native!(network_spent_hire_mugger, 0xE404BFB981665BF0, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_robbed_by_mugger, 0x995A65F15F581359, (), amount: i32, p1: bool, p2: bool);
	native!(network_spent_hire_mercenary, 0xE7B80E2BF9D80BD6, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_buy_wantedlevel, 0xE1B13771A843C4F6, (), p0: i32, p1: &mut i32, p2: bool, p3: bool);
	native!(network_spent_buy_offtheradar, 0xA628A745E2275C5D, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_buy_reveal_players, 0x6E176F1B18BC0637, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_carwash, 0xEC03C719DB2F4306, (), p0: i32, p1: i32, p2: i32, p3: bool, p4: bool);
	native!(network_spent_cinema, 0x6B38ECB05A63A685, (), p0: i32, p1: i32, p2: bool, p3: bool);
	native!(network_spent_telescope, 0x7FE61782AD94CC09, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_holdups, 0xD9B86B9872039763, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_buy_passive_mode, 0x6D3A430D1A809179, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_bank_interest, 0xCA230C9682556CF1, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_prostitutes, 0xB21B89501CFAC79E, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_arrest_bail, 0x812F5488B1B2A299, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_pay_vehicle_insurance_premium, 0x9FF28D88C766E3E8, (), amount: i32, vehicle_model: Hash, network_handle: &mut i32, not_bankrupt: bool, has_the_money: bool);
	native!(network_spent_call_player, 0xACDE7185B374177C, (), p0: i32, p1: &mut i32, p2: bool, p3: bool);
	native!(network_spent_bounty, 0x29B260B84947DFCC, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_from_rockstar, 0x6A445B64ED7ABEB5, (), p0: i32, p1: bool, p2: bool);
	native!(_0x9b5016a6433a68c5, 0x9B5016A6433A68C5, i32);
	native!(process_cash_gift, 0x20194D48EAEC9A41, *const c_char, p0: &mut i32, p1: &mut i32, p2: *const c_char);
	native!(network_spent_player_healthcare, 0x7C99101F7FCE2EE5, (), p0: i32, p1: i32, p2: bool, p3: bool);
	native!(network_spent_no_cops, 0xD5BB406F4E04019F, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_request_job, 0x8204DA7934DF3155, (), p0: i32, p1: bool, p2: bool);
	native!(network_spent_request_heist, 0x9D26502BB97BFE62, (), p0: i32, p1: bool, p2: bool);
	native!(network_buy_lottery_ticket, 0xD987F2489969668C, (), p0: i32, p1: i32, p2: bool, p3: bool);
	native!(network_buy_fairground_ride, 0x8A7B3952DD64D2B5, (), amount: i32, p1: i32, p2: bool, p3: bool);
	native!(_0x7c4fccd2e4deb394, 0x7C4FCCD2E4DEB394, bool);
	native!(_network_spent_job_skip, 0x28F174A67B8D0C2F, (), amount: i32, match_id: *const c_char, p2: bool, p3: bool);
	native!(_network_spent_boss, 0xFFBE02CD385356BD, bool, amount: i32, p1: bool, p2: bool);
	native!(_network_spent_pay_goon, 0x08A1B82B91900682, (), p0: i32, p1: i32, amount: i32);
	native!(_0xdbc966a01c02bca7, 0xDBC966A01C02BCA7, (), p0: i32, p1: i32, p2: i32);
	native!(_network_spent_move_yacht, 0xE7DF4E0545DFB56E, (), amount: i32, p1: bool, p2: bool);
	native!(_0xfc4ee00a7b3bfb76, 0xFC4EE00A7B3BFB76, (), p0: i32, p1: i32, p2: i32);
	native!(_network_buy_contraband, 0x30FD873ECE50E9F6, (), p0: i32, p1: i32, p2: Hash, p3: bool, p4: bool);
	native!(_network_spent_vip_utility_charges, 0x5182A339A3474510, (), p0: i32, p1: i32, p2: i32);
	native!(_0x112209ce0290c03a, 0x112209CE0290C03A, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xed5fd7af10f5e262, 0xED5FD7AF10F5E262, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x0d30eb83668e63c5, 0x0D30EB83668E63C5, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xb49eca122467d05f, 0xB49ECA122467D05F, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xe23adc6fcb1f29ae, 0xE23ADC6FCB1F29AE, (), p0: i32, p1: i32, p2: i32);
	native!(_0x0fe8e1fcd2b86b33, 0x0FE8E1FCD2B86B33, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x69ef772b192614c1, 0x69EF772B192614C1, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x8e243837643d9583, 0x8E243837643D9583, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xbd0efb25cca8f97a, 0xBD0EFB25CCA8F97A, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xa95f667a755725da, 0xA95F667A755725DA, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_purchase_warehouse, 0x33981D6804E62F49, (), amount: i32, data: &mut i32, p2: bool, p3: bool);
	native!(_0x4128464231e3ca0b, 0x4128464231E3CA0B, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x2fab6614ce22e196, 0x2FAB6614CE22E196, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x05f04155a226fbbf, 0x05F04155A226FBBF, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xe8b0b270b6e7c76e, 0xE8B0B270B6E7C76E, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x5bcde0f640c773d2, 0x5BCDE0F640C773D2, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x998e18ceb44487fc, 0x998E18CEB44487FC, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xfa07759e6fddd7cf, 0xFA07759E6FDDD7CF, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x6fd97159fe3c971a, 0x6FD97159FE3C971A, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x675d19c6067cae08, 0x675D19C6067CAE08, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xa51b086b0b2c0f7a, 0xA51B086B0B2C0F7A, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xd7cccba28c4ecaf0, 0xD7CCCBA28C4ECAF0, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_0x0035bb914316f1e3, 0x0035BB914316F1E3, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x5f456788b05faeac, 0x5F456788B05FAEAC, (), p0: i32, p1: i32, p2: i32);
	native!(_0xa75ccf58a60a5fd1, 0xA75CCF58A60A5FD1, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32);
	native!(_0xb4c2ec463672474e, 0xB4C2EC463672474E, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x2afc2d19b50797f2, 0x2AFC2D19B50797F2, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_import_export_repair, 0xC1952F3773BA18FE, (), p0: i32, p1: i32, p2: i32);
	native!(_network_spent_purchase_hangar, 0xCCB339CC970452DA, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_upgrade_hangar, 0x615EB504B0788DAF, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_hangar_utility_charges, 0xB18AC2ECBB15CB6A, (), amount: i32, p1: bool, p2: bool);
	native!(_network_spent_hangar_staff_charges, 0xB1F1346FD57685D7, (), amount: i32, p1: bool, p2: bool);
	native!(_network_spent_buy_truck, 0xAC272C0AE01B4BD8, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_upgrade_truck, 0x365E877C61D6988B, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_buy_bunker, 0x12D148D26538D0F9, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_upgrade_bunker, 0x0C82D21A77C22D49, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_earn_from_sell_bunker, 0x9251B6ABF2D0A5B4, (), amount: i32, bunker_hash: Hash);
	native!(_network_spent_ballistic_equipment, 0x5D97630A8A0EF123, (), amount: i32, p1: bool, p2: bool);
	native!(_network_earn_from_rdr_bonus, 0x7A5349B773584675, (), amount: i32, p1: i32);
	native!(_network_earn_from_wage_payment, 0x35F8DA0E8A31EF1B, (), amount: i32);
	native!(_network_earn_from_wage_payment_bonus, 0x005ACA7100BD101D, (), amount: i32);
	native!(_network_spent_buy_base, 0x4EA3F425C7744D21, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_upgrade_base, 0x3DD3F33A5D55EA6F, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_buy_tiltrotor, 0x0CCE73BC7A11E885, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_upgrade_tiltrotor, 0x165E135D6DFA2907, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_employ_assassins, 0x5BBBD92186E1F1C5, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_gangops_cannon, 0x771ADB0E7635B7BF, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_spent_gangops_start_mission, 0xDA947AE8880D5C18, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_earn_from_sell_base, 0x0E1E2FF3F4EC11AA, (), amount: i32, base_name_hash: Hash);
	native!(_network_earn_from_target_refund, 0x5B669CF2299A271F, (), amount: i32, p1: i32);
	native!(_network_earn_from_gangops_wages, 0x2DCB19ABAB0380A8, (), amount: i32, p1: i32);
	native!(_network_earn_from_gangops_wages_bonus, 0x15BB2A5C757EB91F, (), amount: i32, p1: i32);
	native!(_network_earn_from_dar_challenge, 0xCAC672087B4A24AB, (), amount: i32, p1: i32);
	native!(_network_earn_from_doomsday_finale_bonus, 0x128A747F4A230952, (), amount: i32, vehicle_hash: Hash);
	native!(_network_earn_from_gangops_awards, 0xA9A31475F530DFDA, (), amount: i32, unk: *const c_char, p2: i32);
	native!(_network_earn_from_gangops_elite, 0x2597A0D4A4FC2C77, (), amount: i32, unk: *const c_char, act_index: i32);
	native!(_network_rival_delivery_completed, 0x1B882107C23A9022, (), earned_money: i32);
	native!(_network_spent_gangops_start_strand, 0xA19EC0786E326E06, (), r#type: i32, amount: i32, p2: bool, p3: bool);
	native!(_network_spent_gangops_trip_skip, 0x5ECE6FD7B4EC8D6A, (), amount: i32, p1: bool, p2: bool);
	native!(_network_earn_from_gangops_jobs_prep_participation, 0xED26584F6BDCBBFD, (), amount: i32);
	native!(_network_earn_from_gangops_jobs_setup, 0xA9160796D47A2CF8, (), amount: i32, unk: *const c_char);
	native!(_network_earn_from_gangops_jobs_finale, 0x1C121FC9545E0D52, (), amount: i32, unk: *const c_char);
	native!(_0x2a7cec72c3443bcc, 0x2A7CEC72C3443BCC, (), p0: i32, p1: i32, p2: i32);
	native!(_0xe0f82d68c7039158, 0xE0F82D68C7039158, (), p0: i32);
	native!(_0xb4deae67f35e2acd, 0xB4DEAE67F35E2ACD, (), p0: i32);
	native!(_network_earn_from_bb_event_bonus, 0xFDD8D2440DAF1590, (), amount: i32);
	native!(_0x2a93c46aab1eacc9, 0x2A93C46AAB1EACC9, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x226c284c830d0ca8, 0x226C284C830D0CA8, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_earn_from_hacker_truck_mission, 0xE8815FE993896AD3, (), p0: i32, amount: i32, p2: i32, p3: i32);
	native!(_0xed76d195e6e3bf7f, 0xED76D195E6E3BF7F, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x1dc9b749e7ae282b, 0x1DC9B749E7AE282B, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xc6e74cf8c884c880, 0xC6E74CF8C884C880, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(_0x65482bfd0923c8a1, 0x65482BFD0923C8A1, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(_network_spent_rdrhatchet_bonus, 0xE284D46FFDB82E36, (), amount: i32, p1: bool, p2: bool);
	native!(_network_spent_nightclub_entry_fee, 0x876056684281655D, (), player: Player, amount: i32, p1: i32, p2: bool, p3: bool);
	native!(_network_spent_nightclub_bar_drink, 0xDD21B016E4289465, (), amount: i32, p1: i32, p2: bool, p3: bool);
	native!(_network_spent_bounty_hunter_mission, 0x1BEA0CD93470BB1F, (), amount: i32, p1: bool, p2: bool);
	native!(_network_spent_rehire_dj, 0xF6C8A544E4CF14FC, (), amount: i32, p1: i32, p2: bool, p3: bool);
	native!(_network_spent_arena_join_spectator, 0x14EAEA58F93B55AF, (), amount: i32, p1: i32, p2: bool, p3: bool);
	native!(_network_earn_from_arena_skill_level_progression, 0xE08256F972C7BB2C, (), amount: i32, p1: i32);
	native!(_network_earn_from_arena_career_progression, 0x0F99F70C61F14619, (), amount: i32, p1: i32);
	native!(_network_spent_make_it_rain, 0xE5F5A060439C2F5D, (), amount: i32, p1: bool, p2: bool);
	native!(_network_spent_buy_arena, 0x40D5DA9550B7CB46, (), amount: i32, p1: bool, p2: bool, p3: *const c_char);
	native!(_network_spent_upgrade_arena, 0x037ABB06825D7AB1, (), amount: i32, p1: bool, p2: bool, p3: *const c_char);
	native!(_network_spent_arena_spectator_box, 0x7049BF858601DC0F, (), amount: i32, p1: i32, p2: bool, p3: bool);
	native!(_network_spent_spin_the_wheel_payment, 0x9A5BD1D0000B339C, (), amount: i32, p1: i32, p2: bool);
	native!(_network_earn_from_spin_the_wheel_cash, 0x676C48776CACBB5A, (), amount: i32);
	native!(_network_spent_arena_premium, 0x619496D837EFD920, (), amount: i32, p1: bool, p2: bool);
	native!(_network_earn_from_arena_war, 0x631F1CB8FB4130AA, (), amount: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_earn_from_assassinate_target_killed_2, 0x5E7AE8AABE8B7C0D, (), amount: i32);
	native!(_network_earn_from_bb_event_cargo, 0xA82959062361B259, (), amount: i32);
	native!(_network_earn_from_rc_time_trial, 0xDFF49EE984E7AAE8, (), amount: i32);
	native!(_network_earn_from_daily_objective_event, 0x5128DF14A5BB86FC, (), amount: i32);
	native!(_network_spent_casino_membership, 0xFBBE0570EDF39D46, (), amount: i32, p1: bool, p2: bool, p3: i32);
	native!(_network_spent_buy_casino, 0x34A6FC4D06C4DA0F, (), amount: i32, p1: bool, p2: bool, data: &mut i32);
	native!(_network_spent_upgrade_casino, 0x4740D62BC1B4EBEA, (), amount: i32, p1: bool, p2: bool, data: &mut i32);
	native!(_network_spent_casino_generic, 0x88BF9B612B84D3C3, (), amount: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_network_earn_from_time_trial_win, 0x0819DB99FD2FBBD8, (), amount: i32);
	native!(_network_earn_from_collection_item, 0x84FF63BD4966F33D, (), amount: i32);
	native!(_network_earn_from_collectables_action_figures, 0x5517F90043466049, (), amount: i32);
	native!(_network_earn_from_complete_collection, 0x83AD64F53F4E9483, (), amount: i32);
	native!(_network_earn_from_selling_vehicle, 0x8BCB27A057DF7B7F, (), amount: i32);
	native!(_network_earn_from_casino_mission_reward, 0x566FD402B25787DE, (), amount: i32);
	native!(_network_earn_from_casino_story_mission_reward, 0xAC95ED552157E092, (), amount: i32);
	native!(_network_earn_from_casino_mission_participation, 0x09E8F18641BE2575, (), amount: i32);
	native!(_network_earn_from_casino_award, 0x973A9781A34F8DEB, (), amount: i32, hash: Hash);
	native!(network_get_vc_bank_balance, 0x76EF28DA05EA395A, i32);
	native!(network_get_vc_wallet_balance, 0xA40F9C2623F6A8B5, i32, character_slot: i32);
	native!(network_get_vc_balance, 0x5CBAD97E059E1B94, i32);
	native!(network_get_evc_balance, 0x5D1E75F91C07DEE5, i32);
	native!(network_get_pvc_balance, 0x4F54F3B6C202FB4E, i32);
	native!(network_get_string_wallet_balance, 0xF9B10B529DCFB33B, *const c_char, character_slot: i32);
	native!(network_get_string_bank_balance, 0xA6FA3979BED01B81, *const c_char);
	native!(network_get_string_bank_wallet_balance, 0x700AF71AE615E6DD, *const c_char);
	native!(_network_get_vc_wallet_balance_is_not_less_than, 0xED5AB8860415BABA, bool, amount: i32, character_slot: i32);
	native!(_network_get_vc_bank_balance_is_not_less_than, 0xA31FD6A0865B6D14, bool, amount: i32);
	native!(_network_get_vc_bank_wallet_balance_is_not_less_than, 0xDC18531D7019A535, bool, amount: i32, character_slot: i32);
	native!(network_get_pvc_transfer_balance, 0x13A8DE2FD77D04F3, i32);
	native!(_0x08e8eeadfd0dc4a0, 0x08E8EEADFD0DC4A0, bool, amount: i32);
	native!(network_can_receive_player_cash, 0x5D17BE59D2123284, bool, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_get_remaining_vc_daily_transfers_2, 0xEA560AC9EEB1E19B, i32);
	native!(withdraw_vc, 0xF70EFA14FE091429, i32, amount: i32);
	native!(deposit_vc, 0xE260E0BB9CD995AC, bool, amount: i32);
	native!(_0xe154b48b68ef72bc, 0xE154B48B68EF72BC, bool, p0: i32);
	native!(_0x6fcf8ddea146c45b, 0x6FCF8DDEA146C45B, bool, p0: i32);
}

pub mod netshopping {
	use super::*;

	native!(_net_gameserver_use_server_transactions, 0x7D2708796355B20B, bool);
	native!(_net_gameserver_catalog_item_exists, 0xBD4D7EAF8A30F637, bool, name: *const c_char);
	native!(_net_gameserver_catalog_item_exists_hash, 0x247F0F73A182EA0B, bool, hash: Hash);
	native!(net_gameserver_get_price, 0xC27009422FCCA88D, i32, item_hash: Hash, category_hash: Hash, p2: bool);
	native!(_net_gameserver_catalog_is_ready, 0x3C4487461E9B0DCB, bool);
	native!(_net_gameserver_is_catalog_valid, 0x2B949A1E6AEC8F6A, bool);
	native!(_0x85f6c9aba1de2bcf, 0x85F6C9ABA1DE2BCF, i32);
	native!(_0x357b152ef96c30b6, 0x357B152EF96C30B6, i32);
	native!(_net_gameserver_get_catalog_state, 0xCF38DAFBB49EDE5E, bool, state: &mut i32);
	native!(_0xe3e5a7c64ca2c6ed, 0xE3E5A7C64CA2C6ED, i32);
	native!(_0x0395cb47b022e62c, 0x0395CB47B022E62C, bool, p0: &mut i32);
	native!(net_gameserver_start_session, 0xA135AC892A58FC07, bool, char_slot: i32);
	native!(_0x72eb7ba9b69bf6ab, 0x72EB7BA9B69BF6AB, bool);
	native!(_0x170910093218c8b9, 0x170910093218C8B9, bool, p0: &mut i32);
	native!(_0xc13c38e47ea5df31, 0xC13C38E47EA5DF31, bool, p0: &mut i32);
	native!(net_gameserver_is_session_valid, 0xB24F0944DA203D9E, bool, char_slot: i32);
	native!(_0x74a0fd0688f1ee45, 0x74A0FD0688F1EE45, i32, p0: i32);
	native!(net_gameserver_session_apply_received_data, 0x2F41D51BA3BCD1F1, bool, char_slot: i32);
	native!(net_gameserver_is_session_refresh_pending, 0x810E8431C0614BF9, bool);
	native!(_net_gameserver_get_balance, 0x35A1B3E1D1315CFA, bool, inventory: bool, playerbalance: bool);
	native!(_0x613f125ba3bd2eb9, 0x613F125BA3BD2EB9, bool);
	native!(_net_gameserver_get_transaction_manager_data, 0x897433D292B44130, bool, p0: &mut i32, p1: &mut bool);
	native!(net_gameserver_basket_start, 0x279F08B1A4B29B7E, bool, transaction_id: &mut i32, category_hash: Hash, action_hash: Hash, flags: i32);
	native!(_net_gameserver_basket_delete, 0xFA336E7F40C0A0D0, bool);
	native!(net_gameserver_basket_end, 0xA65568121DF2EA26, bool);
	native!(net_gameserver_basket_add_item, 0xF30980718C8ED876, bool, item_data: &mut i32, quantity: i32);
	native!(net_gameserver_basket_is_full, 0x27F76CC6C55AD30E, bool);
	native!(net_gameserver_basket_apply_server_data, 0xE1A0450ED46A7812, bool, p0: i32, p1: &mut i32);
	native!(net_gameserver_checkout_start, 0x39BE7CEA8D9CC8E6, bool, transaction_id: i32);
	native!(_0xc830417d630a50f9, 0xC830417D630A50F9, bool, transaction_id: i32);
	native!(_0x79edac677ca62f81, 0x79EDAC677CA62F81, bool, transaction_id: i32);
	native!(net_gameserver_begin_service, 0x3C5FD37B5499582E, bool, transaction_id: &mut i32, category_hash: Hash, item_hash: Hash, action_type_hash: Hash, value: i32, flags: i32);
	native!(net_gameserver_end_service, 0xE2A99A9B524BEFFF, bool, transaction_id: i32);
	native!(_net_gameserver_delete_character_slot, 0x51F1A8E48C3D2F6D, bool, slot: i32, transfer: bool, reason: Hash);
	native!(_net_gameserver_delete_character_slot_get_status, 0x0A6D923DFFC9BD89, i32);
	native!(net_gameserver_delete_set_telemetry_nonce_seed, 0x112CEF1615A1139F, bool);
	native!(_net_gameserver_transfer_bank_to_wallet, 0xD47A2C1BA117471D, bool, char_slot: i32, amount: i32);
	native!(_net_gameserver_transfer_wallet_to_bank, 0xC2F7FE5309181C7D, bool, char_slot: i32, amount: i32);
	native!(_net_gameserver_transfer_cash_get_status, 0x23789E777D14CE44, i32);
	native!(_net_gameserver_transfer_cash_get_status_2, 0x350AA5EBC03D3BD2, i32);
	native!(_net_gameserver_transfer_cash_set_telemetry_nonce_seed, 0x498C1E05CE5F7877, bool);
	native!(net_gameserver_set_telemetry_nonce_seed, 0x9507D4271988E1AE, bool, p0: i32);
}

pub mod network {
	use super::*;

	native!(_get_online_version, 0xFCA9373EF340AC0A, *const c_char);
	native!(network_is_signed_in, 0x054354A99211EB96, bool);
	native!(network_is_signed_online, 0x1077788E268557C2, bool);
	native!(_0xbd545d44cce70597, 0xBD545D44CCE70597, bool);
	native!(_0xebcab9e5048434f4, 0xEBCAB9E5048434F4, i32);
	native!(_0x74fb3e29e6d10fa9, 0x74FB3E29E6D10FA9, i32);
	native!(_0x7808619f31ff22db, 0x7808619F31FF22DB, i32);
	native!(_0xa0fa4ec6a05da44e, 0xA0FA4EC6A05DA44E, i32);
	native!(network_have_just_upload_later, 0x85443FF4C328F53B, bool);
	native!(_0x8d11e61a4abf49cc, 0x8D11E61A4ABF49CC, bool);
	native!(network_is_cloud_available, 0x9A4CF4F48AD77302, bool);
	native!(network_has_social_club_account, 0x67A5589628E0CFF6, bool);
	native!(_0xba9775570db788cf, 0xBA9775570DB788CF, i32);
	native!(network_is_host, 0x8DB296B814EDDA07, bool);
	native!(_network_get_host, 0x39EEE6E1039A3517, Player);
	native!(_0x4237e822315d8ba9, 0x4237E822315D8BA9, bool);
	native!(network_have_online_privileges, 0x25CB5A9F37BFD063, bool);
	native!(_network_has_age_restricted_profile, 0x1353F87E89946207, bool);
	native!(network_have_user_content_privileges, 0x72D918C99BCACC54, bool, p0: i32);
	native!(_0xaeef48cdf5b6ce7c, 0xAEEF48CDF5B6CE7C, bool, p0: i32, p1: i32);
	native!(_0x78321bea235fd8cd, 0x78321BEA235FD8CD, bool, p0: i32, p1: bool);
	native!(_0x595f028698072dd9, 0x595F028698072DD9, bool, p0: i32, p1: i32, p2: bool);
	native!(_0x83f28ce49fbbffba, 0x83F28CE49FBBFFBA, bool, p0: i32, p1: i32, p2: bool);
	native!(_0x07eab372c8841d99, 0x07EAB372C8841D99, i32, p0: i32, p1: i32, p2: i32);
	native!(_0x906ca41a4b74eca4, 0x906CA41A4B74ECA4, i32);
	native!(_0x023acab2dc9dc4a4, 0x023ACAB2DC9DC4A4, i32);
	native!(_0x76bf03fadbf154f5, 0x76BF03FADBF154F5, i32);
	native!(network_get_age_group, 0x9614B71F8ADB982B, i32);
	native!(_0x0cf6cc51aa18f0f8, 0x0CF6CC51AA18F0F8, i32, p0: i32, p1: i32, p2: i32);
	native!(_0x64e5c4cc82847b73, 0x64E5C4CC82847B73, bool);
	native!(_0x1f7bc3539f9e0224, 0x1F7BC3539F9E0224, ());
	native!(_network_have_online_privilege_2, 0x5EA784D197556507, bool);
	native!(_0xa8acb6459542a8c8, 0xA8ACB6459542A8C8, i32);
	native!(_0x83fe8d7229593017, 0x83FE8D7229593017, ());
	native!(_0x53c10c8bd774f2c9, 0x53C10C8BD774F2C9, i32);
	native!(network_can_bail, 0x580CE4438479CC61, bool);
	native!(network_bail, 0x95914459A87EBA28, (), p0: i32, p1: i32, p2: i32);
	native!(_0x283b6062a2c01e9b, 0x283B6062A2C01E9B, ());
	native!(_0x8b4ffc790ca131ef, 0x8B4FFC790CA131EF, i32, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_network_transition_track, 0xC3BFED92026A2AAD, (), hash: Hash, p1: i32, p2: i32, state: i32, p4: i32);
	native!(_0x04918a41bc9b8157, 0x04918A41BC9B8157, i32, p0: i32, p1: i32, p2: i32);
	native!(network_can_access_multiplayer, 0xAF50DA1A3F8B1BA4, bool, loading_state: &mut i32);
	native!(network_is_multiplayer_disabled, 0x9747292807126EDA, bool);
	native!(network_can_enter_multiplayer, 0x7E782A910C362C25, bool);
	native!(network_session_enter, 0x330ED4D05491934F, i32, p0: i32, p1: i32, p2: i32, max_players: i32, p4: i32, p5: i32);
	native!(network_session_friend_matchmaking, 0x2CFC76E0D087C994, bool, p0: i32, p1: i32, max_players: i32, p3: bool);
	native!(network_session_crew_matchmaking, 0x94BC51E9449D917F, bool, p0: i32, p1: i32, p2: i32, max_players: i32, p4: bool);
	native!(network_session_activity_quickmatch, 0xBE3E347A87ACEB82, bool, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(network_session_host, 0x6F3D4ED9BEE4E61D, bool, p0: i32, max_players: i32, p2: bool);
	native!(network_session_host_closed, 0xED34C0C02C098BB7, bool, p0: i32, max_players: i32);
	native!(network_session_host_friends_only, 0xB9CFD27A5D578D83, bool, p0: i32, max_players: i32);
	native!(network_session_is_closed_friends, 0xFBCFA2EA2E206890, bool);
	native!(network_session_is_closed_crew, 0x74732C6CA90DA2B4, bool);
	native!(network_session_is_solo, 0xF3929C2379B60CCE, bool);
	native!(network_session_is_private, 0xCEF70AA5B3F89BA1, bool);
	native!(network_session_end, 0xA02E59562D711006, bool, p0: bool, p1: bool);
	native!(network_session_kick_player, 0xFA8904DC5F304220, (), player: Player);
	native!(network_session_get_kick_vote, 0xD6D09A6F32F49EF1, bool, player: Player);
	native!(_0x041c7f2a6c9894e6, 0x041C7F2A6C9894E6, i32, p0: i32, p1: i32, p2: i32);
	native!(_0x59df79317f85a7e0, 0x59DF79317F85A7E0, i32);
	native!(_0xffe1e5b792d92b34, 0xFFE1E5B792D92B34, i32);
	native!(network_session_set_matchmaking_group, 0x49EC8030F5015F8B, (), matchmaking_group: i32);
	native!(network_session_set_matchmaking_group_max, 0x8B6A4DD0AF9CE215, (), player_type: i32, player_count: i32);
	native!(network_session_get_matchmaking_group_free, 0x56CE820830EF040B, i32, p0: i32);
	native!(_0xcae55f48d3d7875c, 0xCAE55F48D3D7875C, (), p0: i32);
	native!(_0xf49abc20d8552257, 0xF49ABC20D8552257, (), p0: i32);
	native!(_0x4811bbac21c5fcd5, 0x4811BBAC21C5FCD5, (), p0: i32);
	native!(_0x5539c3ebf104a53a, 0x5539C3EBF104A53A, (), p0: bool);
	native!(_0x702bc4d605522539, 0x702BC4D605522539, (), p0: i32);
	native!(network_session_set_matchmaking_property_id, 0x3F52E880AAF6C8CA, (), p0: bool);
	native!(network_session_set_matchmaking_mental_state, 0xF1EEA2DDA9FFA69D, (), p0: i32);
	native!(_0x5ecd378ee64450ab, 0x5ECD378EE64450AB, (), p0: i32);
	native!(_0x59d421683d31835a, 0x59D421683D31835A, (), p0: i32);
	native!(_0x1153fa02a659051c, 0x1153FA02A659051C, ());
	native!(_network_session_hosted, 0xC19F6C8E7865A6FF, (), p0: bool);
	native!(network_add_followers, 0x236406F60CF216D6, (), p0: &mut i32, p1: i32);
	native!(network_clear_followers, 0x058F43EC59A8631A, ());
	native!(network_get_global_multiplayer_clock, 0x6D03BFBD643B2A02, (), hours: &mut i32, minutes: &mut i32, seconds: &mut i32);
	native!(_0x600f8cb31c7aab6e, 0x600F8CB31C7AAB6E, (), p0: i32);
	native!(_network_get_targeting_mode, 0xDFFA5BE8381C3314, i32);
	native!(_0xe532d6811b3a4d2a, 0xE532D6811B3A4D2A, bool, p0: i32);
	native!(network_find_matched_gamers, 0xF7B2CFDE5C9F700D, bool, p0: i32, p1: f32, p2: f32, p3: f32);
	native!(network_is_finding_gamers, 0xDDDF64C91BFCF0AA, bool);
	native!(_0xf9b83b77929d8863, 0xF9B83B77929D8863, i32);
	native!(network_get_num_found_gamers, 0xA1B043EE79A916FB, i32);
	native!(network_get_found_gamer, 0x9DCFF2AFB68B3476, bool, p0: &mut i32, p1: i32);
	native!(network_clear_found_gamers, 0x6D14CCEE1B40381A, ());
	native!(_network_get_gamer_status, 0x85A0EF54A500882C, bool, p0: &mut i32);
	native!(_0x2cc848a861d01493, 0x2CC848A861D01493, i32);
	native!(_0x94a8394d150b013a, 0x94A8394D150B013A, i32);
	native!(_0x5ae17c6b0134b7f1, 0x5AE17C6B0134B7F1, i32);
	native!(network_get_gamer_status_result, 0x02A8BEC6FD9AF660, bool, p0: &mut i32, p1: i32);
	native!(network_clear_get_gamer_status, 0x86E0660E4F5C956D, ());
	native!(network_session_join_invite, 0xC6F8AB8A4189CF3A, ());
	native!(network_session_cancel_invite, 0x2FBF47B1B36D36F9, ());
	native!(network_session_force_cancel_invite, 0xA29177F7703B5644, ());
	native!(network_has_pending_invite, 0xAC8C7B9B88C4A668, bool);
	native!(_0xc42dd763159f3461, 0xC42DD763159F3461, bool);
	native!(_network_accept_invite, 0x62A0296C1BB1CEB3, bool);
	native!(network_session_was_invited, 0x23DFB504655D0CE4, bool);
	native!(network_session_get_inviter, 0xE57397B4A3429DD0, (), network_handle: &mut i32);
	native!(_0xd313de83394af134, 0xD313DE83394AF134, bool);
	native!(_0xbdb6f89c729cf388, 0xBDB6F89C729CF388, bool);
	native!(network_suppress_invite, 0xA0682D67EF1FBA3D, (), toggle: bool);
	native!(network_block_invites, 0x34F9E9049454A7A0, (), toggle: bool);
	native!(_network_block_invites_2, 0xCFEB8AF24FC1D0BB, (), toggle: bool);
	native!(_0xf814fec6a19fd6e0, 0xF814FEC6A19FD6E0, ());
	native!(_network_block_kicked_players, 0x6B07B9CE4D390375, (), p0: bool);
	native!(_0x7ac752103856fb20, 0x7AC752103856FB20, (), p0: bool);
	native!(network_is_offline_invite_pending, 0x74698374C45701D2, bool);
	native!(_0x140e6a44870a11ce, 0x140E6A44870A11CE, ());
	native!(network_session_host_single_player, 0xC74C33FCA52856D5, (), p0: i32);
	native!(network_session_leave_single_player, 0x3442775428FD2DAA, ());
	native!(network_is_game_in_progress, 0x10FAB35428CCC9D7, bool);
	native!(network_is_session_active, 0xD83C2B94E7508980, bool);
	native!(network_is_in_session, 0xCA97246103B63917, bool);
	native!(network_is_session_started, 0x9DE624D2FC4B603F, bool);
	native!(network_is_session_busy, 0xF4435D66A8E2905E, bool);
	native!(network_can_session_end, 0x4EEBC3694E49C572, bool);
	native!(network_session_mark_visible, 0x271CC6AB59EBF9A5, (), toggle: bool);
	native!(network_session_is_visible, 0xBA416D68C631496A, bool);
	native!(network_session_block_join_requests, 0xA73667484D7037C3, (), toggle: bool);
	native!(network_session_change_slots, 0xB4AB419E0D86ACAE, (), p0: i32, p1: bool);
	native!(network_session_get_private_slots, 0x53AFD64C6758F2F9, i32);
	native!(network_session_voice_host, 0x9C1556705F864230, ());
	native!(network_session_voice_leave, 0x6793E42BE02B575D, ());
	native!(network_session_voice_connect_to_player, 0xABD5E88B8A2D3DB2, (), p0: &mut i32);
	native!(network_set_keep_focuspoint, 0x7F8413B7FC2AA6B9, (), p0: bool, p1: i32);
	native!(_0x5b8ed3db018927b1, 0x5B8ED3DB018927B1, (), p0: i32);
	native!(network_session_is_in_voice_session, 0x855BC38818F6F684, bool);
	native!(_0xb5d3453c98456528, 0xB5D3453C98456528, i32);
	native!(network_session_is_voice_session_busy, 0xEF0912DDF7C4CB4B, bool);
	native!(network_send_text_message, 0x3A214F2EC889B100, bool, message: *const c_char, network_handle: &mut i32);
	native!(network_set_activity_spectator, 0x75138790B4359A74, (), toggle: bool);
	native!(network_is_activity_spectator, 0x12103B9E0C9F92FB, bool);
	native!(_0x0e4f77f7b9d74d84, 0x0E4F77F7B9D74D84, (), p0: i32);
	native!(network_set_activity_spectator_max, 0x9D277B76D1D12222, (), max_spectators: i32);
	native!(network_get_activity_player_num, 0x73E2B500410DA5A2, i32, p0: bool);
	native!(network_is_activity_spectator_from_handle, 0x2763BBAA72A7BCB9, bool, network_handle: &mut i32);
	native!(network_host_transition, 0xA60BB5CE242BB254, i32, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32);
	native!(network_do_transition_quickmatch, 0x71FB0EBCD4915D56, bool, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(network_do_transition_quickmatch_async, 0xA091A5E44F0072E5, bool, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(network_do_transition_quickmatch_with_group, 0x9C4AB58491FDC98A, bool, p0: i32, p1: i32, p2: i32, p3: i32, p4: &mut i32, p5: i32, p6: i32, p7: i32);
	native!(network_join_group_activity, 0xA06509A691D12BE4, i32);
	native!(_0x1888694923ef4591, 0x1888694923EF4591, ());
	native!(_0xb13e88e655e5a3bc, 0xB13E88E655E5A3BC, ());
	native!(network_is_transition_closed_friends, 0x6512765E3BE78C50, bool);
	native!(network_is_transition_closed_crew, 0x0DBD5D7E3C5BEC3B, bool);
	native!(network_is_transition_solo, 0x5DC577201723960A, bool);
	native!(network_is_transition_private, 0x5A6AA44FF8E931E6, bool);
	native!(_0x617f49c2668e6155, 0x617F49C2668E6155, i32);
	native!(_0x261e97ad7bcf3d40, 0x261E97AD7BCF3D40, (), p0: bool);
	native!(_0x39917e1b4cb0f911, 0x39917E1B4CB0F911, (), p0: bool);
	native!(_0x2ce9d95e4051aecd, 0x2CE9D95E4051AECD, (), p0: i32);
	native!(network_set_transition_creator_handle, 0xEF26739BCD9907D5, (), p0: &mut i32);
	native!(network_clear_transition_creator_handle, 0xFB3272229A82C759, ());
	native!(network_invite_gamers_to_transition, 0x4A595C32F77DFF76, bool, p0: &mut i32, p1: i32);
	native!(network_set_gamer_invited_to_transition, 0xCA2C8073411ECDB6, (), network_handle: &mut i32);
	native!(network_leave_transition, 0xD23A1A815D21DB19, bool);
	native!(network_launch_transition, 0x2DCF46CB1A4F0884, bool);
	native!(_0xa2e9c1ab8a92e8cd, 0xA2E9C1AB8A92E8CD, (), toggle: bool);
	native!(network_bail_transition, 0xEAA572036990CD1B, (), p0: i32, p1: i32, p2: i32);
	native!(network_do_transition_to_game, 0x3E9BB38102A589B0, bool, p0: bool, max_players: i32);
	native!(network_do_transition_to_new_game, 0x4665F51EFED00034, bool, p0: bool, max_players: i32, p2: bool);
	native!(network_do_transition_to_freemode, 0x3AAD8B2FCA1E289F, bool, p0: &mut i32, p1: i32, p2: bool, players: i32, p4: bool);
	native!(network_do_transition_to_new_freemode, 0x9E80A5BA8109F974, bool, p0: &mut i32, p1: &mut i32, players: i32, p3: bool, p4: bool, p5: bool);
	native!(network_is_transition_to_game, 0x9D7696D8F4FA6CB7, bool);
	native!(network_get_transition_members, 0x73B000F7FBC55829, i32, data: &mut i32, data_count: i32);
	native!(network_apply_transition_parameter, 0x521638ADA1BA0D18, (), p0: i32, p1: i32);
	native!(network_apply_transition_parameter_string, 0xEBEFC2E77084F599, (), p0: i32, string: *const c_char, p2: bool);
	native!(network_send_transition_gamer_instruction, 0x31D1D2B858D25E6B, bool, network_handle: &mut i32, p1: *const c_char, p2: i32, p3: i32, p4: bool);
	native!(network_mark_transition_gamer_as_fully_joined, 0x5728BB6D63E3FF1D, bool, p0: &mut i32);
	native!(network_is_transition_host, 0x0B824797C9BF2159, bool);
	native!(network_is_transition_host_from_handle, 0x6B5C83BA3EFE6A10, bool, network_handle: &mut i32);
	native!(network_get_transition_host, 0x65042B9774C4435E, bool, network_handle: &mut i32);
	native!(network_is_in_transition, 0x68049AEFF83D8F0A, bool);
	native!(network_is_transition_started, 0x53FA83401D9C07FE, bool);
	native!(network_is_transition_busy, 0x520F3282A53D26B7, bool);
	native!(network_is_transition_matchmaking, 0x292564C735375EDF, bool);
	native!(_0xc571d0e77d8bbc29, 0xC571D0E77D8BBC29, bool);
	native!(_0x1398582b7f72b3ed, 0x1398582B7F72B3ED, (), p0: i32);
	native!(_0x1f8e00fb18239600, 0x1F8E00FB18239600, (), p0: i32);
	native!(_0xf6f4383b7c92f11a, 0xF6F4383B7C92F11A, (), p0: i32);
	native!(network_open_transition_matchmaking, 0x2B3A8F7CA3A38FDE, ());
	native!(network_close_transition_matchmaking, 0x43F4DBA69710E01E, ());
	native!(network_is_transition_open_to_matchmaking, 0x37A4494483B9F5C9, bool);
	native!(network_set_transition_visibility_lock, 0x0C978FDA19692C2C, (), p0: bool, p1: bool);
	native!(network_is_transition_visibility_locked, 0xD0A484CB2F829FBE, bool);
	native!(network_set_transition_activity_id, 0x30DE938B516F0AD2, (), p0: i32);
	native!(network_change_transition_slots, 0xEEEDA5E6D7080987, (), p0: i32, p1: i32);
	native!(_0x973d76aa760a6cb6, 0x973D76AA760A6CB6, (), p0: bool);
	native!(network_has_player_started_transition, 0x9AC9CCBFA8C29795, bool, player: Player);
	native!(network_are_transition_details_valid, 0x2615AA2A695930C1, bool, p0: i32);
	native!(network_join_transition, 0x9D060B08CD63321A, bool, player: Player);
	native!(network_has_invited_gamer_to_transition, 0x7284A47B3540E6CF, bool, p0: &mut i32);
	native!(_0x3f9990bf5f22759c, 0x3F9990BF5F22759C, bool, p0: &mut i32);
	native!(network_is_activity_session, 0x05095437424397FA, bool);
	native!(_0x4a9fde3a5a6d0437, 0x4A9FDE3A5A6D0437, (), toggle: bool);
	native!(_network_send_presence_invite, 0xC3C7A6AFDB244624, bool, network_handle: &mut i32, p1: &mut i32, p2: i32, p3: i32);
	native!(_network_send_presence_transition_invite, 0xC116FF9B4D488291, bool, p0: &mut i32, p1: &mut i32, p2: i32, p3: i32);
	native!(_0x1171a97a3d3981b6, 0x1171A97A3D3981B6, bool, p0: &mut i32, p1: &mut i32, p2: i32, p3: i32);
	native!(_0x742b58f723233ed9, 0x742B58F723233ED9, i32, p0: i32);
	native!(network_get_num_presence_invites, 0xCEFA968912D0F78D, i32);
	native!(network_accept_presence_invite, 0xFA91550DF9318B22, bool, p0: i32);
	native!(network_remove_presence_invite, 0xF0210268DB0974B1, bool, p0: i32);
	native!(network_get_presence_invite_id, 0xDFF09646E12EC386, i32, p0: i32);
	native!(network_get_presence_invite_inviter, 0x4962CC4AA2F345B7, i32, p0: i32);
	native!(network_get_presence_invite_handle, 0x38D5B0FEBB086F75, bool, p0: i32, p1: &mut i32);
	native!(network_get_presence_invite_session_id, 0x26E1CD96B0903D60, i32, p0: i32);
	native!(network_get_presence_invite_content_id, 0x24409FC4C55CB22D, i32, p0: i32);
	native!(_0xd39b3fff8ffdd5bf, 0xD39B3FFF8FFDD5BF, i32, p0: i32);
	native!(_0x728c4cc7920cd102, 0x728C4CC7920CD102, i32, p0: i32);
	native!(network_get_presence_invite_from_admin, 0x3DBF2DF0AEB7D289, bool, p0: i32);
	native!(_0x8806cebfabd3ce05, 0x8806CEBFABD3CE05, bool, p0: i32);
	native!(network_has_follow_invite, 0x76D9B976C4C09FDE, bool);
	native!(network_action_follow_invite, 0xC88156EBB786F8D5, i32);
	native!(network_clear_follow_invite, 0x439BFDE3CD0610F6, i32);
	native!(_0xebf8284d8cadeb53, 0xEBF8284D8CADEB53, ());
	native!(network_remove_transition_invite, 0x7524B431B2E6F7EE, (), p0: &mut i32);
	native!(network_remove_all_transition_invite, 0x726E0375C7A26368, ());
	native!(_0xf083835b70ba9bfe, 0xF083835B70BA9BFE, ());
	native!(network_invite_gamers, 0x9D80CD1D0E6327DE, bool, p0: &mut i32, p1: i32, p2: &mut i32, p3: &mut i32);
	native!(network_has_invited_gamer, 0x4D86CD31E8976ECE, bool, p0: &mut i32);
	native!(_0x71dc455f5cd1c2b1, 0x71DC455F5CD1C2B1, bool, network_handle: &mut i32);
	native!(_0x3855fb5eb2c5e8b2, 0x3855FB5EB2C5E8B2, i32, p0: i32);
	native!(network_get_currently_selected_gamer_handle_from_invite_menu, 0x74881E6BCAE2327C, bool, p0: &mut i32);
	native!(network_set_currently_selected_gamer_handle_from_invite_menu, 0x7206F674F2A3B1BB, bool, p0: &mut i32);
	native!(network_set_invite_on_call_for_invite_menu, 0x66F010A4B031A331, (), p0: &mut i32);
	native!(network_check_data_manager_succeeded_for_handle, 0x44B37CDCAE765AAE, bool, p0: i32, p1: &mut i32);
	native!(_0x4ad490ae1536933b, 0x4AD490AE1536933B, i32, p0: i32, p1: i32);
	native!(_0x0d77a82dc2d0da59, 0x0D77A82DC2D0DA59, (), p0: &mut i32, p1: &mut i32);
	native!(fillout_pm_player_list, 0xCBBD7C4991B64809, bool, network_handle: &mut i32, p1: i32, p2: i32);
	native!(fillout_pm_player_list_with_names, 0x716B6DB9D1886106, bool, p0: &mut i32, p1: &mut i32, p2: i32, p3: i32);
	native!(refresh_player_list_stats, 0xE26CCFF8094D8C74, bool, p0: i32);
	native!(network_set_current_data_manager_handle, 0x796A87B3B68D1F3D, bool, p0: &mut i32);
	native!(network_is_in_platform_party, 0x2FC5650B0271CB57, bool);
	native!(_network_get_platform_party_unk, 0x01ABCE5E7CBDA196, i32);
	native!(network_get_platform_party_members, 0x120364DE2845DAF8, i32, data: &mut i32, data_size: i32);
	native!(network_is_in_platform_party_chat, 0xFD8B834A8BA05048, bool);
	native!(network_is_chatting_in_platform_party, 0x8DE9945BCC9AEC52, bool, network_handle: &mut i32);
	native!(_0x2bf66d2e7414f686, 0x2BF66D2E7414F686, i32);
	native!(_0x14922ed3e38761f0, 0x14922ED3E38761F0, bool);
	native!(_0x6ce50e47f5543d0c, 0x6CE50E47F5543D0C, ());
	native!(_0xfa2888e3833c8e96, 0xFA2888E3833C8E96, ());
	native!(_0x25d990f8e0e3f13c, 0x25D990F8E0E3F13C, ());
	native!(_0xf1b84178f8674195, 0xF1B84178F8674195, (), p0: i32);
	native!(network_get_random_int, 0x599E4FA1F87EB5FF, i32);
	native!(network_get_random_int_ranged, 0xE30CF56F1EFA5F43, i32, range_start: i32, range_end: i32);
	native!(network_player_is_cheater, 0x655B91F1495A9090, bool);
	native!(network_player_get_cheater_reason, 0x172F75B6EE2233BA, i32);
	native!(network_player_is_badsport, 0x19D8DA0E5A68045A, bool);
	native!(_trigger_script_crc_check_on_player, 0x46FB3ED415C7641C, bool, player: Player, p1: i32, script_hash: Hash);
	native!(_0xa12d3a5a3753cc23, 0xA12D3A5A3753CC23, i32);
	native!(_0xf287f506767cc8a9, 0xF287F506767CC8A9, i32);
	native!(_remote_cheat_detected, 0x472841A026D26D8B, bool, player: Player, a: i32, b: i32);
	native!(bad_sport_player_left_detected, 0xEC5E3AF5289DCA81, bool, network_handle: &mut i32, event: i32, amount_received: i32);
	native!(network_apply_ped_scar_data, 0xE66C690248F11150, (), ped: Ped, p1: i32);
	native!(network_set_this_script_is_network_script, 0x1CA59E306ECB80A5, (), lobby_size: i32, p1: bool, player_id: i32);
	native!(_network_is_this_script_marked, 0xD1110739EEADB592, bool, p0: i32, p1: bool, p2: i32);
	native!(network_get_this_script_is_network_script, 0x2910669969E9535E, bool);
	native!(network_get_max_num_participants, 0xA6C90FBC38E395EE, i32);
	native!(network_get_num_participants, 0x18D0456E86604654, i32);
	native!(network_get_script_status, 0x57D158647A6BFABF, i32);
	native!(network_register_host_broadcast_variables, 0x3E9B2F01C50DF595, (), vars: &mut i32, num_vars: i32);
	native!(network_register_player_broadcast_variables, 0x3364AA97340CA215, (), vars: &mut i32, num_vars: i32);
	native!(network_finish_broadcasting_data, 0x64F62AFB081E260D, ());
	native!(_0x5d10b3795f3fc886, 0x5D10B3795F3FC886, bool);
	native!(network_get_player_index, 0x24FB80D107371267, i32, player: Player);
	native!(network_get_participant_index, 0x1B84DF6AF2A46938, i32, index: i32);
	native!(network_get_player_index_from_ped, 0x6C0E2E0125610278, Player, ped: Ped);
	native!(network_get_num_connected_players, 0xA4A79DD2D9600654, i32);
	native!(network_is_player_connected, 0x93DC1BE4E1ABE9D1, bool, player: Player);
	native!(network_get_total_num_players, 0xCF61D4B4702EE9EB, i32);
	native!(network_is_participant_active, 0x6FF8FF40B6357D45, bool, p0: i32);
	native!(network_is_player_active, 0xB8DFD30D6973E135, bool, player: Player);
	native!(network_is_player_a_participant, 0x3CA58F6CB7CBD784, bool, player: Player);
	native!(network_is_host_of_this_script, 0x83CD99A1E6061AB5, bool);
	native!(network_get_host_of_this_script, 0xC7B4D79B01FA7A5C, Player);
	native!(network_get_host_of_script, 0x1D6A14F1F9A736FC, Player, script_name: *const c_char, p1: i32, p2: i32);
	native!(network_set_mission_finished, 0x3B3D11CD9FFCDFC9, ());
	native!(network_is_script_active, 0x9D40DF90FAD26098, bool, script_name: *const c_char, player: Player, p2: bool, p3: i32);
	native!(_0x560b423d73015e77, 0x560B423D73015E77, i32, p0: i32);
	native!(network_get_num_script_participants, 0x3658E8CD94FC121A, i32, p0: &mut i32, p1: i32, p2: i32);
	native!(_0x638a3a81733086db, 0x638A3A81733086DB, i32);
	native!(network_is_player_a_participant_on_script, 0x1AD5B71586B94820, bool, p0: Player, p1: &mut i32, p2: i32);
	native!(_0x2302c0264ea58d31, 0x2302C0264EA58D31, ());
	native!(_0x741a3d8380319a81, 0x741A3D8380319A81, ());
	native!(participant_id, 0x90986E8876CE0A83, Player);
	native!(participant_id_to_int, 0x57A3BDDAD8E5AA0A, i32);
	native!(_0x2da41ed6e1fcd7a5, 0x2DA41ED6E1FCD7A5, i32, p0: i32, p1: i32);
	native!(network_get_destroyer_of_network_id, 0x7A1ADEEF01740A24, i32, net_id: i32, weapon_hash: &mut Hash);
	native!(_0xc434133d9ba52777, 0xC434133D9BA52777, i32, p0: i32, p1: i32);
	native!(_0x83660b734994124d, 0x83660B734994124D, i32, p0: i32, p1: i32, p2: i32);
	native!(_network_get_destroyer_of_entity, 0x4CACA84440FA26F6, bool, p0: i32, p1: i32, weapon_hash: &mut Hash);
	native!(network_get_entity_killer_of_player, 0x42B2DAA6B596F5F8, Entity, player: Player, weapon_hash: &mut Hash);
	native!(network_resurrect_local_player, 0xEA23C49EAA83ACFB, (), x: f32, y: f32, z: f32, heading: f32, unk: bool, changetime: bool, p6: i32);
	native!(network_set_local_player_invincible_time, 0x2D95C7E2D7E07307, (), time: i32);
	native!(network_is_local_player_invincible, 0x8A8694B48715B000, bool);
	native!(network_disable_invincible_flashing, 0x9DD368BF06983221, (), player: Player, toggle: bool);
	native!(network_set_local_player_sync_look_at, 0x524FF0AEFF9C3973, (), toggle: bool);
	native!(_0xb07d3185e11657a5, 0xB07D3185E11657A5, bool, entity: Entity);
	native!(network_get_network_id_from_entity, 0xA11700682F3AD45C, i32, entity: Entity);
	native!(network_get_entity_from_network_id, 0xCE4E5D9B0A4FF560, Entity, net_id: i32);
	native!(network_get_entity_is_networked, 0xC7827959479DCC78, bool, entity: Entity);
	native!(network_get_entity_is_local, 0x0991549DE4D64762, bool, entity: Entity);
	native!(network_register_entity_as_networked, 0x06FAACD625D80CAA, (), entity: Entity);
	native!(network_unregister_networked_entity, 0x7368E683BB9038D6, (), entity: Entity);
	native!(network_does_network_id_exist, 0x38CE16C96BD11344, bool, net_id: i32);
	native!(network_does_entity_exist_with_network_id, 0x18A47D074708FD68, bool, entity: Entity);
	native!(network_request_control_of_network_id, 0xA670B3662FAFFBD0, bool, net_id: i32);
	native!(network_has_control_of_network_id, 0x4D36070FE0215186, bool, net_id: i32);
	native!(_0x7242f8b741ce1086, 0x7242F8B741CE1086, bool, net_id: i32);
	native!(network_request_control_of_entity, 0xB69317BF5E782347, bool, entity: Entity);
	native!(network_request_control_of_door, 0x870DDFD5A4A796E4, bool, door_id: i32);
	native!(network_has_control_of_entity, 0x01BF60A500E28887, bool, entity: Entity);
	native!(network_has_control_of_pickup, 0x5BC9495F0B3B6FA6, bool, pickup: Pickup);
	native!(network_has_control_of_door, 0xCB3C68ADB06195DF, bool, door_hash: Hash);
	native!(network_is_door_networked, 0xC01E93FAC20C3346, bool, door_hash: Hash);
	native!(veh_to_net, 0xB4C94523F023419C, i32, vehicle: Vehicle);
	native!(ped_to_net, 0x0EDEC3C276198689, i32, ped: Ped);
	native!(obj_to_net, 0x99BFDC94A603E541, i32, object: Object);
	native!(net_to_veh, 0x367B936610BA360C, Vehicle, net_handle: i32);
	native!(net_to_ped, 0xBDCD95FC216A8B3E, Ped, net_handle: i32);
	native!(net_to_obj, 0xD8515F5FEA14CB3F, Object, net_handle: i32);
	native!(net_to_ent, 0xBFFEAB45A9A9094A, Entity, net_handle: i32);
	native!(network_get_local_handle, 0xE86051786B66CD8E, (), network_handle: &mut i32, buffer_size: i32);
	native!(network_handle_from_user_id, 0xDCD51DD8F87AEC5C, (), user_id: *const c_char, network_handle: &mut i32, buffer_size: i32);
	native!(network_handle_from_member_id, 0xA0FD21BED61E5C4C, (), member_id: *const c_char, network_handle: &mut i32, buffer_size: i32);
	native!(network_handle_from_player, 0x388EB2B86C73B6B3, (), player: Player, network_handle: &mut i32, buffer_size: i32);
	native!(network_hash_from_player_handle, 0xBC1D768F2F5D6C05, Hash, player: Player);
	native!(network_hash_from_gamer_handle, 0x58575AC3CF2CA8EC, Hash, network_handle: &mut i32);
	native!(network_handle_from_friend, 0xD45CB817D7E177D2, (), friend_index: i32, network_handle: &mut i32, buffer_size: i32);
	native!(network_gamertag_from_handle_start, 0x9F0C0A981D73FA56, bool, network_handle: &mut i32);
	native!(network_gamertag_from_handle_pending, 0xB071E27958EF4CF0, bool);
	native!(network_gamertag_from_handle_succeeded, 0xFD00798DBA7523DD, bool);
	native!(network_get_gamertag_from_handle, 0x426141162EBE5CDB, *const c_char, network_handle: &mut i32);
	native!(_0xd66c9e72b3cc4982, 0xD66C9E72B3CC4982, i32, p0: &mut i32, p1: i32);
	native!(_0x58cc181719256197, 0x58CC181719256197, i32, p0: i32, p1: i32, p2: i32);
	native!(network_are_handles_the_same, 0x57DBA049E110F217, bool, net_handle1: &mut i32, net_handle2: &mut i32);
	native!(network_is_handle_valid, 0x6F79B93B0A8E4133, bool, network_handle: &mut i32, buffer_size: i32);
	native!(network_get_player_from_gamer_handle, 0xCE5F689CF5A0A49D, Player, network_handle: &mut i32);
	native!(network_member_id_from_gamer_handle, 0xC82630132081BB6F, *const c_char, network_handle: &mut i32);
	native!(network_is_gamer_in_my_session, 0x0F10B05DDF8D16E9, bool, network_handle: &mut i32);
	native!(network_show_profile_ui, 0x859ED1CEA343FCA8, (), network_handle: &mut i32);
	native!(network_player_get_name, 0x7718D2E2060837D2, *const c_char, player: Player);
	native!(network_player_get_userid, 0x4927FC39CD0869A0, *const c_char, player: Player, user_id: &mut i32);
	native!(network_player_is_rockstar_dev, 0x544ABDDA3B409B6D, bool, player: Player);
	native!(network_player_index_is_cheater, 0x565E430DB3B05BEC, bool, player: Player);
	native!(_network_get_entity_net_script_id, 0x815F18AD865F057F, i32, entity: Entity);
	native!(_0x37d5f739fd494675, 0x37D5F739FD494675, i32, p0: i32);
	native!(network_is_inactive_profile, 0x7E58745504313A2E, bool, p0: &mut i32);
	native!(network_get_max_friends, 0xAFEBB0D5D8F687D2, i32);
	native!(network_get_friend_count, 0x203F1CFD823B27A4, i32);
	native!(network_get_friend_name, 0xE11EBBB2A783FE8B, *const c_char, friend_index: i32);
	native!(_network_get_friend_name_from_index, 0x4164F227D052E293, *const c_char, friend_index: i32);
	native!(network_is_friend_online, 0x425A44533437B64D, bool, name: *const c_char);
	native!(network_is_friend_handle_online, 0x87EB7A3FFCB314DB, bool, network_handle: &mut i32);
	native!(network_is_friend_in_same_title, 0x2EA9A3BEDF3F17B8, bool, friend_name: *const c_char);
	native!(network_is_friend_in_multiplayer, 0x57005C18827F3A28, bool, friend_name: *const c_char);
	native!(network_is_friend, 0x1A24A179F9B31654, bool, network_handle: &mut i32);
	native!(network_is_pending_friend, 0x0BE73DA6984A6E33, i32, p0: i32);
	native!(network_is_adding_friend, 0x6EA101606F6E4D81, i32);
	native!(network_add_friend, 0x8E02D73914064223, bool, network_handle: &mut i32, message: *const c_char);
	native!(network_is_friend_index_online, 0xBAD8F2A42B844821, bool, friend_index: i32);
	native!(network_set_player_is_passive, 0x1B857666604B1A74, (), toggle: bool);
	native!(network_get_player_owns_waypoint, 0x82377B65E943F72D, bool, player: Player);
	native!(network_can_set_waypoint, 0xC927EC229934AF60, bool);
	native!(_0x4c2a9fdc22377075, 0x4C2A9FDC22377075, ());
	native!(_0xb309ebea797e001f, 0xB309EBEA797E001F, i32, p0: i32);
	native!(_0x26f07dd83a5f7f98, 0x26F07DD83A5F7F98, i32);
	native!(network_has_headset, 0xE870F9F1F7B4F1FA, bool);
	native!(_0x7d395ea61622e116, 0x7D395EA61622E116, (), p0: bool);
	native!(network_is_local_talking, 0xC0D2AF00BCC234CA, bool);
	native!(network_gamer_has_headset, 0xF2FD55CB574BCC55, bool, network_handle: &mut i32);
	native!(network_is_gamer_talking, 0x71C33B22606CD88A, bool, network_handle: &mut i32);
	native!(_network_can_communicate_with_gamer_2, 0x8F5D1AD832AEB06C, bool, network_handle: &mut i32);
	native!(network_can_communicate_with_gamer, 0xA150A4F065806B1F, bool, network_handle: &mut i32);
	native!(network_is_gamer_muted_by_me, 0xCE60DE011B6C7978, bool, network_handle: &mut i32);
	native!(network_am_i_muted_by_gamer, 0xDF02A2C93F1F26DA, bool, network_handle: &mut i32);
	native!(network_is_gamer_blocked_by_me, 0xE944C4F5AF1B5883, bool, network_handle: &mut i32);
	native!(network_am_i_blocked_by_gamer, 0x15337C7C268A27B2, bool, network_handle: &mut i32);
	native!(network_can_view_gamer_user_content, 0xB57A49545BA53CE7, bool, network_handle: &mut i32);
	native!(network_has_view_gamer_user_content_result, 0xCCA4318E1AB03F1F, bool, network_handle: &mut i32);
	native!(network_can_play_multiplayer_with_gamer, 0x07DD29D5E22763F1, bool, network_handle: &mut i32);
	native!(network_can_gamer_play_multiplayer_with_me, 0x135F9B7B7ADD2185, bool, network_handle: &mut i32);
	native!(network_is_player_talking, 0x031E11F3D447647E, bool, player: Player);
	native!(network_player_has_headset, 0x3FB99A8B08D18FD6, bool, player: Player);
	native!(network_is_player_muted_by_me, 0x8C71288AE68EDE39, bool, player: Player);
	native!(network_am_i_muted_by_player, 0x9D6981DFC91A8604, bool, player: Player);
	native!(network_is_player_blocked_by_me, 0x57AF1F8E27483721, bool, player: Player);
	native!(network_am_i_blocked_by_player, 0x87F395D957D4353D, bool, player: Player);
	native!(network_get_player_loudness, 0x21A1684A25C2867F, f32, player: Player);
	native!(network_set_talker_proximity, 0xCBF12D65F95AD686, (), value: f32);
	native!(network_get_talker_proximity, 0x84F0F13120B4E098, f32);
	native!(network_set_voice_active, 0xBABEC9E69A91C57B, (), toggle: bool);
	native!(_0xcfeb46dcd7d8d5eb, 0xCFEB46DCD7D8D5EB, (), p0: bool);
	native!(network_override_transition_chat, 0xAF66059A131AA269, (), p0: bool);
	native!(network_set_team_only_chat, 0xD5B4883AC32F24C3, (), toggle: bool);
	native!(_0x265559da40b3f327, 0x265559DA40B3F327, (), p0: i32);
	native!(_0x4348bfda56023a2f, 0x4348BFDA56023A2F, i32, p0: i32, p1: i32);
	native!(network_override_team_restrictions, 0x6F697A66CE78674E, (), team: i32, toggle: bool);
	native!(network_set_override_spectator_mode, 0x70DA3BF8DACD3210, (), toggle: bool);
	native!(_0x3c5c1e2c2ff814b1, 0x3C5C1E2C2FF814B1, (), toggle: bool);
	native!(_0x9d7afcbf21c51712, 0x9D7AFCBF21C51712, (), toggle: bool);
	native!(network_set_no_spectator_chat, 0xF46A1E03E8755980, (), toggle: bool);
	native!(_0x6a5d89d7769a40d8, 0x6A5D89D7769A40D8, (), toggle: bool);
	native!(network_override_chat_restrictions, 0x3039AE5AD2C9C0C4, (), player: Player, toggle: bool);
	native!(network_override_send_restrictions, 0x97DD4C5944CC2E6A, (), player: Player, toggle: bool);
	native!(network_override_send_restrictions_all, 0x57B192B4D4AD23D5, (), toggle: bool);
	native!(network_override_receive_restrictions, 0xDDF73E2B1FEC5AB4, (), player: Player, toggle: bool);
	native!(network_override_receive_restrictions_all, 0x0FF2862B61A58AF9, (), toggle: bool);
	native!(network_set_voice_channel, 0xEF6212C2EFEF1A23, (), channel: i32);
	native!(network_clear_voice_channel, 0xE036A705F989E049, ());
	native!(network_apply_voice_proximity_override, 0xDBD2056652689917, (), x: f32, y: f32, z: f32);
	native!(network_clear_voice_proximity_override, 0xF03755696450470C, ());
	native!(_0x5e3aa4ca2b6fb0ee, 0x5E3AA4CA2B6FB0EE, (), p0: i32);
	native!(_0xca575c391fea25cc, 0xCA575C391FEA25CC, (), p0: i32);
	native!(_0xadb57e5b663cca8b, 0xADB57E5B663CCA8B, (), p0: Player, p1: &mut f32, p2: &mut f32);
	native!(_0x8ef52acaecc51d9c, 0x8EF52ACAECC51D9C, (), toggle: bool);
	native!(_network_is_text_chat_active, 0x5FCF4D7069B09026, bool);
	native!(shutdown_and_launch_single_player_game, 0x593850C16A36B692, ());
	native!(_shutdown_and_load_most_recent_save, 0x9ECA15ADFE141431, bool);
	native!(network_set_friendly_fire_option, 0xF808475FA571D823, (), toggle: bool);
	native!(network_set_rich_presence, 0x1DCCACDCFC569362, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(network_set_rich_presence_string, 0x3E200C2BCF4164EB, (), p0: i32, string: *const c_char);
	native!(network_get_timeout_time, 0x5ED0356A0CE3A34F, i32);
	native!(_network_respawn_coords, 0x9769F811D1785B03, (), player: Player, x: f32, y: f32, z: f32, p4: bool, p5: bool);
	native!(_0xbf22e0f32968e967, 0xBF22E0F32968E967, (), player: Player, p1: bool);
	native!(remove_all_sticky_bombs_from_entity, 0x715135F4B82AC90D, (), entity: Entity, ped: Ped);
	native!(_0x2e4c123d1c8a710e, 0x2E4C123D1C8A710E, i32, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(network_clan_service_is_valid, 0x579CCED0265D4896, bool);
	native!(network_clan_player_is_active, 0xB124B57F571D8F18, bool, network_handle: &mut i32);
	native!(network_clan_player_get_desc, 0xEEE6EACBE8874FBA, bool, clan_desc: &mut i32, buffer_size: i32, network_handle: &mut i32);
	native!(network_clan_is_rockstar_clan, 0x7543BB439F63792B, bool, clan_desc: &mut i32, buffer_size: i32);
	native!(network_clan_get_ui_formatted_tag, 0xF45352426FF3A4F0, (), clan_desc: &mut i32, buffer_size: i32, formatted_tag: &mut char);
	native!(network_clan_get_local_memberships_count, 0x1F471B79ACC90BEF, i32);
	native!(network_clan_get_membership_desc, 0x48DE78AF2C8885B8, bool, member_desc: &mut i32, p1: i32);
	native!(network_clan_download_membership, 0xA989044E70010ABE, bool, network_handle: &mut i32);
	native!(network_clan_download_membership_pending, 0x5B9E023DC6EBEDC0, bool, p0: &mut i32);
	native!(_network_is_clan_membership_finished_downloading, 0xB3F64A6A91432477, bool);
	native!(network_clan_remote_memberships_are_in_cache, 0xBB6E6FEE99D866B2, bool, p0: &mut i32);
	native!(network_clan_get_membership_count, 0xAAB11F6C4ADBC2C1, i32, p0: &mut i32);
	native!(network_clan_get_membership_valid, 0x48A59CF88D43DF0E, bool, p0: &mut i32, p1: i32);
	native!(network_clan_get_membership, 0xC8BC2011F67B3411, bool, p0: &mut i32, clan_membership: &mut i32, p2: i32);
	native!(network_clan_join, 0x9FAAA4F4FC71F87F, bool, clan_desc: i32);
	native!(_network_clan_animation, 0x729E3401F0430686, bool, anim_dict: *const c_char, anim_name: *const c_char);
	native!(_0x2b51edbefc301339, 0x2B51EDBEFC301339, bool, p0: i32, p1: *const c_char);
	native!(_0xc32ea7a2f6ca7557, 0xC32EA7A2F6CA7557, i32);
	native!(network_clan_get_emblem_txd_name, 0x5835D9CD92E83184, bool, net_handle: &mut i32, txd_name: &mut char);
	native!(network_clan_request_emblem, 0x13518FF1C6B28938, bool, p0: i32);
	native!(network_clan_is_emblem_ready, 0xA134777FF7F33331, bool, p0: i32, p1: &mut i32);
	native!(network_clan_release_emblem, 0x113E6E3E50E286B0, (), p0: i32);
	native!(network_get_primary_clan_data_clear, 0x9AA46BADAD0E27ED, i32);
	native!(network_get_primary_clan_data_cancel, 0x042E4B70B93E6054, ());
	native!(network_get_primary_clan_data_start, 0xCE86D8191B762107, bool, p0: &mut i32, p1: i32);
	native!(network_get_primary_clan_data_pending, 0xB5074DB804E28CE7, i32);
	native!(network_get_primary_clan_data_success, 0x5B4F04F19376A0BA, i32);
	native!(network_get_primary_clan_data_new, 0xC080FF658B2E41DA, bool, p0: &mut i32, p1: &mut i32);
	native!(set_network_id_can_migrate, 0x299EEB23175895FC, (), net_id: i32, toggle: bool);
	native!(set_network_id_exists_on_all_machines, 0xE05E81A888FA63C8, (), net_id: i32, toggle: bool);
	native!(_set_network_id_sync_to_player, 0xA8A024587329F36A, (), net_id: i32, player: Player, toggle: bool);
	native!(network_set_entity_can_blend, 0xD830567D88A1E873, (), entity: Entity, toggle: bool);
	native!(_0x0379daf89ba09aa5, 0x0379DAF89BA09AA5, (), p0: i32, p1: i32);
	native!(_network_set_entity_invisible_to_network, 0xF1CA12B18AEF5298, (), entity: Entity, toggle: bool);
	native!(set_network_id_visible_in_cutscene, 0xA6928482543022B4, (), net_id: i32, p1: bool, p2: bool);
	native!(_0x32ebd154cb6b8b99, 0x32EBD154CB6B8B99, (), p0: i32, p1: i32, p2: i32);
	native!(_0x6540edc4f45da089, 0x6540EDC4F45DA089, (), player: Player);
	native!(set_network_cutscene_entities, 0xAAA553E7DD28A457, (), toggle: bool);
	native!(_0x3fa36981311fa4ff, 0x3FA36981311FA4FF, (), net_id: i32, state: bool);
	native!(is_network_id_owned_by_participant, 0xA1607996431332DF, bool, net_id: i32);
	native!(set_local_player_visible_in_cutscene, 0xD1065D68947E7B6E, (), p0: bool, p1: bool);
	native!(set_local_player_invisible_locally, 0xE5F773C1A1D9D168, (), p0: bool);
	native!(set_local_player_visible_locally, 0x7619364C82D3BF14, (), p0: bool);
	native!(set_player_invisible_locally, 0x12B37D54667DB0B8, (), player: Player, toggle: bool);
	native!(set_player_visible_locally, 0xFAA10F1FAFB11AF2, (), player: Player, toggle: bool);
	native!(fade_out_local_player, 0x416DBD4CD6ED8DD2, (), p0: bool);
	native!(network_fade_out_entity, 0xDE564951F95E09ED, (), entity: Entity, normal: bool, slow: bool);
	native!(network_fade_in_entity, 0x1F4ED342ACEFE62D, (), entity: Entity, state: bool, p2: i32);
	native!(network_is_player_fading, 0x631DC5DFF4B110E3, bool, player: Player);
	native!(network_is_entity_fading, 0x422F32CC7E56ABAD, bool, entity: Entity);
	native!(is_player_in_cutscene, 0xE73092F4157CD126, bool, player: Player);
	native!(set_entity_visible_in_cutscene, 0xE0031D3C8F36AB82, (), p0: i32, p1: bool, p2: bool);
	native!(set_entity_locally_invisible, 0xE135A9FF3F5D05D8, (), entity: Entity);
	native!(set_entity_locally_visible, 0x241E289B5C059EDC, (), entity: Entity);
	native!(is_damage_tracker_active_on_network_id, 0x6E192E33AD436366, bool, net_id: i32);
	native!(activate_damage_tracker_on_network_id, 0xD45B1FFCCD52FF19, (), net_id: i32, toggle: bool);
	native!(_is_damage_tracker_active_on_player, 0xB2092A1EAA7FD45F, bool, player: Player);
	native!(_activate_damage_tracker_on_player, 0xBEC0816FF5ACBCDA, (), player: Player, toggle: bool);
	native!(is_sphere_visible_to_another_machine, 0xD82CF8E64C8729D8, bool, p0: f32, p1: f32, p2: f32, p3: f32);
	native!(is_sphere_visible_to_player, 0xDC3A310219E5DA62, bool, p0: i32, p1: f32, p2: f32, p3: f32, p4: f32);
	native!(reserve_network_mission_objects, 0x4E5C93BD0C32FBF8, (), amount: i32);
	native!(reserve_network_mission_peds, 0xB60FEBA45333D36F, (), amount: i32);
	native!(reserve_network_mission_vehicles, 0x76B02E21ED27A469, (), amount: i32);
	native!(_reserve_network_local_objects, 0x797F9C5E661D920E, (), p0: i32);
	native!(_reserve_network_local_peds, 0x2C8DF5D129595281, (), p0: i32);
	native!(_reserve_network_local_vehicles, 0x42613035157E4208, (), p0: i32);
	native!(can_register_mission_objects, 0x800DD4721A8B008B, bool, amount: i32);
	native!(can_register_mission_peds, 0xBCBF4FEF9FA5D781, bool, amount: i32);
	native!(can_register_mission_vehicles, 0x7277F1F2E085EE74, bool, amount: i32);
	native!(_can_register_mission_pickups, 0x0A49D1CB6E34AF72, bool, amount: i32);
	native!(_0xe16aa70ce9beedc3, 0xE16AA70CE9BEEDC3, i32, p0: i32);
	native!(can_register_mission_entities, 0x69778E7564BADE6D, bool, ped_amt: i32, vehicle_amt: i32, object_amt: i32, pickup_amt: i32);
	native!(get_num_reserved_mission_objects, 0xAA81B5F10BC43AC2, i32, p0: bool, p1: i32);
	native!(get_num_reserved_mission_peds, 0x1F13D5AE5CB17E17, i32, p0: bool, p1: i32);
	native!(get_num_reserved_mission_vehicles, 0xCF3A965906452031, i32, p0: bool, p1: i32);
	native!(get_num_created_mission_objects, 0x12B6281B6C6706C0, i32, p0: bool);
	native!(get_num_created_mission_peds, 0xCB215C4B56A7FAE7, i32, p0: bool);
	native!(get_num_created_mission_vehicles, 0x0CD9AB83489430EA, i32, p0: bool);
	native!(_0xe42d626eec94e5d9, 0xE42D626EEC94E5D9, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(get_max_num_network_objects, 0xC7BE335216B5EC7C, i32);
	native!(get_max_num_network_peds, 0x0C1F7D49C39D2289, i32);
	native!(get_max_num_network_vehicles, 0x0AFCE529F69B21FF, i32);
	native!(get_max_num_network_pickups, 0xA72835064DD63E4C, i32);
	native!(_0xba7f0b77d80a4eb7, 0xBA7F0B77D80A4EB7, (), p0: i32, p1: i32);
	native!(get_network_time, 0x7A5487FE9FAA6B48, i32);
	native!(get_network_time_accurate, 0x89023FBBF9200E9F, i32);
	native!(has_network_time_started, 0x46718ACEEDEAFC84, bool);
	native!(get_time_offset, 0x017008CCDAD48503, i32, time_a: i32, time_b: i32);
	native!(is_time_less_than, 0xCB2CF5148012C8D0, bool, time_a: i32, time_b: i32);
	native!(is_time_more_than, 0xDE350F8651E4346C, bool, time_a: i32, time_b: i32);
	native!(is_time_equal_to, 0xF5BC95857BD6D512, bool, time_a: i32, time_b: i32);
	native!(get_time_difference, 0xA2C6FC031D46FFF0, i32, time_a: i32, time_b: i32);
	native!(get_time_as_string, 0x9E23B1777A927DAD, *const c_char, time: i32);
	native!(_0xf12e6cd06c73d69e, 0xF12E6CD06C73D69E, i32);
	native!(get_cloud_time_as_int, 0x9A73240B49945C76, i32);
	native!(_get_date_and_time_from_unix_epoch, 0xAC97AF97FA68E5D5, (), unix_epoch: i32, time_structure: &mut i32);
	native!(network_set_in_spectator_mode, 0x423DE3854BB50894, (), toggle: bool, player_ped: Ped);
	native!(network_set_in_spectator_mode_extended, 0x419594E137637120, (), toggle: bool, player_ped: Ped, p2: bool);
	native!(network_set_in_free_cam_mode, 0xFC18DB55AE19E046, (), toggle: bool);
	native!(_0x5c707a667df8b9fa, 0x5C707A667DF8B9FA, (), toggle: bool, player: Player);
	native!(network_is_in_spectator_mode, 0x048746E388762E11, bool);
	native!(network_set_in_mp_cutscene, 0x9CA5DE655269FEC4, (), p0: bool, p1: bool);
	native!(network_is_in_mp_cutscene, 0x6CC27C9FA2040220, bool);
	native!(network_is_player_in_mp_cutscene, 0x63F9EE203C3619F2, bool, player: Player);
	native!(_0xfac18e7356bd3210, 0xFAC18E7356BD3210, ());
	native!(set_network_vehicle_respot_timer, 0xEC51713AB6EC36E8, (), net_id: i32, time: i32, p2: i32, p3: i32);
	native!(set_network_vehicle_as_ghost, 0x6274C4712850841E, (), vehicle: Vehicle, toggle: bool);
	native!(_0xa2a707979fe754dc, 0xA2A707979FE754DC, (), p0: i32, p1: i32);
	native!(_0x838da0936a24ed4d, 0x838DA0936A24ED4D, (), p0: i32, p1: i32);
	native!(use_player_colour_instead_of_team_colour, 0x5FFE9B4144F9712F, (), toggle: bool, p1: bool);
	native!(_0x21d04d7bc538c146, 0x21D04D7BC538C146, bool, entity: Entity);
	native!(_0x13f1fcb111b820b0, 0x13F1FCB111B820B0, (), p0: bool);
	native!(_0xa7c511fa1c5bda38, 0xA7C511FA1C5BDA38, (), p0: i32, p1: i32);
	native!(_0x658500ae6d723a7e, 0x658500AE6D723A7E, (), p0: i32);
	native!(_0x17330ebf2f2124a8, 0x17330EBF2F2124A8, ());
	native!(_0x4ba166079d658ed4, 0x4BA166079D658ED4, (), p0: i32, p1: i32);
	native!(_0xd7b6c73cad419bcf, 0xD7B6C73CAD419BCF, (), p0: bool);
	native!(_0x7ef7649b64d7ff10, 0x7EF7649B64D7FF10, bool, entity: Entity);
	native!(_0x77758139ec9b66c7, 0x77758139EC9B66C7, (), p0: bool);
	native!(network_create_synchronised_scene, 0x7CD6BC4C2BBDD526, i32, x: f32, y: f32, z: f32, x_rot: f32, y_rot: f32, z_rot: f32, p6: i32, p7: bool, p8: bool, p9: f32, p10: f32, p11: f32);
	native!(network_add_ped_to_synchronised_scene, 0x742A637471BCECD9, (), ped: Ped, net_scene: i32, anim_dict: *const c_char, animn_name: *const c_char, speed: f32, speed_multiplier: f32, duration: i32, flag: i32, playback_rate: f32, p9: i32);
	native!(_0xa5eafe473e45c442, 0xA5EAFE473E45C442, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32);
	native!(network_add_entity_to_synchronised_scene, 0xF2404D68CBC855FA, (), entity: Entity, net_scene: i32, anim_dict: *const c_char, anim_name: *const c_char, speed: f32, speed_mulitiplier: f32, flag: i32);
	native!(_0x45f35c0edc33b03b, 0x45F35C0EDC33B03B, (), net_scene: i32, model_hash: Hash, x: f32, y: f32, z: f32, p5: f32, p6: *const c_char, p7: f32, p8: f32, flags: i32);
	native!(_network_force_local_use_of_synced_scene_camera, 0xCF8BD3B0BD6D42D7, (), net_scene: i32, anim_dict: *const c_char, anim_name: *const c_char);
	native!(network_attach_synchronised_scene_to_entity, 0x478DCBD2A98B705A, (), net_scene: i32, entity: Entity, bone: i32);
	native!(network_start_synchronised_scene, 0x9A1B3FCDB36C8697, (), net_scene: i32);
	native!(network_stop_synchronised_scene, 0xC254481A4574CB2F, (), net_scene: i32);
	native!(_network_convert_synchronised_scene_to_synchronized_scene, 0x02C40BF885C567B6, i32, net_scene: i32);
	native!(_0xc9b43a33d09cada7, 0xC9B43A33D09CADA7, (), p0: i32);
	native!(_0x144da052257ae7d8, 0x144DA052257AE7D8, (), p0: i32);
	native!(_0xfb1f9381e80fa13f, 0xFB1F9381E80FA13F, i32, p0: i32, p1: i32);
	native!(network_start_respawn_search_for_player, 0x5A6FFA2433E2F14C, bool, player: Player, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, flags: i32);
	native!(network_start_respawn_search_in_angled_area_for_player, 0x4BA92A18502BCA61, bool, player: Player, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: f32, p10: f32, flags: i32);
	native!(network_query_respawn_results, 0x3C891A251567DFCE, i32, p0: &mut i32);
	native!(network_cancel_respawn_search, 0xFB8F2A6F3DF08CBE, ());
	native!(network_get_respawn_result, 0x371EA43692861CF1, (), random_int: i32, coordinates: &mut Vec3, heading: &mut f32);
	native!(network_get_respawn_result_flags, 0x6C34F1208B8923FD, i32, p0: i32);
	native!(network_start_solo_tutorial_session, 0x17E0198B3882C2CB, ());
	native!(_0xfb680d403909dc70, 0xFB680D403909DC70, (), p0: i32, p1: i32);
	native!(network_end_tutorial_session, 0xD0AFAFF5A51D72F7, ());
	native!(network_is_in_tutorial_session, 0xADA24309FE08DACF, bool);
	native!(_0xb37e4e6a2388ca7b, 0xB37E4E6A2388CA7B, bool);
	native!(network_is_tutorial_session_change_pending, 0x35F0B98A8387274D, bool);
	native!(network_get_player_tutorial_session_instance, 0x3B39236746714134, i32, player: Player);
	native!(_network_is_player_equal_to_index, 0x9DE986FC9A87C474, bool, player: Player, index: i32);
	native!(network_conceal_player, 0xBBDF066252829606, (), player: Player, toggle: bool, p2: bool);
	native!(network_is_player_concealed, 0x919B3C98ED8292F9, bool, player: Player);
	native!(_network_conceal_entity, 0x1632BE0AC1E62876, (), entity: Entity, toggle: bool);
	native!(_network_is_entity_concealed, 0x71302EC70689052A, bool, entity: Entity);
	native!(network_override_clock_time, 0xE679E3E06E363892, (), hours: i32, minutes: i32, seconds: i32);
	native!(network_clear_clock_time_override, 0xD972DF67326F966E, ());
	native!(network_is_clock_time_overridden, 0xD7C95D322FF57522, bool);
	native!(network_add_entity_area, 0x494C8FB299290269, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32);
	native!(network_add_entity_angled_area, 0x376C6375BA60293A, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32);
	native!(network_add_entity_displayed_boundaries, 0x25B99872D588A101, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32);
	native!(_0x2b1c623823db0d9d, 0x2B1C623823DB0D9D, i32, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(network_remove_entity_area, 0x93CF869BAA0C4874, bool, p0: i32);
	native!(network_entity_area_does_exist, 0xE64A3CA08DFA37A9, bool, p0: i32);
	native!(_0x4df7cfff471a7fb1, 0x4DF7CFFF471A7FB1, bool, p0: i32);
	native!(network_entity_area_is_occupied, 0x4A2D4E8BF4265B0F, bool, p0: i32);
	native!(_network_set_network_id_dynamic, 0x2B1813ABA29016C5, (), net_id: i32, toggle: bool);
	native!(_0xa6fceccf4721d679, 0xA6FCECCF4721D679, (), p0: i32);
	native!(_0x95baf97c82464629, 0x95BAF97C82464629, (), p0: i32, p1: i32);
	native!(network_request_cloud_background_scripts, 0x924426BFFD82E915, bool);
	native!(_network_is_cloud_background_scripts_request_pending, 0x8132C0EB8B2B3293, bool);
	native!(network_request_cloud_tunables, 0x42FB3B532D526E6C, ());
	native!(network_is_tunable_cloud_request_pending, 0x0467C11ED88B7D28, bool);
	native!(network_get_tunable_cloud_crc, 0x10BD227A753B0D84, i32);
	native!(network_does_tunable_exist, 0x85E5F8B9B898B20A, bool, tunable_context: *const c_char, tunable_name: *const c_char);
	native!(network_access_tunable_int, 0x8BE1146DFD5D4468, bool, tunable_context: *const c_char, tunable_name: *const c_char, value: &mut i32);
	native!(network_access_tunable_float, 0xE5608CA7BC163A5F, bool, tunable_context: *const c_char, tunable_name: *const c_char, value: &mut f32);
	native!(network_access_tunable_bool, 0xAA6A47A573ABB75A, bool, tunable_context: *const c_char, tunable_name: *const c_char);
	native!(network_does_tunable_exist_hash, 0xE4E53E1419D81127, bool, tunable_context: Hash, tunable_name: Hash);
	native!(_network_allocate_tunables_registration_data_map, 0xFAFC23AEE23868DB, bool);
	native!(network_access_tunable_int_hash, 0x40FCE03E50E8DBE8, bool, tunable_context: Hash, tunable_name: Hash, value: &mut i32);
	native!(_network_register_tunable_int_hash, 0x3A8B55FDA4C8DDEF, bool, context_hash: Hash, name_hash: Hash, value: &mut i32);
	native!(network_access_tunable_float_hash, 0x972BC203BBC4C4D5, bool, tunable_context: Hash, tunable_name: Hash, value: &mut f32);
	native!(_network_register_tunable_float_hash, 0x1950DAE9848A4739, bool, context_hash: Hash, name_hash: Hash, value: &mut f32);
	native!(network_access_tunable_bool_hash, 0xEA16B69D93D71A45, bool, tunable_context: Hash, tunable_name: Hash);
	native!(_network_register_tunable_bool_hash, 0x697F508861875B42, bool, context_hash: Hash, name_hash: Hash, value: &mut bool);
	native!(network_try_access_tunable_bool_hash, 0xC7420099936CE286, bool, tunable_context: Hash, tunable_name: Hash, default_value: bool);
	native!(network_get_content_modifier_list_id, 0x187382F8A3E0A6C3, i32, content_hash: Hash);
	native!(_0x7db53b37a2f211a0, 0x7DB53B37A2F211A0, i32);
	native!(network_reset_body_tracker, 0x72433699B4E6DD64, ());
	native!(_network_get_num_body_trackers, 0xD38C4A6D047C019D, i32);
	native!(_0x2e0bf682cc778d49, 0x2E0BF682CC778D49, bool, p0: i32);
	native!(_0x0ede326d47cd0f3e, 0x0EDE326D47CD0F3E, bool, ped: Ped, player: Player);
	native!(_network_set_vehicle_wheels_destructible, 0x890E2C5ABED7236D, (), p0: i32, p1: i32);
	native!(_0x38b7c51ab1edc7d8, 0x38B7C51AB1EDC7D8, (), entity: Entity, toggle: bool);
	native!(network_explode_vehicle, 0x301A42153C9AD707, (), vehicle: Vehicle, is_audible: bool, is_invisible: bool, p3: bool);
	native!(_0x2a5e0621dd815a9a, 0x2A5E0621DD815A9A, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xcd71a4ecab22709e, 0xCD71A4ECAB22709E, (), entity: Entity);
	native!(network_override_coords_and_heading, 0xA7E30DE9272B6D49, (), ped: Ped, x: f32, y: f32, z: f32, heading: f32);
	native!(_0xe6717e652b8c8d8a, 0xE6717E652B8C8D8A, (), p0: i32, p1: i32);
	native!(network_disable_proximity_migration, 0x407091CF6037118E, (), net_id: i32);
	native!(network_set_property_id, 0x1775961C2FBBCB5C, (), id: i32);
	native!(network_clear_property_id, 0xC2B82527CA77053E, ());
	native!(_0x367ef5e2f439b4c6, 0x367EF5E2F439B4C6, (), p0: i32);
	native!(_0x94538037ee44f5cf, 0x94538037EE44F5CF, (), p0: bool);
	native!(network_cache_local_player_head_blend_data, 0xBD0BE0BFC927EAC1, ());
	native!(network_has_cached_player_head_blend_data, 0x237D5336A9A54108, bool, player: Player);
	native!(network_apply_cached_player_head_blend_data, 0x99B72C7ABDE5C910, bool, ped: Ped, player: Player);
	native!(get_num_commerce_items, 0xF2EAC213D5EA0623, i32);
	native!(is_commerce_data_valid, 0xEA14EEF5B7CD2C30, bool);
	native!(_0xb606e6cc59664972, 0xB606E6CC59664972, (), p0: i32);
	native!(_0x1d4dc17c38feaff0, 0x1D4DC17C38FEAFF0, bool);
	native!(get_commerce_item_id, 0x662635855957C411, *const c_char, index: i32);
	native!(get_commerce_item_name, 0xB4271092CA7EDF48, *const c_char, index: i32);
	native!(get_commerce_product_price, 0xCA94551B50B4932C, *const c_char, index: i32);
	native!(get_commerce_item_num_cats, 0x2A7776C709904AB0, i32, index: i32);
	native!(get_commerce_item_cat, 0x6F44CBF56D79FAC0, *const c_char, index: i32, index2: i32);
	native!(_0x58c21165f6545892, 0x58C21165F6545892, (), p0: *const c_char, p1: *const c_char, p2: i32);
	native!(is_commerce_store_open, 0x2EAC52B4019E2782, bool);
	native!(set_store_enabled, 0x9641A9FF718E9C5E, (), toggle: bool);
	native!(request_commerce_item_image, 0xA2F952104FC6DD4B, bool, index: i32);
	native!(release_all_commerce_item_images, 0x72D0706CD6CCDB58, ());
	native!(_0x722f5d28b61c5ea8, 0x722F5D28B61C5EA8, i32, p0: i32);
	native!(is_store_available_to_user, 0x883D79C4071E18B3, bool);
	native!(_0x265635150fb0d82e, 0x265635150FB0D82E, ());
	native!(_0x444c4525ece0a4b9, 0x444C4525ECE0A4B9, ());
	native!(_0x59328eb08c5ceb2b, 0x59328EB08C5CEB2B, bool);
	native!(_0xfae628f1e9adb239, 0xFAE628F1E9ADB239, (), p0: Hash, p1: i32, p2: Hash);
	native!(_0x754615490a029508, 0x754615490A029508, i32);
	native!(_0x155467aca0f55705, 0x155467ACA0F55705, i32);
	native!(cloud_delete_member_file, 0xC64DED7EF0D2FE37, i32, p0: *const c_char);
	native!(cloud_has_request_completed, 0x4C61B39930D045DA, bool, p0: i32);
	native!(_0x3a3d5568af297cd5, 0x3A3D5568AF297CD5, bool, p0: i32);
	native!(cloud_check_availability, 0x4F18196C8D38768D, ());
	native!(_0xc7abac5de675ee3b, 0xC7ABAC5DE675EE3B, i32);
	native!(cloud_get_availability_check_result, 0x0B0CC10720653F3B, i32);
	native!(_0x8b0c2964ba471961, 0x8B0C2964BA471961, i32);
	native!(_0x88b588b41ff7868e, 0x88B588B41FF7868E, i32);
	native!(_0x67fc09bc554a75e5, 0x67FC09BC554A75E5, i32);
	native!(_0x966dd84fb6a46017, 0x966DD84FB6A46017, ());
	native!(ugc_copy_content, 0x152D90E4C1B4738A, bool, p0: &mut i32, p1: &mut i32);
	native!(_0x9fedf86898f100e9, 0x9FEDF86898F100E9, i32);
	native!(ugc_has_create_finished, 0x5E24341A7F92A74B, bool);
	native!(_0x24e4e51fc16305f9, 0x24E4E51FC16305F9, i32);
	native!(ugc_get_create_result, 0xFBC5E768C7A77A6A, i32);
	native!(ugc_get_create_content_id, 0xC55A0B40FFB1ED23, i32);
	native!(ugc_clear_create_result, 0x17440AA15D1D3739, ());
	native!(ugc_query_my_content, 0x9BF438815F5D96EA, bool, p0: i32, p1: i32, p2: &mut i32, p3: i32, p4: i32, p5: i32);
	native!(_0x692d58df40657e8c, 0x692D58DF40657E8C, bool, p0: i32, p1: i32, p2: i32, p3: &mut i32, p4: i32, p5: bool);
	native!(ugc_query_by_content_id, 0x158EC424F35EC469, bool, content_id: *const c_char, latest_version: bool, content_type_name: *const c_char);
	native!(ugc_query_by_content_ids, 0xC7397A83F7A2A462, bool, data: &mut i32, count: i32, latest_version: bool, content_type_name: *const c_char);
	native!(_ugc_query_recently_created_content, 0x6D4CB481FAC835E8, bool, offset: i32, count: i32, content_type_name: *const c_char, p3: i32);
	native!(ugc_get_bookmarked_content, 0xD5A4B59980401588, bool, p0: i32, p1: i32, p2: &mut i32, p3: &mut i32);
	native!(ugc_get_my_content, 0x3195F8DD0D531052, bool, p0: i32, p1: i32, p2: &mut i32, p3: &mut i32);
	native!(ugc_get_friend_content, 0xF9E1CCAE8BA4C281, bool, p0: i32, p1: i32, p2: &mut i32, p3: &mut i32);
	native!(ugc_get_crew_content, 0x9F6E2821885CAEE2, bool, p0: i32, p1: i32, p2: i32, p3: &mut i32, p4: &mut i32);
	native!(ugc_get_get_by_category, 0x678BB03C1A3BD51E, bool, p0: i32, p1: i32, p2: i32, p3: &mut i32, p4: &mut i32);
	native!(set_balance_add_machine, 0x815E5E3073DA1D67, bool, content_id: *const c_char, content_type_name: *const c_char);
	native!(set_balance_add_machines, 0xB8322EEB38BE7C26, bool, data: &mut i32, data_count: i32, content_type_name: *const c_char);
	native!(_0xa7862bc5ed1dfd7e, 0xA7862BC5ED1DFD7E, bool, p0: i32, p1: i32, p2: &mut i32, p3: &mut i32);
	native!(_0x97a770beef227e2b, 0x97A770BEEF227E2B, bool, p0: i32, p1: i32, p2: &mut i32, p3: &mut i32);
	native!(_0x5324a0e3e4ce3570, 0x5324A0E3E4CE3570, bool, p0: i32, p1: i32, p2: &mut i32, p3: &mut i32);
	native!(ugc_cancel_query, 0xE9B99B6853181409, ());
	native!(ugc_is_getting, 0xD53ACDBEF24A46E8, bool);
	native!(ugc_has_get_finished, 0x02ADA21EA2F6918F, bool);
	native!(_0x941e5306bcd7c2c7, 0x941E5306BCD7C2C7, i32);
	native!(_0xc87e740d9f3872cc, 0xC87E740D9F3872CC, i32);
	native!(ugc_get_query_result, 0xEDF7F927136C224B, i32);
	native!(ugc_get_content_num, 0xE0A6138401BCB837, i32);
	native!(ugc_get_content_total, 0x769951E2455E2EB5, i32);
	native!(ugc_get_content_hash, 0x3A17A27D75C74887, Hash);
	native!(ugc_clear_query_results, 0xBA96394A0EECFA65, ());
	native!(ugc_get_content_user_id, 0xCD67AD041A394C9C, *const c_char, p0: i32);
	native!(_0x584770794d758c18, 0x584770794D758C18, bool, p0: i32, p1: &mut i32);
	native!(_0x8c8d2739ba44af0f, 0x8C8D2739BA44AF0F, bool, p0: i32);
	native!(ugc_get_content_user_name, 0x703F12425ECA8BF5, i32, p0: i32);
	native!(_0xaeab987727c5a8a4, 0xAEAB987727C5A8A4, bool, p0: i32);
	native!(_get_content_category, 0xA7BAB11E7C9C6C5A, i32, p0: i32);
	native!(ugc_get_content_id, 0x55AA95F481D694D2, *const c_char, p0: i32);
	native!(ugc_get_root_content_id, 0xC0173D6BFF4E0348, *const c_char, p0: i32);
	native!(ugc_get_content_name, 0xBF09786A7FCAB582, i32, p0: i32);
	native!(ugc_get_content_description_hash, 0x7CF0448787B23758, i32, p0: i32);
	native!(ugc_get_content_path, 0xBAF6BABF9E7CCC13, *const c_char, p0: i32, p1: i32);
	native!(ugc_get_content_updated_date, 0xCFD115B373C0DF63, (), p0: i32, p1: &mut i32);
	native!(ugc_get_content_file_version, 0x37025B27D9B658B1, i32, p0: i32, p1: i32);
	native!(_0x1d610eb0fea716d9, 0x1D610EB0FEA716D9, bool, p0: i32);
	native!(_0x7fcc39c46c3c03bd, 0x7FCC39C46C3C03BD, bool, p0: i32);
	native!(ugc_get_content_language, 0x32DD916F3F7C9672, i32, p0: i32);
	native!(ugc_get_content_is_published, 0x3054F114121C21EA, bool, p0: i32);
	native!(ugc_get_content_is_verified, 0xA9240A96C74CCA13, bool, p0: i32);
	native!(ugc_get_content_rating, 0x1ACCFBA3D8DAB2EE, i32, p0: i32, p1: i32);
	native!(ugc_get_content_rating_count, 0x759299C5BB31D2A9, i32, p0: i32, p1: i32);
	native!(ugc_get_content_rating_positive_count, 0x87E5C46C187FE0AE, i32, p0: i32, p1: i32);
	native!(ugc_get_content_rating_negative_count, 0x4E548C0D7AE39FF9, i32, p0: i32, p1: i32);
	native!(ugc_get_content_has_player_record, 0x70EA8DA57840F9BE, bool, p0: i32);
	native!(ugc_get_content_has_player_bookmarked, 0x993CBE59D350D225, bool, p0: i32);
	native!(ugc_request_content_data_from_index, 0x171DF6A0C07FB3DC, i32, p0: i32, p1: i32);
	native!(ugc_request_content_data_from_params, 0x7FD2990AF016795E, i32, content_type_name: *const c_char, content_id: *const c_char, p2: i32, p3: i32, p4: i32);
	native!(ugc_request_cached_description, 0x5E0165278F6339EE, i32, p0: i32);
	native!(_0x2d5dc831176d0114, 0x2D5DC831176D0114, bool, p0: i32);
	native!(_0xebfa8d50addc54c4, 0xEBFA8D50ADDC54C4, bool, p0: i32);
	native!(_0x162c23ca83ed0a62, 0x162C23CA83ED0A62, bool, p0: i32);
	native!(ugc_get_cached_description, 0x40F7E66472DF3E5C, i32, p0: i32, p1: i32);
	native!(_0x5a34cd9c3c5bec44, 0x5A34CD9C3C5BEC44, bool, p0: i32);
	native!(_0x68103e2247887242, 0x68103E2247887242, ());
	native!(ugc_publish, 0x1DE0F5F50D723CAA, bool, content_id: *const c_char, base_content_id: *const c_char, content_type_name: *const c_char);
	native!(ugc_set_bookmarked, 0x274A1519DFC1094F, bool, content_id: *const c_char, bookmarked: bool, content_type_name: *const c_char);
	native!(ugc_set_deleted, 0xD05D1A6C74DA3498, bool, p0: &mut i32, p1: bool, p2: &mut i32);
	native!(_0x45e816772e93a9db, 0x45E816772E93A9DB, i32);
	native!(ugc_has_modify_finished, 0x299EF3C576773506, bool);
	native!(_0x793ff272d5b365f4, 0x793FF272D5B365F4, i32);
	native!(ugc_get_modify_result, 0x5A0A3D1A186A5508, i32);
	native!(ugc_clear_modify_result, 0xA1E5E0204A6FCC70, ());
	native!(_0xb746d20b17f2a229, 0xB746D20B17F2A229, bool, p0: &mut i32, p1: &mut i32);
	native!(_0x63b406d7884bfa95, 0x63B406D7884BFA95, i32);
	native!(_0x4d02279c83be69fe, 0x4D02279C83BE69FE, i32);
	native!(ugc_get_creator_num, 0x597F8DBA9B206FC7, i32);
	native!(ugc_policies_make_private, 0x5CAE833B0EE0C500, bool, p0: i32);
	native!(ugc_clear_offline_query, 0x61A885D3F7CFEE9A, ());
	native!(_0xf98dde0a8ed09323, 0xF98DDE0A8ED09323, (), p0: bool);
	native!(_0xfd75dabc0957bf33, 0xFD75DABC0957BF33, (), p0: bool);
	native!(ugc_is_language_supported, 0xF53E48461B71EECB, bool, p0: i32);
	native!(_facebook_set_heist_complete, 0x098AB65B9ED9A9EC, bool, heist_name: *const c_char, cash_earned: i32, xp_earned: i32);
	native!(_facebook_set_create_character_complete, 0xDC48473142545431, bool);
	native!(_facebook_set_milestone_complete, 0x0AE1F1653B554AB9, bool, milestone_id: i32);
	native!(_facebook_is_sending_data, 0x62B9FEC9A11F10EF, bool);
	native!(_facebook_do_unk_check, 0xA75E2B6733DA5142, bool);
	native!(_facebook_is_available, 0x43865688AE10F0D7, bool);
	native!(texture_download_request, 0x16160DA74A8E74A2, i32, player_handle: &mut i32, file_path: *const c_char, name: *const c_char, p3: bool);
	native!(_0x0b203b4afde53a4f, 0x0B203B4AFDE53A4F, i32, p0: &mut i32, p1: &mut i32, p2: bool);
	native!(ugc_texture_download_request, 0x308F96458B7087CC, i32, p0: &mut i32, p1: i32, p2: i32, p3: i32, p4: &mut i32, p5: bool);
	native!(texture_download_release, 0x487EB90B98E9FB19, (), p0: i32);
	native!(texture_download_has_failed, 0x5776ED562C134687, bool, p0: i32);
	native!(texture_download_get_name, 0x3448505B6E35262D, *const c_char, p0: i32);
	native!(_get_status_of_texture_download, 0x8BD6C6DEA20E82C6, i32, p0: i32);
	native!(_0x60edd13eb3ac1ff3, 0x60EDD13EB3AC1FF3, bool);
	native!(_network_should_show_connectivity_troubleshooting, 0x82A2B386716608F1, bool);
	native!(network_is_cable_connected, 0xEFFB25453D8600F9, bool);
	native!(_network_get_ros_privilege_9, 0x66B59CFFD78467AF, bool);
	native!(_network_get_ros_privilege_10, 0x606E4D3E3CCCF3EB, bool);
	native!(_network_has_player_been_banned, 0x8020A73847E0CA7D, bool);
	native!(_network_have_social_club_privilege, 0xA0AD7E2AF5349F61, bool);
	native!(_network_get_ros_privilege_3, 0x5F91D5D0B36AA310, bool);
	native!(_network_get_ros_privilege_4, 0x422D396F80A96547, bool);
	native!(network_has_ros_privilege, 0xA699957E60D80214, bool, index: i32);
	native!(network_has_ros_privilege_end_date, 0xC22912B1D85F26B1, bool, privilege: i32, r#type: &mut i32, end_data: &mut i32);
	native!(_network_get_ros_privilege_24, 0x593570C289A77688, bool);
	native!(_network_get_ros_privilege_25, 0x91B87C55093DE351, bool);
	native!(_0x36391f397731595d, 0x36391F397731595D, i32, p0: i32);
	native!(_0xdeb2b99a1af1a2a6, 0xDEB2B99A1AF1A2A6, i32, p0: i32);
	native!(_0x9465e683b12d3f6b, 0x9465E683B12D3F6B, ());
	native!(_0xca59ccae5d01e4ce, 0xCA59CCAE5D01E4CE, ());
	native!(_network_has_game_been_altered, 0x659CF2EF7F550C4F, bool);
	native!(_network_update_player_scars, 0xB7C7F6AD6424304B, ());
	native!(_0xc505036a35afd01b, 0xC505036A35AFD01B, (), toggle: bool);
	native!(_0x267c78c60e806b9a, 0x267C78C60E806B9A, (), p0: i32, p1: bool);
	native!(_0x6bff5f84102df80a, 0x6BFF5F84102DF80A, (), player: Player);
	native!(_0x5c497525f803486b, 0x5C497525F803486B, ());
	native!(_0x6fb7bb3607d27fa2, 0x6FB7BB3607D27FA2, i32);
	native!(_0x45a83257ed02d9bc, 0x45A83257ED02D9BC, ());
	native!(_0x16d3d49902f697bb, 0x16D3D49902F697BB, bool, player: Player);
	native!(_0xd414be129bb81b32, 0xD414BE129BB81B32, f32, player: Player);
	native!(_0x0e3a041ed6ac2b45, 0x0E3A041ED6AC2B45, f32, player: Player);
	native!(_0x350c23949e43686c, 0x350C23949E43686C, f32, player: Player);
	native!(_network_get_num_unacked_for_player, 0xFF8FCF9FFC458A1C, i32, player: Player);
	native!(_0x3765c3a3e8192e10, 0x3765C3A3E8192E10, i32, player: Player);
	native!(_network_get_oldest_resend_count_for_player, 0x52C1EADAF7B10302, i32, player: Player);
	native!(_network_report_myself, 0x5626D9D6810730D5, ());
	native!(_0x64d779659bc37b19, 0x64D779659BC37B19, Vec3, entity: Entity);
	native!(_network_get_player_coords, 0x125E6D638B8605D4, Vec3, player: Player);
	native!(_0x33de49edf4dde77a, 0x33DE49EDF4DDE77A, Vec3, entity: Entity);
	native!(_0xaa5fafcd2c5f5e47, 0xAA5FAFCD2C5F5E47, Vec3, entity: Entity);
	native!(_0xaedf1bc1c133d6e3, 0xAEDF1BC1C133D6E3, i32);
	native!(_0x2555cf7da5473794, 0x2555CF7DA5473794, i32);
	native!(_0x6fd992c4a1c1b986, 0x6FD992C4A1C1B986, i32);
	native!(_0xdb663cc9ff3407a9, 0xDB663CC9FF3407A9, i32, player: Player);
}

pub mod object {
	use super::*;

	native!(create_object, 0x509D5878EB39E842, Object, model_hash: Object, x: f32, y: f32, z: f32, is_network: bool, net_mission_entity: bool, dynamic: bool);
	native!(create_object_no_offset, 0x9A294B2138ABB884, Object, model_hash: Hash, x: f32, y: f32, z: f32, is_network: bool, net_mission_entity: bool, dynamic: bool);
	native!(delete_object, 0x539E0AE3E6634B9F, (), object: &mut Object);
	native!(place_object_on_ground_properly, 0x58A850EAEE20FAA3, bool, object: Object);
	native!(_place_object_on_ground_properly_2, 0xD76EEEF746057FD6, bool, object: Object);
	native!(_0xafe24e4d29249e4a, 0xAFE24E4D29249E4A, bool, object: Object, p1: f32, p2: f32, p3: bool);
	native!(slide_object, 0x2FDFF4107B8C1147, bool, object: Object, to_x: f32, to_y: f32, to_z: f32, speed_x: f32, speed_y: f32, speed_z: f32, collision: bool);
	native!(set_object_targettable, 0x8A7391690F5AFD81, (), object: Object, targettable: bool);
	native!(_set_object_something, 0x77F33F2CCF64B3AA, (), object: Object, p1: bool);
	native!(get_closest_object_of_type, 0xE143FA2249364369, Object, x: f32, y: f32, z: f32, radius: f32, model_hash: Hash, is_mission: bool, p6: bool, p7: bool);
	native!(has_object_been_broken, 0x8ABFB70C49CC43E2, bool, object: Object, p1: i32);
	native!(has_closest_object_of_type_been_broken, 0x761B0E69AC4D007E, bool, p0: f32, p1: f32, p2: f32, p3: f32, model_hash: Hash, p5: i32);
	native!(has_closest_object_of_type_been_completely_destroyed, 0x46494A2475701343, bool, p0: f32, p1: f32, p2: f32, p3: f32, model_hash: Hash, p5: bool);
	native!(_0x2542269291c6ac84, 0x2542269291C6AC84, i32, p0: i32);
	native!(_get_object_offset_from_coords, 0x163E252DE035A133, Vec3, x_pos: f32, y_pos: f32, z_pos: f32, heading: f32, x_offset: f32, y_offset: f32, z_offset: f32);
	native!(get_coords_and_rotation_of_closest_object_of_type, 0x163F8B586BC95F2A, i32, object: Object, radius: f32, model_hash: Hash, x: f32, y: f32, z: f32, p6: &mut Vec3, p7: i32);
	native!(set_state_of_closest_door_of_type, 0xF82D8F1926A02C3D, (), r#type: Hash, x: f32, y: f32, z: f32, locked: bool, heading: f32, p6: bool);
	native!(get_state_of_closest_door_of_type, 0xEDC1A5B84AEF33FF, (), r#type: Hash, x: f32, y: f32, z: f32, locked: &mut bool, heading: &mut f32);
	native!(_door_control, 0x9B12F9A24FABEDB0, (), door_hash: Hash, x: f32, y: f32, z: f32, locked: bool, x_rot_mult: f32, y_rot_mult: f32, z_rot_mult: f32);
	native!(add_door_to_system, 0x6F8838D03D1DC226, (), door_hash: Hash, model_hash: Hash, x: f32, y: f32, z: f32, p5: bool, p6: bool, p7: bool);
	native!(remove_door_from_system, 0x464D8E1427156FE4, (), door_hash: Hash);
	native!(door_system_set_door_state, 0x6BAB9442830C7F53, (), door_hash: Hash, limit: i32, p2: bool, p3: bool);
	native!(door_system_get_door_state, 0x160AA1B32F6139B8, i32, door_hash: Hash);
	native!(door_system_get_door_pending_state, 0x4BC2854478F3A749, i32, door_hash: Hash);
	native!(door_system_set_automatic_rate, 0x03C27E13B42A0E82, (), door_hash: Hash, p1: f32, p2: bool, p3: bool);
	native!(door_system_set_automatic_distance, 0x9BA001CB45CBF627, (), door_hash: Hash, heading: f32, p2: bool, p3: bool);
	native!(door_system_set_open_ratio, 0xB6E6FBA95C7324AC, (), door_hash: Hash, ajar: f32, p2: bool, p3: bool);
	native!(door_system_get_open_ratio, 0x65499865FCA6E5EC, f32, door_hash: Hash);
	native!(door_system_set_spring_removed, 0xC485E07E4F0B7958, (), door_hash: Hash, p1: bool, p2: bool, p3: bool);
	native!(door_system_set_hold_open, 0xD9B71952F78A2640, (), door_hash: Hash, toggle: bool);
	native!(_0xa85a21582451e951, 0xA85A21582451E951, (), door_hash: Hash, p1: bool);
	native!(is_door_registered_with_system, 0xC153C43EA202C8C1, bool, door_hash: Hash);
	native!(is_door_closed, 0xC531EE8A1145A149, bool, door_hash: Hash);
	native!(_0xc7f29ca00f46350e, 0xC7F29CA00F46350E, (), p0: bool);
	native!(_0x701fda1e82076ba4, 0x701FDA1E82076BA4, ());
	native!(door_system_get_is_physics_loaded, 0xDF97CDD4FC08FD34, bool, p0: i32);
	native!(door_system_find_existing_door, 0x589F80B325CC82C5, bool, p0: f32, p1: f32, p2: f32, p3: i32, p4: &mut i32);
	native!(is_garage_empty, 0x90E47239EA1980B8, bool, garage_hash: Hash, p1: bool, p2: i32);
	native!(is_player_entirely_inside_garage, 0x024A60DEB0EA69F0, bool, garage_hash: Hash, player: Player, p2: f32, p3: i32);
	native!(is_player_partially_inside_garage, 0x1761DC5D8471CBAA, bool, garage_hash: Hash, player: Player, p2: i32);
	native!(are_entities_entirely_inside_garage, 0x85B6C850546FDDE2, bool, garage_hash: Hash, p1: bool, p2: bool, p3: bool, p4: i32);
	native!(is_any_entity_entirely_inside_garage, 0x673ED815D6E323B7, bool, garage_hash: Hash, p1: bool, p2: bool, p3: bool, p4: i32);
	native!(is_object_entirely_inside_garage, 0x372EF6699146A1E4, bool, garage_hash: Hash, entity: Entity, p2: f32, p3: i32);
	native!(is_object_partially_inside_garage, 0xF0EED5A6BC7B237A, bool, garage_hash: Hash, entity: Entity, p2: i32);
	native!(_clear_garage_area, 0xDA05194260CDCDF9, (), garage_hash: Hash, is_network: bool);
	native!(_0x190428512b240692, 0x190428512B240692, (), garage_hash: Hash, vehicles: bool, peds: bool, objects: bool, is_network: bool);
	native!(_0x659f9d71f52843f8, 0x659F9D71F52843F8, (), p0: i32, p1: i32);
	native!(enable_saving_in_garage, 0xF2E1A7133DD356A6, (), garage_hash: Hash, toggle: bool);
	native!(_0x66a49d021870fe88, 0x66A49D021870FE88, ());
	native!(does_object_of_type_exist_at_coords, 0xBFA48E2FF417213F, bool, x: f32, y: f32, z: f32, radius: f32, hash: Hash, p5: bool);
	native!(is_point_in_angled_area, 0x2A70BAE8883E4C81, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: f32, p10: bool, p11: bool);
	native!(_set_object_can_climb_on, 0x4D89D607CB3DD1D2, (), object: Object, toggle: bool);
	native!(set_object_physics_params, 0xF6DF6E90DE7DF90F, (), object: Object, weight: f32, p2: f32, p3: f32, p4: f32, p5: f32, gravity: f32, p7: f32, p8: f32, p9: f32, p10: f32, buoyancy: f32);
	native!(get_object_fragment_damage_health, 0xB6FBFD079B8D0596, f32, p0: i32, p1: bool);
	native!(set_activate_object_physics_as_soon_as_it_is_unfrozen, 0x406137F8EF90EAF5, (), object: Object, toggle: bool);
	native!(is_any_object_near_point, 0x397DC58FF00298D1, bool, x: f32, y: f32, z: f32, range: f32, p4: bool);
	native!(is_object_near_point, 0x8C90FE4B381BA60A, bool, object_hash: Hash, x: f32, y: f32, z: f32, range: f32);
	native!(remove_object_high_detail_model, 0x4A39DB43E47CF3AA, (), object: Object);
	native!(_0xe7e4c198b0185900, 0xE7E4C198B0185900, (), p0: Object, p1: i32, p2: bool);
	native!(_0xe05f6aeefeb0bb02, 0xE05F6AEEFEB0BB02, (), p0: i32, p1: i32, p2: i32);
	native!(_0xf9c1681347c8bd15, 0xF9C1681347C8BD15, (), object: Object);
	native!(track_object_visibility, 0xB252BC036B525623, (), object: Object);
	native!(is_object_visible, 0x8B32ACE6326A7546, bool, object: Object);
	native!(_0xc6033d32241f6fb5, 0xC6033D32241F6FB5, (), object: Object, toggle: bool);
	native!(_0xeb6f1a9b5510a5d2, 0xEB6F1A9B5510A5D2, (), p0: i32, p1: bool);
	native!(_set_unk_global_bool_related_to_damage, 0xABDABF4E1EDECBFA, (), value: bool);
	native!(_set_create_weapon_object_light_source, 0xBCE595371A5FBAAF, (), p0: i32, p1: bool);
	native!(get_rayfire_map_object, 0xB48FCED898292E52, Object, x: f32, y: f32, z: f32, radius: f32, name: *const c_char);
	native!(set_state_of_rayfire_map_object, 0x5C29F698D404C5E1, (), object: Object, state: i32);
	native!(get_state_of_rayfire_map_object, 0x899BA936634A322E, i32, object: Object);
	native!(does_rayfire_map_object_exist, 0x52AF537A0C5B8AAD, bool, object: Object);
	native!(get_rayfire_map_object_anim_phase, 0x260EE4FDBDF4DB01, f32, object: Object);
	native!(create_pickup, 0xFBA08C503DD5FA58, Pickup, pickup_hash: Hash, pos_x: f32, pos_y: f32, pos_z: f32, p4: i32, value: i32, p6: bool, model_hash: Hash);
	native!(create_pickup_rotate, 0x891804727E0A98B7, Pickup, pickup_hash: Hash, pos_x: f32, pos_y: f32, pos_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, flag: i32, amount: i32, p9: i32, p10: bool, model_hash: Hash);
	native!(_0x394cd08e31313c28, 0x394CD08E31313C28, ());
	native!(_0x826d1ee4d1cafc78, 0x826D1EE4D1CAFC78, (), p0: i32, p1: i32);
	native!(create_ambient_pickup, 0x673966A0C0FD7171, Pickup, pickup_hash: Hash, pos_x: f32, pos_y: f32, pos_z: f32, flags: i32, value: i32, model_hash: Hash, p7: bool, p8: bool);
	native!(_0x1e3f1b1b891a2aaa, 0x1E3F1B1B891A2AAA, (), p0: i32, p1: i32);
	native!(create_portable_pickup, 0x2EAF1FDB2FB55698, Object, pickup_hash: Hash, x: f32, y: f32, z: f32, place_on_ground: bool, model_hash: Hash);
	native!(_create_portable_pickup_2, 0x125494B98A21AAF7, Object, pickup_hash: Hash, x: f32, y: f32, z: f32, place_on_ground: bool, model_hash: Hash);
	native!(attach_portable_pickup_to_ped, 0x8DC39368BDD57755, (), pickup_object: Object, ped: Ped);
	native!(detach_portable_pickup_from_ped, 0xCF463D1E9A0AECB1, (), pickup_object: Object);
	native!(_hide_pickup, 0x867458251D47CCB2, (), pickup_object: Object, toggle: bool);
	native!(_0x0bf3b3bd47d79c08, 0x0BF3B3BD47D79C08, (), model_hash: Hash, p1: i32);
	native!(_0x78857fc65cadb909, 0x78857FC65CADB909, (), p0: bool);
	native!(get_safe_pickup_coords, 0x6E16BC2503FF1FF0, Vec3, x: f32, y: f32, z: f32, p3: f32, p4: f32);
	native!(_0xd4a7a435b3710d05, 0xD4A7A435B3710D05, (), x: f32, y: f32, z: f32, radius: f32);
	native!(_0xb7c6d80fb371659a, 0xB7C6D80FB371659A, ());
	native!(get_pickup_coords, 0x225B8B35C88029B3, Vec3, pickup: Pickup);
	native!(_0x8dca505a5c196f05, 0x8DCA505A5C196F05, (), p0: i32, p1: i32);
	native!(remove_all_pickups_of_type, 0x27F9D613092159CF, (), pickup_hash: Hash);
	native!(has_pickup_been_collected, 0x80EC48E6679313F9, bool, pickup: Pickup);
	native!(remove_pickup, 0x3288D8ACAECD2AB2, (), pickup: Pickup);
	native!(create_money_pickups, 0x0589B5E791CE9B2B, (), x: f32, y: f32, z: f32, value: i32, amount: i32, model: Hash);
	native!(does_pickup_exist, 0xAFC1CA75AD4074D1, bool, pickup: Pickup);
	native!(does_pickup_object_exist, 0xD9EFB6DBF7DAAEA3, bool, pickup_object: Object);
	native!(get_pickup_object, 0x5099BC55630B25AE, Object, pickup: Pickup);
	native!(_0xfc481c641ebbd27d, 0xFC481C641EBBD27D, i32, p0: i32);
	native!(_0x0378c08504160d0d, 0x0378C08504160D0D, bool, p0: i32);
	native!(does_pickup_of_type_exist_in_area, 0xF9C36251F6E48E33, bool, pickup_hash: Hash, x: f32, y: f32, z: f32, radius: f32);
	native!(set_pickup_regeneration_time, 0x78015C9B4B3ECC9D, (), pickup: Pickup, duration: i32);
	native!(force_pickup_regenerate, 0x758A5C1B3B1E1990, (), p0: i32);
	native!(_0x616093ec6b139dd9, 0x616093EC6B139DD9, (), player: Player, pickup_hash: Hash, toggle: bool);
	native!(_set_local_player_can_use_pickups_with_this_model, 0x88EAEC617CD26926, (), model_hash: Hash, toggle: bool);
	native!(_0xfdc07c58e8aab715, 0xFDC07C58E8AAB715, (), pickup_hash: Hash);
	native!(set_team_pickup_object, 0x53E0DF1A2A3CF0CA, (), object: Object, p1: i32, p2: bool);
	native!(_0x92aefb5f6e294023, 0x92AEFB5F6E294023, (), object: Object, p1: bool, p2: bool);
	native!(_0x0596843b34b95ce5, 0x0596843B34B95CE5, (), p0: i32, p1: i32);
	native!(_0xa08fe5e49bdc39dd, 0xA08FE5E49BDC39DD, (), p0: i32, p1: f32, p2: bool);
	native!(_0x62454a641b41f3c5, 0x62454A641B41F3C5, (), p0: i32);
	native!(_0x39a5fb7eaf150840, 0x39A5FB7EAF150840, (), p0: i32, p1: i32);
	native!(_0xdb41d07a45a6d4b7, 0xDB41D07A45A6D4B7, i32, p0: i32);
	native!(set_pickup_generation_range_multiplier, 0x318516E02DE3ECE2, (), multiplier: f32);
	native!(_get_pickup_generation_range_multiplier, 0xB3ECA65C7317F174, f32);
	native!(_0x31f924b53eaddf65, 0x31F924B53EADDF65, (), p0: bool);
	native!(set_pickup_uncollectable, 0x1C1B69FAE509BA97, (), p0: i32, p1: i32);
	native!(_0x858ec9fd25de04aa, 0x858EC9FD25DE04AA, (), p0: i32, p1: i32);
	native!(set_pickup_hidden_when_uncollectable, 0x3ED2B83AB2E82799, (), p0: i32, p1: i32);
	native!(_0x8881c98a31117998, 0x8881C98A31117998, (), p0: i32, p1: i32);
	native!(_0x8cff648fbd7330f1, 0x8CFF648FBD7330F1, (), p0: i32);
	native!(_0x46f3add1e2d5baf2, 0x46F3ADD1E2D5BAF2, (), p0: i32, p1: i32);
	native!(_0x641f272b52e2f0f8, 0x641F272B52E2F0F8, (), p0: i32, p1: i32);
	native!(_0x4c134b4df76025d0, 0x4C134B4DF76025D0, (), p0: i32, p1: i32);
	native!(_0xaa059c615de9dd03, 0xAA059C615DE9DD03, (), p0: i32, p1: i32);
	native!(_0xf92099527db8e2a7, 0xF92099527DB8E2A7, (), p0: i32, p1: i32);
	native!(_0xa2c1f5e92afe49ed, 0xA2C1F5E92AFE49ED, ());
	native!(_0x762db2d380b48d04, 0x762DB2D380B48D04, (), p0: i32);
	native!(_highlight_placement_coords, 0x3430676B11CDF21D, (), x: f32, y: f32, z: f32, color_index: i32);
	native!(_0x7813e8b8c4ae4799, 0x7813E8B8C4AE4799, (), pickup: Pickup);
	native!(_0xbffe53ae7e67fcdc, 0xBFFE53AE7E67FCDC, (), p0: i32, p1: i32);
	native!(_0xd05a3241b9a86f19, 0xD05A3241B9A86F19, (), p0: i32, p1: i32);
	native!(_0xb2d0bde54f0e8e5a, 0xB2D0BDE54F0E8E5A, (), object: Object, toggle: bool);
	native!(get_weapon_type_from_pickup_type, 0x08F96CA6C551AD51, Hash, pickup_hash: Hash);
	native!(_0xd6429a016084f1a5, 0xD6429A016084F1A5, i32, p0: i32);
	native!(is_pickup_weapon_object_valid, 0x11D1E53A726891FE, bool, object: Object);
	native!(_get_object_texture_variation, 0xE84EB93729C5F36A, i32, object: Object);
	native!(_set_object_texture_variation, 0x971DA0055324D033, (), object: Object, texture_variation: i32);
	native!(_0xf12e33034d887f66, 0xF12E33034D887F66, i32, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(_set_object_light_color, 0x5F048334B4A4E774, i32, object: Object, p1: bool, r: i32, g: i32, b: i32);
	native!(_0xadf084fb8f075d06, 0xADF084FB8F075D06, i32, p0: i32);
	native!(_0x3b2fd68db5f8331c, 0x3B2FD68DB5F8331C, (), object: Object, toggle: bool);
	native!(_set_object_stunt_prop_speedup, 0x96EE0EBA0163DF80, (), p0: i32, p1: i32);
	native!(_set_object_stunt_prop_duration, 0xDF6CA0330F2E737B, (), p0: i32, p1: i32);
	native!(_get_pickup_hash, 0x5EAAD83F8CFB4575, Hash, pickup_hash: Hash);
	native!(set_force_object_this_frame, 0xF538081986E49E9D, (), x: f32, y: f32, z: f32, p3: f32);
	native!(_mark_object_for_deletion, 0xADBE4809F19F927A, (), object: Object);
	native!(_0x8caab2bd3ea58bd4, 0x8CAAB2BD3EA58BD4, (), p0: i32);
	native!(_0x63ecf581bc70e363, 0x63ECF581BC70E363, (), p0: i32, p1: i32);
	native!(_set_enable_arena_prop_physics, 0x911024442F4898F0, (), p0: i32, p1: i32, p2: i32);
	native!(_set_enable_arena_prop_physics_on_ped, 0xB20834A7DD3D8896, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x734e1714d077da9a, 0x734E1714D077DA9A, (), p0: i32, p1: i32);
	native!(_0x1a6cbb06e2d0d79d, 0x1A6CBB06E2D0D79D, (), p0: i32, p1: i32);
	native!(_get_is_arena_prop_physics_disabled, 0x43C677F1E1158005, i32, p0: i32, p1: i32);
	native!(_0x3bd770d281982db5, 0x3BD770D281982DB5, i32, p0: i32, p1: i32);
	native!(_0x1c57c94a6446492a, 0x1C57C94A6446492A, (), p0: i32, p1: i32);
	native!(_0xb5b7742424bd4445, 0xB5B7742424BD4445, (), p0: i32, p1: i32);
}

pub mod pad {
	use super::*;

	native!(is_control_enabled, 0x1CEA6BFDF248E5D9, bool, pad_index: i32, control: i32);
	native!(is_control_pressed, 0xF3A21BCD95725A4A, bool, pad_index: i32, control: i32);
	native!(is_control_released, 0x648EE3E7F38877DD, bool, pad_index: i32, control: i32);
	native!(is_control_just_pressed, 0x580417101DDB492F, bool, pad_index: i32, control: i32);
	native!(is_control_just_released, 0x50F940259D3841E6, bool, pad_index: i32, control: i32);
	native!(get_control_value, 0xD95E79E8686D2C27, i32, pad_index: i32, control: i32);
	native!(get_control_normal, 0xEC3C9B8D5327B563, f32, pad_index: i32, control: i32);
	native!(_0x5b73c77d9eb66e24, 0x5B73C77D9EB66E24, (), p0: bool);
	native!(get_control_unbound_normal, 0x5B84D09CEC5209C5, f32, pad_index: i32, control: i32);
	native!(_set_control_normal, 0xE8A25867FBA3B05E, bool, pad_index: i32, control: i32, amount: f32);
	native!(is_disabled_control_pressed, 0xE2587F8CBBD87B1D, bool, pad_index: i32, control: i32);
	native!(is_disabled_control_released, 0xFB6C4072E9A32E92, bool, pad_index: i32, control: i32);
	native!(is_disabled_control_just_pressed, 0x91AEF906BCA88877, bool, pad_index: i32, control: i32);
	native!(is_disabled_control_just_released, 0x305C8DCD79DA8B0F, bool, pad_index: i32, control: i32);
	native!(get_disabled_control_normal, 0x11E65974A982637C, f32, pad_index: i32, control: i32);
	native!(get_disabled_control_unbound_normal, 0x4F8A26A890FD62FB, f32, pad_index: i32, control: i32);
	native!(_0xd7d22f5592aed8ba, 0xD7D22F5592AED8BA, i32, p0: i32);
	native!(_is_input_disabled, 0xA571D46727E2B718, bool, pad_index: i32);
	native!(_is_input_just_disabled, 0x13337B38DB572509, bool, pad_index: i32);
	native!(_set_cursor_location, 0xFC695459D4D0E219, bool, x: f32, y: f32);
	native!(_0x23f09eadc01449d6, 0x23F09EADC01449D6, bool, pad_index: i32);
	native!(_0x6cd79468a1e595c6, 0x6CD79468A1E595C6, bool, pad_index: i32);
	native!(get_control_instructional_button, 0x0499D7B09FC9B407, *const c_char, pad_index: i32, control: i32, p2: bool);
	native!(get_control_group_instructional_button, 0x80C2FD58D720C801, *const c_char, pad_index: i32, control_group: i32, p2: bool);
	native!(_set_control_group_color, 0x8290252FFF36ACB5, (), pad_index: i32, red: i32, green: i32, blue: i32);
	native!(_0xcb0360efefb2580d, 0xCB0360EFEFB2580D, (), pad_index: i32);
	native!(set_pad_shake, 0x48B3886C1358D0D5, (), pad_index: i32, duration: i32, frequency: i32);
	native!(_0x14d29bb12d47f68c, 0x14D29BB12D47F68C, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(stop_pad_shake, 0x38C16A305E8CDC8D, (), pad_index: i32);
	native!(_0xf239400e16c23e08, 0xF239400E16C23E08, (), p0: i32, p1: i32);
	native!(_0xa0cefcea390aab9b, 0xA0CEFCEA390AAB9B, (), p0: i32);
	native!(is_look_inverted, 0x77B612531280010D, bool);
	native!(_0xe1615ec03b3bb4fd, 0xE1615EC03B3BB4FD, bool);
	native!(get_local_player_aim_state, 0xBB41AFBBBC0A0287, i32);
	native!(_get_local_player_aim_state_2, 0x59B9A7AF4C95133C, i32);
	native!(_0x25aaa32bdc98f2a3, 0x25AAA32BDC98F2A3, i32);
	native!(get_is_using_alternate_driveby, 0x0F70731BACCFBB96, bool);
	native!(get_allow_movement_while_zoomed, 0xFC859E2374407556, bool);
	native!(set_playerpad_shakes_when_controller_disabled, 0x798FDEB5B1575088, (), toggle: bool);
	native!(set_input_exclusive, 0xEDE476E5EE29EDB1, (), pad_index: i32, control: i32);
	native!(disable_control_action, 0xFE99B66D079CF6BC, (), pad_index: i32, control: i32, disable: bool);
	native!(enable_control_action, 0x351220255D64C155, (), pad_index: i32, control: i32, enable: bool);
	native!(disable_all_control_actions, 0x5F4B6931816E599B, (), pad_index: i32);
	native!(enable_all_control_actions, 0xA5FFE9B05F199DE7, (), pad_index: i32);
	native!(_switch_to_input_mapping_scheme, 0x3D42B92563939375, bool, name: *const c_char);
	native!(_switch_to_input_mapping_scheme_2, 0x4683149ED1DDE7A1, bool, name: *const c_char);
	native!(_reset_input_mapping_scheme, 0x643ED62D5EA3BEBD, ());
	native!(_0x7f4724035fdca1dd, 0x7F4724035FDCA1DD, (), pad_index: i32);
}

pub mod pathfind {
	use super::*;

	native!(set_roads_in_area, 0xBF1A602B5BA52FEE, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, unknown1: bool, unknown2: bool);
	native!(set_roads_in_angled_area, 0x1A5AA1208AF5DB59, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, angle: f32, unknown1: bool, unknown2: bool, unknown3: bool);
	native!(set_ped_paths_in_area, 0x34F060F4BF92E018, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, unknown: bool, p7: i32);
	native!(get_safe_coord_for_ped, 0xB61C8E878A4199CA, bool, x: f32, y: f32, z: f32, on_ground: bool, out_position: &mut Vec3, flags: i32);
	native!(get_closest_vehicle_node, 0x240A18690AE96513, bool, x: f32, y: f32, z: f32, out_position: &mut Vec3, node_type: i32, p5: f32, p6: f32);
	native!(get_closest_major_vehicle_node, 0x2EABE3B06F58C1BE, bool, x: f32, y: f32, z: f32, out_position: &mut Vec3, unknown1: f32, unknown2: i32);
	native!(get_closest_vehicle_node_with_heading, 0xFF071FB798B803B0, bool, x: f32, y: f32, z: f32, out_position: &mut Vec3, out_heading: &mut f32, node_type: i32, p6: f32, p7: i32);
	native!(get_nth_closest_vehicle_node, 0xE50E52416CCF948B, bool, x: f32, y: f32, z: f32, nth_closest: i32, out_position: &mut Vec3, unknown1: i32, unknown2: i32, unknown3: i32);
	native!(get_nth_closest_vehicle_node_id, 0x22D7275A79FE8215, i32, x: f32, y: f32, z: f32, nth: i32, nodetype: i32, p5: f32, p6: f32);
	native!(get_nth_closest_vehicle_node_with_heading, 0x80CA6A8B6C094CC4, bool, x: f32, y: f32, z: f32, nth_closest: i32, out_position: &mut Vec3, heading: &mut f32, unknown1: &mut i32, unknown2: i32, unknown3: f32, unknown4: f32);
	native!(get_nth_closest_vehicle_node_id_with_heading, 0x6448050E9C2A7207, bool, x: f32, y: f32, z: f32, nth_closest: i32, out_position: &mut Vec3, out_heading: f32, p6: i32, p7: f32, p8: f32);
	native!(get_nth_closest_vehicle_node_favour_direction, 0x45905BE8654AE067, bool, x: f32, y: f32, z: f32, desired_x: f32, desired_y: f32, desired_z: f32, nth_closest: i32, out_position: &mut Vec3, out_heading: &mut f32, nodetype: i32, p10: i32, p11: i32);
	native!(get_vehicle_node_properties, 0x0568566ACBB5DEDC, bool, x: f32, y: f32, z: f32, density: &mut i32, flags: &mut i32);
	native!(is_vehicle_node_id_valid, 0x1EAF30FCFBF5AF74, bool, vehicle_node_id: i32);
	native!(get_vehicle_node_position, 0x703123E5E7D429C2, (), node_id: i32, out_position: &mut Vec3);
	native!(get_vehicle_node_is_gps_allowed, 0xA2AE5C478B96E3B6, bool, node_id: i32);
	native!(get_vehicle_node_is_switched_off, 0x4F5070AA58F69279, bool, node_id: i32);
	native!(get_closest_road, 0x132F52BBA570FE92, i32, x: f32, y: f32, z: f32, p3: f32, p4: i32, p5: &mut Vec3, p6: &mut Vec3, p7: &mut i32, p8: &mut i32, p9: &mut f32, p10: bool);
	native!(_0x228e5c6ad4d74bfd, 0x228E5C6AD4D74BFD, (), toggle: bool);
	native!(_are_path_nodes_loaded_in_area, 0xF7B79A50B905A30D, bool, x1: f32, y1: f32, x2: f32, y2: f32);
	native!(_0x07fb139b592fa687, 0x07FB139B592FA687, bool, p0: f32, p1: f32, p2: f32, p3: f32);
	native!(set_roads_back_to_original, 0x1EE7063B80FFC77C, (), p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: i32);
	native!(set_roads_back_to_original_in_angled_area, 0x0027501B9F3B407E, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, p6: f32, p7: i32);
	native!(set_ambient_ped_range_multiplier_this_frame, 0x0B919E1FB47CC4E0, (), multiplier: f32);
	native!(_0xaa76052dda9bfc3e, 0xAA76052DDA9BFC3E, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(set_ped_paths_back_to_original, 0xE04B48F2CC926253, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(get_random_vehicle_node, 0x93E0DB8440B73A7D, bool, x: f32, y: f32, z: f32, radius: f32, p4: bool, p5: bool, p6: bool, out_position: &mut Vec3, node_id: &mut i32);
	native!(get_street_name_at_coord, 0x2EB41072B4C1E4C0, (), x: f32, y: f32, z: f32, street_name: &mut Hash, crossing_road: &mut Hash);
	native!(generate_directions_to_coord, 0xF90125F1F79ECDF8, i32, x: f32, y: f32, z: f32, p3: bool, direction: &mut i32, p5: &mut f32, dist_to_nx_junction: &mut f32);
	native!(set_ignore_no_gps_flag, 0x72751156E7678833, (), toggle: bool);
	native!(_set_ignore_secondary_route_nodes, 0x1FC289A0C3FF470F, (), toggle: bool);
	native!(set_gps_disabled_zone, 0xDC20483CD3DD5201, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z3: f32);
	native!(get_gps_blip_route_length, 0xBBB45C3CF5C8AA85, i32);
	native!(_0xf3162836c28f9da5, 0xF3162836C28F9DA5, i32, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(get_gps_blip_route_found, 0x869DAACBBE9FA006, bool);
	native!(_get_road_side_point_with_heading, 0xA0F8A7517A273C05, i32, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_get_point_on_road_side, 0x16F46FB18C8009E4, i32, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(is_point_on_road, 0x125BF4ABFC536B09, bool, x: f32, y: f32, z: f32, vehicle: Vehicle);
	native!(get_next_gps_disabled_zone_index, 0xD3A6A0EF48823A8C, i32);
	native!(set_gps_disabled_zone_at_index, 0xD0BC1C6FB18EE154, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, index: i32);
	native!(clear_gps_disabled_zone_at_index, 0x2801D0012266DF07, (), index: i32);
	native!(add_navmesh_required_region, 0x387EAD7EE42F6685, (), x: f32, y: f32, radius: f32);
	native!(remove_navmesh_required_regions, 0x916F0A3CDEC3445E, ());
	native!(_is_navmesh_required_region_owned_by_any_thread, 0x705A844002B39DC0, bool);
	native!(disable_navmesh_in_area, 0x4C8872D8CDBE1B8B, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(are_all_navmesh_regions_loaded, 0x8415D95B194A3AEA, bool);
	native!(is_navmesh_loaded_in_area, 0xF813C7E63F9062A5, bool, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
	native!(_0x01708e8dd3ff8c65, 0x01708E8DD3FF8C65, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32);
	native!(add_navmesh_blocking_object, 0xFCD5C8E06E502F5A, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: bool, p8: i32);
	native!(update_navmesh_blocking_object, 0x109E99373F290687, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: i32);
	native!(remove_navmesh_blocking_object, 0x46399A7895957C0E, (), p0: i32);
	native!(does_navmesh_blocking_object_exist, 0x0EAEB0DB4B132399, bool, p0: i32);
	native!(_get_heightmap_top_z_for_position, 0x29C24BFBED8AB8FB, f32, p0: f32, p1: f32);
	native!(_get_heightmap_top_z_for_area, 0x8ABE8608576D9CE3, f32, p0: f32, p1: f32, p2: f32, p3: f32);
	native!(_get_heightmap_bottom_z_for_position, 0x336511A34F2E5185, f32, left: f32, right: f32);
	native!(_get_heightmap_bottom_z_for_area, 0x3599D741C9AC6310, f32, p0: f32, p1: f32, p2: f32, p3: f32);
	native!(calculate_travel_distance_between_points, 0xADD95C7005C4A197, f32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
}

pub mod ped {
	use super::*;

	native!(create_ped, 0xD49F9B0955C367DE, Ped, ped_type: i32, model_hash: Hash, x: f32, y: f32, z: f32, heading: f32, is_network: bool, net_mission_entity: bool);
	native!(delete_ped, 0x9614299DCB53E54B, (), ped: &mut Ped);
	native!(clone_ped, 0xEF29A16337FACADB, Ped, ped: Ped, heading: f32, is_network: bool, net_mission_entity: bool);
	native!(_clone_ped_ex, 0x668FD40BCBA5DE48, Ped, ped: Ped, heading: f32, is_network: bool, net_mission_entity: bool, p4: i32);
	native!(clone_ped_to_target, 0xE952D6431689AD9A, (), ped: Ped, target_ped: Ped);
	native!(_clone_ped_to_target_ex, 0x148B08C2D2ACB884, (), ped: Ped, target_ped: Ped, p2: i32);
	native!(is_ped_in_vehicle, 0xA3EE4A07279BB9DB, bool, ped: Ped, vehicle: Vehicle, at_get_in: bool);
	native!(is_ped_in_model, 0x796D90EFB19AA332, bool, ped: Ped, model_hash: Hash);
	native!(is_ped_in_any_vehicle, 0x997ABD671D25CA0B, bool, ped: Ped, at_get_in: bool);
	native!(is_cop_ped_in_area_3d, 0x16EC4839969F9F5E, bool, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
	native!(is_ped_injured, 0x84A2DD9AC37C35C1, bool, ped: Ped);
	native!(is_ped_hurt, 0x5983BB449D7FDB12, bool, ped: Ped);
	native!(is_ped_fatally_injured, 0xD839450756ED5A80, bool, ped: Ped);
	native!(is_ped_dead_or_dying, 0x3317DEDB88C95038, bool, ped: Ped, p1: bool);
	native!(is_conversation_ped_dead, 0xE0A0AEC214B1FABA, bool, ped: Ped);
	native!(is_ped_aiming_from_cover, 0x3998B1276A3300E5, bool, ped: Ped);
	native!(is_ped_reloading, 0x24B100C68C645951, bool, ped: Ped);
	native!(is_ped_a_player, 0x12534C348C6CB68B, bool, ped: Ped);
	native!(create_ped_inside_vehicle, 0x7DD959874C1FD534, Ped, vehicle: Vehicle, ped_type: i32, model_hash: Hash, seat: i32, is_network: bool, net_mission_entity: bool);
	native!(set_ped_desired_heading, 0xAA5A7ECE2AA8FE70, (), ped: Ped, heading: f32);
	native!(_freeze_ped_camera_rotation, 0xFF287323B0E2C69A, (), ped: Ped);
	native!(is_ped_facing_ped, 0xD71649DB0A545AA3, bool, ped: Ped, other_ped: Ped, angle: f32);
	native!(is_ped_in_melee_combat, 0x4E209B2C1EAD5159, bool, ped: Ped);
	native!(is_ped_stopped, 0x530944F6F4B8A214, bool, ped: Ped);
	native!(is_ped_shooting_in_area, 0x7E9DFE24AC1E58EF, bool, ped: Ped, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, p7: bool, p8: bool);
	native!(is_any_ped_shooting_in_area, 0xA0D3D71EA1086C55, bool, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, p6: bool, p7: bool);
	native!(is_ped_shooting, 0x34616828CD07F1A1, bool, ped: Ped);
	native!(set_ped_accuracy, 0x7AEFB85C1D49DEB6, (), ped: Ped, accuracy: i32);
	native!(get_ped_accuracy, 0x37F4AD56ECBC0CD6, i32, ped: Ped);
	native!(_0x87ddeb611b329a9c, 0x87DDEB611B329A9C, (), multiplier: f32);
	native!(is_ped_model, 0xC9D55B1A358A5BF7, bool, ped: Ped, model_hash: Hash);
	native!(explode_ped_head, 0x2D05CED3A38D0F3A, (), ped: Ped, weapon_hash: Hash);
	native!(remove_ped_elegantly, 0xAC6D445B994DF95E, (), ped: &mut Ped);
	native!(add_armour_to_ped, 0x5BA652A0CD14DF2F, (), ped: Ped, amount: i32);
	native!(set_ped_armour, 0xCEA04D83135264CC, (), ped: Ped, amount: i32);
	native!(set_ped_into_vehicle, 0xF75B0D629E1C063D, (), ped: Ped, vehicle: Vehicle, seat_index: i32);
	native!(set_ped_allow_vehicles_override, 0x3C028C636A414ED9, (), ped: Ped, toggle: bool);
	native!(can_create_random_ped, 0x3E8349C08E4B82E4, bool, unk: bool);
	native!(create_random_ped, 0xB4AC7D0CF06BFE8F, Ped, pos_x: f32, pos_y: f32, pos_z: f32);
	native!(create_random_ped_as_driver, 0x9B62392B474F44A0, Ped, vehicle: Vehicle, return_handle: bool);
	native!(can_create_random_driver, 0xB8EB95E5B4E56978, bool);
	native!(can_create_random_bike_rider, 0xEACEEDA81751915C, bool);
	native!(set_ped_move_anims_blend_out, 0x9E8C908F41584ECD, (), ped: Ped);
	native!(set_ped_can_be_dragged_out, 0xC1670E958EEE24E5, (), ped: Ped, toggle: bool);
	native!(_0xf2bebcdfafdaa19e, 0xF2BEBCDFAFDAA19E, (), toggle: bool);
	native!(is_ped_male, 0x6D9F5FAA7488BA46, bool, ped: Ped);
	native!(is_ped_human, 0xB980061DA992779D, bool, ped: Ped);
	native!(get_vehicle_ped_is_in, 0x9A9112A0FE9A4713, Vehicle, ped: Ped, last_vehicle: bool);
	native!(reset_ped_last_vehicle, 0xBB8DE8CF6A8DD8BB, (), ped: Ped);
	native!(set_ped_density_multiplier_this_frame, 0x95E3D6257B166CF2, (), multiplier: f32);
	native!(set_scenario_ped_density_multiplier_this_frame, 0x7A556143A1C03898, (), p0: f32, p1: f32);
	native!(_0x5a7f62fda59759bd, 0x5A7F62FDA59759BD, ());
	native!(set_scripted_conversion_coord_this_frame, 0x5086C7843552CF85, (), x: f32, y: f32, z: f32);
	native!(set_ped_non_creation_area, 0xEE01041D559983EA, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
	native!(clear_ped_non_creation_area, 0x2E05208086BA0651, ());
	native!(_0x4759cc730f947c81, 0x4759CC730F947C81, ());
	native!(is_ped_on_mount, 0x460BC76A0E10655E, bool, ped: Ped);
	native!(get_mount, 0xE7E11B8DCBED1058, Ped, ped: Ped);
	native!(is_ped_on_vehicle, 0x67722AEB798E5FAB, bool, ped: Ped);
	native!(is_ped_on_specific_vehicle, 0xEC5F66E459AF3BB2, bool, ped: Ped, vehicle: Vehicle);
	native!(set_ped_money, 0xA9C8960E8684C1B5, (), ped: Ped, amount: i32);
	native!(get_ped_money, 0x3F69145BBA87BAE7, i32, ped: Ped);
	native!(_0xff4803bc019852d9, 0xFF4803BC019852D9, (), p0: f32, p1: i32);
	native!(_0x6b0e6172c9a4d902, 0x6B0E6172C9A4D902, (), p0: bool);
	native!(_0x9911f4a24485f653, 0x9911F4A24485F653, (), p0: bool);
	native!(set_ped_suffers_critical_hits, 0xEBD76F2359F190AC, (), ped: Ped, toggle: bool);
	native!(_0xafc976fd0580c7b3, 0xAFC976FD0580C7B3, (), ped: Ped, toggle: bool);
	native!(is_ped_sitting_in_vehicle, 0xA808AA1D79230FC2, bool, ped: Ped, vehicle: Vehicle);
	native!(is_ped_sitting_in_any_vehicle, 0x826AA586EDB9FEF8, bool, ped: Ped);
	native!(is_ped_on_foot, 0x01FEE67DB37F59B2, bool, ped: Ped);
	native!(is_ped_on_any_bike, 0x94495889E22C6479, bool, ped: Ped);
	native!(is_ped_planting_bomb, 0xC70B5FAE151982D8, bool, ped: Ped);
	native!(get_dead_ped_pickup_coords, 0xCD5003B097200F36, Vec3, ped: Ped, p1: f32, p2: f32);
	native!(is_ped_in_any_boat, 0x2E0E1C2B4F6CB339, bool, ped: Ped);
	native!(is_ped_in_any_sub, 0xFBFC01CCFB35D99E, bool, ped: Ped);
	native!(is_ped_in_any_heli, 0x298B91AE825E5705, bool, ped: Ped);
	native!(is_ped_in_any_plane, 0x5FFF4CFC74D8FB80, bool, ped: Ped);
	native!(is_ped_in_flying_vehicle, 0x9134873537FA419C, bool, ped: Ped);
	native!(set_ped_dies_in_water, 0x56CEF0AC79073BDE, (), ped: Ped, toggle: bool);
	native!(set_ped_dies_in_sinking_vehicle, 0xD718A22995E2B4BC, (), ped: Ped, toggle: bool);
	native!(get_ped_armour, 0x9483AF821605B1D8, i32, ped: Ped);
	native!(set_ped_stay_in_vehicle_when_jacked, 0xEDF4079F9D54C9A1, (), ped: Ped, toggle: bool);
	native!(set_ped_can_be_shot_in_vehicle, 0xC7EF1BA83230BA07, (), ped: Ped, toggle: bool);
	native!(get_ped_last_damage_bone, 0xD75960F6BD9EA49C, bool, ped: Ped, out_bone: &mut i32);
	native!(clear_ped_last_damage_bone, 0x8EF6B7AC68E2F01B, (), ped: Ped);
	native!(set_ai_weapon_damage_modifier, 0x1B1E2A40A65B8521, (), value: f32);
	native!(reset_ai_weapon_damage_modifier, 0xEA16670E7BA4743C, ());
	native!(set_ai_melee_weapon_damage_modifier, 0x66460DEDDD417254, (), modifier: f32);
	native!(reset_ai_melee_weapon_damage_modifier, 0x46E56A7CD1D63C3F, ());
	native!(_0x2f3c3d9f50681de4, 0x2F3C3D9F50681DE4, (), p0: i32, p1: bool);
	native!(set_ped_can_be_targetted, 0x63F58F7C80513AAD, (), ped: Ped, toggle: bool);
	native!(set_ped_can_be_targetted_by_team, 0xBF1CA77833E58F2C, (), ped: Ped, team: i32, toggle: bool);
	native!(set_ped_can_be_targetted_by_player, 0x66B57B72E0836A76, (), ped: Ped, player: Player, toggle: bool);
	native!(_0x061cb768363d6424, 0x061CB768363D6424, (), ped: Ped, toggle: bool);
	native!(_0xfd325494792302d7, 0xFD325494792302D7, (), ped: Ped, toggle: bool);
	native!(is_ped_in_any_police_vehicle, 0x0BD04E29640C9C12, bool, ped: Ped);
	native!(force_ped_to_open_parachute, 0x16E42E800B472221, (), ped: Ped);
	native!(is_ped_in_parachute_free_fall, 0x7DCE8BDA0F1C1200, bool, ped: Ped);
	native!(is_ped_falling, 0xFB92A102F1C4DFA3, bool, ped: Ped);
	native!(is_ped_jumping, 0xCEDABC5900A0BF97, bool, ped: Ped);
	native!(_0x412f1364fa066cfb, 0x412F1364FA066CFB, i32, p0: i32);
	native!(_0x451d05012ccec234, 0x451D05012CCEC234, i32, p0: i32);
	native!(is_ped_climbing, 0x53E8CB4F48BFE623, bool, ped: Ped);
	native!(is_ped_vaulting, 0x117C70D1F5730B5E, bool, ped: Ped);
	native!(is_ped_diving, 0x5527B8246FEF9B11, bool, ped: Ped);
	native!(is_ped_jumping_out_of_vehicle, 0x433DDFFE2044B636, bool, ped: Ped);
	native!(_is_ped_opening_a_door, 0x26AF0E8E30BD2A2C, bool, ped: Ped);
	native!(get_ped_parachute_state, 0x79CFD9827CC979B6, i32, ped: Ped);
	native!(get_ped_parachute_landing_type, 0x8B9F1FC6AE8166C0, i32, ped: Ped);
	native!(set_ped_parachute_tint_index, 0x333FC8DB079B7186, (), ped: Ped, tint_index: i32);
	native!(get_ped_parachute_tint_index, 0xEAF5F7E5AE7C6C9D, (), ped: Ped, out_tint_index: &mut i32);
	native!(set_ped_reserve_parachute_tint_index, 0xE88DA0751C22A2AD, (), ped: Ped, p1: i32);
	native!(_create_parachute_object, 0x8C4F3BF23B6237DB, Object, ped: Ped, p1: bool, p2: bool);
	native!(set_ped_ducking, 0x030983CA930B692D, (), ped: Ped, toggle: bool);
	native!(is_ped_ducking, 0xD125AE748725C6BC, bool, ped: Ped);
	native!(is_ped_in_any_taxi, 0x6E575D6A898AB852, bool, ped: Ped);
	native!(set_ped_id_range, 0xF107E836A70DCE05, (), ped: Ped, value: f32);
	native!(set_ped_highly_perceptive, 0x52D59AB61DDC05DD, (), ped: Ped, toggle: bool);
	native!(_0x2f074c904d85129e, 0x2F074C904D85129E, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(_0xec4b4b3b9908052a, 0xEC4B4B3B9908052A, (), ped: Ped, unk: f32);
	native!(_0x733c87d4ce22bea2, 0x733C87D4CE22BEA2, (), p0: i32);
	native!(set_ped_seeing_range, 0xF29CF591C4BF6CEE, (), ped: Ped, value: f32);
	native!(set_ped_hearing_range, 0x33A8F7F7D5F7F33C, (), ped: Ped, value: f32);
	native!(set_ped_visual_field_min_angle, 0x2DB492222FB21E26, (), ped: Ped, value: f32);
	native!(set_ped_visual_field_max_angle, 0x70793BDCA1E854D4, (), ped: Ped, value: f32);
	native!(set_ped_visual_field_min_elevation_angle, 0x7A276EB2C224D70F, (), ped: Ped, angle: f32);
	native!(set_ped_visual_field_max_elevation_angle, 0x78D0B67629D75856, (), ped: Ped, angle: f32);
	native!(set_ped_visual_field_peripheral_range, 0x9C74B0BC831B753A, (), ped: Ped, range: f32);
	native!(set_ped_visual_field_center_angle, 0x3B6405E8AB34A907, (), ped: Ped, angle: f32);
	native!(_get_ped_visual_field_center_angle, 0xEF2C71A32CAD5FBD, f32, ped: Ped);
	native!(set_ped_stealth_movement, 0x88CBB5CEB96B7BD2, (), ped: Ped, p1: bool, action: *const c_char);
	native!(get_ped_stealth_movement, 0x7C2AC9CA66575FBF, bool, ped: Ped);
	native!(create_group, 0x90370EBE0FEE1A3D, i32, unused: i32);
	native!(set_ped_as_group_leader, 0x2A7819605465FBCE, (), ped: Ped, group_id: i32);
	native!(set_ped_as_group_member, 0x9F3480FE65DB31B5, (), ped: Ped, group_id: i32);
	native!(set_ped_can_teleport_to_group_leader, 0x2E2F4240B3F24647, (), ped_handle: Ped, group_handle: i32, toggle: bool);
	native!(remove_group, 0x8EB2F69076AF7053, (), group_id: i32);
	native!(remove_ped_from_group, 0xED74007FFB146BC2, (), ped: Ped);
	native!(is_ped_group_member, 0x9BB01E3834671191, bool, ped: Ped, group_id: i32);
	native!(is_ped_hanging_on_to_vehicle, 0x1C86D8AEF8254B78, bool, ped: Ped);
	native!(set_group_separation_range, 0x4102C7858CFEE4E4, (), group_handle: i32, separation_range: f32);
	native!(set_ped_min_ground_time_for_stungun, 0xFA0675AB151073FA, (), ped: Ped, ms: i32);
	native!(is_ped_prone, 0xD6A86331A537A7B9, bool, ped: Ped);
	native!(is_ped_in_combat, 0x4859F1FC66A6278E, bool, ped: Ped, target: Ped);
	native!(can_ped_in_combat_see_target, 0xEAD42DE3610D0721, bool, ped: Ped, target: Ped);
	native!(is_ped_doing_driveby, 0xB2C086CC1BF8F2BF, bool, ped: Ped);
	native!(is_ped_jacking, 0x4AE4FF911DFB61DA, bool, ped: Ped);
	native!(is_ped_being_jacked, 0x9A497FE2DF198913, bool, ped: Ped);
	native!(is_ped_being_stunned, 0x4FBACCE3B4138EE8, bool, ped: Ped, p1: i32);
	native!(get_peds_jacker, 0x9B128DC36C1E04CF, Ped, ped: Ped);
	native!(get_jack_target, 0x5486A79D9FBD342D, Ped, ped: Ped);
	native!(is_ped_fleeing, 0xBBCCE00B381F8482, bool, ped: Ped);
	native!(is_ped_in_cover, 0x60DFD0691A170B88, bool, ped: Ped, except_use_weapon: bool);
	native!(is_ped_in_cover_facing_left, 0x845333B3150583AB, bool, ped: Ped);
	native!(is_ped_in_high_cover, 0x6A03BF943D767C93, bool, ped: Ped);
	native!(is_ped_going_into_cover, 0x9F65DBC537E59AD5, bool, ped: Ped);
	native!(set_ped_pinned_down, 0xAAD6D1ACF08F4612, i32, ped: Ped, pinned: bool, i: i32);
	native!(get_seat_ped_is_trying_to_enter, 0x6F4C85ACD641BCD2, i32, ped: Ped);
	native!(get_vehicle_ped_is_trying_to_enter, 0x814FA8BE5449445D, Vehicle, ped: Ped);
	native!(get_ped_source_of_death, 0x93C8B64DEB84728C, Entity, ped: Ped);
	native!(get_ped_cause_of_death, 0x16FFE42AB2D2DC59, Hash, ped: Ped);
	native!(get_ped_time_of_death, 0x1E98817B311AE98A, i32, ped: Ped);
	native!(_0x5407b7288d0478b7, 0x5407B7288D0478B7, i32, p0: i32);
	native!(_0x336b3d200ab007cb, 0x336B3D200AB007CB, i32, p0: i32, p1: f32, p2: f32, p3: f32, p4: f32);
	native!(set_ped_relationship_group_default_hash, 0xADB3F206518799E8, (), ped: Ped, hash: Hash);
	native!(set_ped_relationship_group_hash, 0xC80A74AC829DDD92, (), ped: Ped, hash: Hash);
	native!(set_relationship_between_groups, 0xBF25EB89375A37AD, (), relationship: i32, group1: Hash, group2: Hash);
	native!(clear_relationship_between_groups, 0x5E29243FB56FC6D4, (), relationship: i32, group1: Hash, group2: Hash);
	native!(add_relationship_group, 0xF372BC22FCB88606, i32, name: *const c_char, group_hash: &mut Hash);
	native!(remove_relationship_group, 0xB6BA2444AB393DA2, (), group_hash: Hash);
	native!(_does_relationship_group_exist, 0xCC6E3B6BB69501F1, i32, p0: i32);
	native!(get_relationship_between_peds, 0xEBA5AD3A0EAF7121, i32, ped1: Ped, ped2: Ped);
	native!(get_ped_relationship_group_default_hash, 0x42FDD0F017B1E38E, Hash, ped: Ped);
	native!(get_ped_relationship_group_hash, 0x7DBDD04862D95F04, Hash, ped: Ped);
	native!(get_relationship_between_groups, 0x9E6B70061662AE5C, i32, group1: Hash, group2: Hash);
	native!(_0x5615e0c5eb2bc6e2, 0x5615E0C5EB2BC6E2, (), p0: i32, p1: i32);
	native!(_0xad27d957598e49e9, 0xAD27D957598E49E9, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(set_ped_can_be_targeted_without_los, 0x4328652AE5769C71, (), ped: Ped, toggle: bool);
	native!(set_ped_to_inform_respected_friends, 0x112942C6E708F70B, (), ped: Ped, radius: f32, max_friends: i32);
	native!(is_ped_responding_to_event, 0x625B774D75C87068, bool, ped: Ped, event: i32);
	native!(set_ped_firing_pattern, 0x9AC577F5A12AD8A9, (), ped: Ped, pattern_hash: Hash);
	native!(set_ped_shoot_rate, 0x614DA022990752DC, (), ped: Ped, shoot_rate: i32);
	native!(set_combat_float, 0xFF41B4B141ED981C, (), ped: Ped, combat_type: i32, p2: f32);
	native!(get_combat_float, 0x52DFF8A10508090A, f32, ped: Ped, p1: i32);
	native!(get_group_size, 0x8DE69FE35CA09A45, (), group_id: i32, unknown: &mut i32, size_in_members: &mut i32);
	native!(does_group_exist, 0x7C6B0C22F9F40BBE, bool, group_id: i32);
	native!(get_ped_group_index, 0xF162E133B4E7A675, i32, ped: Ped);
	native!(is_ped_in_group, 0x5891CAC5D4ACFF74, bool, ped: Ped);
	native!(get_player_ped_is_following, 0x6A3975DEA89F9A17, Player, ped: Ped);
	native!(set_group_formation, 0xCE2F5FC3AF7E8C1E, (), group_id: i32, formation_type: i32);
	native!(set_group_formation_spacing, 0x1D9D45004C28C916, (), group_id: i32, p1: f32, p2: f32, p3: f32);
	native!(reset_group_formation_default_spacing, 0x63DAB4CCB3273205, (), group_handle: i32);
	native!(get_vehicle_ped_is_using, 0x6094AD011A2EA87D, Vehicle, ped: Ped);
	native!(get_vehicle_ped_is_entering, 0xF92691AED837A5FC, Vehicle, ped: Ped);
	native!(set_ped_gravity, 0x9FF447B6B6AD960A, (), ped: Ped, toggle: bool);
	native!(apply_damage_to_ped, 0x697157CED63F18D4, (), ped: Ped, damage_amount: i32, p2: bool, p3: i32);
	native!(_get_time_of_last_ped_weapon_damage, 0x36B77BB84687C318, i32, ped: Ped, weapon_hash: Hash);
	native!(set_ped_allowed_to_duck, 0xDA1F1B7BE1A8766F, (), ped: Ped, toggle: bool);
	native!(set_ped_never_leaves_group, 0x3DBFC55D5C9BB447, (), ped: Ped, toggle: bool);
	native!(get_ped_type, 0xFF059E1E4C01E63C, i32, ped: Ped);
	native!(set_ped_as_cop, 0xBB03C38DD3FB7FFD, (), ped: Ped, toggle: bool);
	native!(set_ped_max_health, 0xF5F6378C4F3419D3, (), ped: Ped, value: i32);
	native!(get_ped_max_health, 0x4700A416E8324EF3, i32, ped: Ped);
	native!(set_ped_max_time_in_water, 0x43C851690662113D, (), ped: Ped, value: f32);
	native!(set_ped_max_time_underwater, 0x6BA428C528D9E522, (), ped: Ped, value: f32);
	native!(_0x2735233a786b1bef, 0x2735233A786B1BEF, (), ped: Ped, p1: f32);
	native!(set_ped_vehicle_forced_seat_usage, 0x952F06BEECD775CC, (), ped: Ped, vehicle: Vehicle, seat_index: i32, flags: i32);
	native!(clear_all_ped_vehicle_forced_seat_usage, 0xE6CA85E7259CE16B, (), ped: Ped);
	native!(_0xb282749d5e028163, 0xB282749D5E028163, (), p0: i32, p1: i32);
	native!(set_ped_can_be_knocked_off_vehicle, 0x7A6535691B477C48, (), ped: Ped, state: i32);
	native!(can_knock_ped_off_vehicle, 0x51AC07A44D4F5B8A, bool, ped: Ped);
	native!(knock_ped_off_vehicle, 0x45BBCBA77C29A841, (), ped: Ped);
	native!(set_ped_coords_no_gang, 0x87052FE446E07247, (), ped: Ped, pos_x: f32, pos_y: f32, pos_z: f32);
	native!(get_ped_as_group_member, 0x51455483CF23ED97, Ped, group_id: i32, member_number: i32);
	native!(get_ped_as_group_leader, 0x5CCE68DBD5FE93EC, Ped, group_id: i32);
	native!(set_ped_keep_task, 0x971D38760FBC02EF, (), ped: Ped, toggle: bool);
	native!(_0x49e50bdb8ba4dab2, 0x49E50BDB8BA4DAB2, (), ped: Ped, toggle: bool);
	native!(is_ped_swimming, 0x9DE327631295B4C2, bool, ped: Ped);
	native!(is_ped_swimming_under_water, 0xC024869A53992F34, bool, ped: Ped);
	native!(set_ped_coords_keep_vehicle, 0x9AFEFF481A85AB2E, (), ped: Ped, pos_x: f32, pos_y: f32, pos_z: f32);
	native!(set_ped_dies_in_vehicle, 0x2A30922C90C9B42C, (), ped: Ped, toggle: bool);
	native!(set_create_random_cops, 0x102E68B2024D536D, (), toggle: bool);
	native!(set_create_random_cops_not_on_scenarios, 0x8A4986851C4EF6E7, (), toggle: bool);
	native!(set_create_random_cops_on_scenarios, 0x444CB7D7DBE6973D, (), toggle: bool);
	native!(can_create_random_cops, 0x5EE2CAFF7F17770D, bool);
	native!(set_ped_as_enemy, 0x02A0C9720B854BFA, (), ped: Ped, toggle: bool);
	native!(set_ped_can_smash_glass, 0x1CCE141467FF42A2, (), ped: Ped, p1: bool, p2: bool);
	native!(is_ped_in_any_train, 0x6F972C1AB75A1ED0, bool, ped: Ped);
	native!(is_ped_getting_into_a_vehicle, 0xBB062B2B5722478E, bool, ped: Ped);
	native!(is_ped_trying_to_enter_a_locked_vehicle, 0x44D28D5DDFE5F68C, bool, ped: Ped);
	native!(set_enable_handcuffs, 0xDF1AF8B5D56542FA, (), ped: Ped, toggle: bool);
	native!(set_enable_bound_ankles, 0xC52E0F855C58FC2E, (), ped: Ped, toggle: bool);
	native!(set_enable_scuba, 0xF99F62004024D506, (), ped: Ped, toggle: bool);
	native!(set_can_attack_friendly, 0xB3B1CB349FF9C75D, (), ped: Ped, toggle: bool, p2: bool);
	native!(get_ped_alertness, 0xF6AA118530443FD2, i32, ped: Ped);
	native!(set_ped_alertness, 0xDBA71115ED9941A6, (), ped: Ped, value: i32);
	native!(set_ped_get_out_upside_down_vehicle, 0xBC0ED94165A48BC2, (), ped: Ped, toggle: bool);
	native!(set_ped_movement_clipset, 0xAF8A94EDE7712BEF, (), ped: Ped, clip_set: *const c_char, p2: f32);
	native!(reset_ped_movement_clipset, 0xAA74EC0CB0AAEA2C, (), ped: Ped, p1: f32);
	native!(set_ped_strafe_clipset, 0x29A28F3F8CF6D854, (), ped: Ped, clip_set: *const c_char);
	native!(reset_ped_strafe_clipset, 0x20510814175EA477, (), ped: Ped);
	native!(set_ped_weapon_movement_clipset, 0x2622E35B77D3ACA2, (), ped: Ped, clip_set: *const c_char);
	native!(reset_ped_weapon_movement_clipset, 0x97B0DB5B4AA74E77, (), ped: Ped);
	native!(set_ped_drive_by_clipset_override, 0xED34AB6C5CB36520, (), ped: Ped, clipset: *const c_char);
	native!(clear_ped_drive_by_clipset_override, 0x4AFE3690D7E0B5AC, (), ped: Ped);
	native!(_set_ped_cover_clipset_override, 0x9DBA107B4937F809, (), ped: Ped, p1: *const c_char);
	native!(_clear_ped_cover_clipset_override, 0xC79196DCB36F6121, (), ped: Ped);
	native!(_0x80054d7fcc70eec6, 0x80054D7FCC70EEC6, (), ped: Ped);
	native!(set_ped_in_vehicle_context, 0x530071295899A8C6, (), ped: Ped, context: Hash);
	native!(reset_ped_in_vehicle_context, 0x22EF8FF8778030EB, (), ped: Ped);
	native!(is_scripted_scenario_ped_using_conditional_anim, 0x6EC47A344923E1ED, bool, ped: Ped, anim_dict: *const c_char, anim: *const c_char);
	native!(set_ped_alternate_walk_anim, 0x6C60394CB4F75E9A, (), ped: Ped, anim_dict: *const c_char, anim_name: *const c_char, p3: f32, p4: bool);
	native!(clear_ped_alternate_walk_anim, 0x8844BBFCE30AA9E9, (), ped: Ped, p1: f32);
	native!(set_ped_alternate_movement_anim, 0x90A43CC281FFAB46, (), ped: Ped, stance: i32, anim_dictionary: *const c_char, animation_name: *const c_char, p4: f32, p5: bool);
	native!(clear_ped_alternate_movement_anim, 0xD8D19675ED5FBDCE, (), ped: Ped, stance: i32, p2: f32);
	native!(set_ped_gesture_group, 0xDDF803377F94AAA8, (), ped: Ped, anim_group_gesture: *const c_char);
	native!(get_anim_initial_offset_position, 0xBE22B26DD764C040, Vec3, anim_dict: *const c_char, anim_name: *const c_char, x: f32, y: f32, z: f32, x_rot: f32, y_rot: f32, z_rot: f32, p8: f32, p9: i32);
	native!(get_anim_initial_offset_rotation, 0x4B805E6046EE9E47, Vec3, anim_dict: *const c_char, anim_name: *const c_char, x: f32, y: f32, z: f32, x_rot: f32, y_rot: f32, z_rot: f32, p8: f32, p9: i32);
	native!(get_ped_drawable_variation, 0x67F3780DD425D4FC, i32, ped: Ped, component_id: i32);
	native!(get_number_of_ped_drawable_variations, 0x27561561732A7842, i32, ped: Ped, component_id: i32);
	native!(get_ped_texture_variation, 0x04A355E041E004E6, i32, ped: Ped, component_id: i32);
	native!(get_number_of_ped_texture_variations, 0x8F7156A3142A6BAD, i32, ped: Ped, component_id: i32, drawable_id: i32);
	native!(get_number_of_ped_prop_drawable_variations, 0x5FAF9754E789FB47, i32, ped: Ped, prop_id: i32);
	native!(get_number_of_ped_prop_texture_variations, 0xA6E7F1CEB523E171, i32, ped: Ped, prop_id: i32, drawable_id: i32);
	native!(get_ped_palette_variation, 0xE3DD5F2A84B42281, i32, ped: Ped, component_id: i32);
	native!(_0x9e30e91fb03a2caf, 0x9E30E91FB03A2CAF, bool, p0: &mut i32, p1: &mut i32);
	native!(_0x1e77fa7a62ee6c4c, 0x1E77FA7A62EE6C4C, i32, p0: i32);
	native!(_0xf033419d1b81fae8, 0xF033419D1B81FAE8, i32, p0: i32);
	native!(is_ped_component_variation_valid, 0xE825F6B6CEA7671D, bool, ped: Ped, component_id: i32, drawable_id: i32, texture_id: i32);
	native!(set_ped_component_variation, 0x262B14F48D29DE80, (), ped: Ped, component_id: i32, drawable_id: i32, texture_id: i32, palette_id: i32);
	native!(set_ped_random_component_variation, 0xC8A9481A01E63C28, (), ped: Ped, p1: i32);
	native!(set_ped_random_props, 0xC44AA05345C992C6, (), ped: Ped);
	native!(set_ped_default_component_variation, 0x45EEE61580806D63, (), ped: Ped);
	native!(set_ped_blend_from_parents, 0x137BBD05230DB22D, (), ped: Ped, p1: i32, p2: i32, p3: f32, p4: f32);
	native!(set_ped_head_blend_data, 0x9414E18B9434C2FE, (), ped: Ped, shape_first_id: i32, shape_second_id: i32, shape_third_id: i32, skin_first_id: i32, skin_second_id: i32, skin_third_id: i32, shape_mix: f32, skin_mix: f32, third_mix: f32, is_parent: bool);
	native!(get_ped_head_blend_data, 0x2746BD9D88C5C5D0, bool, ped: Ped, head_blend_data: &mut i32);
	native!(update_ped_head_blend_data, 0x723538F61C647C5A, (), ped: Ped, shape_mix: f32, skin_mix: f32, third_mix: f32);
	native!(_set_ped_eye_color, 0x50B56988B170AFDF, (), ped: Ped, index: i32);
	native!(_0x76bba2cee66d47e9, 0x76BBA2CEE66D47E9, i32, p0: i32);
	native!(set_ped_head_overlay, 0x48F44967FA05CC1E, (), ped: Ped, overlay_id: i32, index: i32, opacity: f32);
	native!(_get_ped_head_overlay_value, 0xA60EF3B6461A4D43, i32, ped: Ped, overlay_id: i32);
	native!(get_ped_head_overlay_num, 0xCF1CE768BB43480E, i32, overlay_id: i32);
	native!(_set_ped_head_overlay_color, 0x497BF74A7B9CB952, (), ped: Ped, overlay_id: i32, color_type: i32, color_id: i32, second_color_id: i32);
	native!(_set_ped_hair_color, 0x4CFFC65454C93A49, (), ped: Ped, color_id: i32, highlight_color_id: i32);
	native!(_get_num_hair_colors, 0xE5C0CF872C2AD150, i32);
	native!(_get_num_makeup_colors, 0xD1F7CA1535D22818, i32);
	native!(_get_ped_hair_rgb_color, 0x4852FC386E2E1BB5, (), p0: i32, r: &mut i32, g: &mut i32, b: &mut i32);
	native!(_get_ped_makeup_rgb_color, 0x013E5CFC38CD5387, (), p0: i32, r: &mut i32, g: &mut i32, b: &mut i32);
	native!(_is_ped_hair_color_valid_2, 0xED6D8E27A43B8CDE, bool, p0: i32);
	native!(_0xea9960d07dadcf10, 0xEA9960D07DADCF10, i32, p0: i32);
	native!(_is_ped_lipstick_color_valid_2, 0x3E802F11FBE27674, bool, p0: i32);
	native!(_is_ped_blush_color_valid_2, 0xF41B5D290C99A3D6, bool, p0: i32);
	native!(_is_ped_hair_color_valid, 0xE0D36E5D9E99CC21, bool, color_id: i32);
	native!(_0xaaa6a3698a69e048, 0xAAA6A3698A69E048, i32, p0: i32);
	native!(_is_ped_lipstick_color_valid, 0x0525A2C2562F3CD4, bool, color_id: i32);
	native!(_is_ped_blush_color_valid, 0x604E810189EE3A59, bool, color_id: i32);
	native!(_0x09e7eca981d9b210, 0x09E7ECA981D9B210, i32, p0: i32);
	native!(_0xc56fbf2f228e1dac, 0xC56FBF2F228E1DAC, i32, model_hash: Hash, p1: i32, p2: i32);
	native!(_set_ped_face_feature, 0x71A5C1DBA060049E, (), ped: Ped, index: i32, scale: f32);
	native!(has_ped_head_blend_finished, 0x654CD0A825161131, bool, ped: Ped);
	native!(_0x4668d80430d6c299, 0x4668D80430D6C299, (), ped: Ped);
	native!(set_head_blend_palette_color, 0xCC9682B8951C5229, (), ped: Ped, r: i32, g: i32, b: i32, p4: i32);
	native!(disable_head_blend_palette_color, 0xA21C118553BBDF02, (), ped: Ped);
	native!(get_ped_head_blend_first_index, 0x68D353AB88B97E0C, i32, r#type: i32);
	native!(_get_num_parent_peds_of_type, 0x5EF37013A6539C9D, i32, r#type: i32);
	native!(set_ped_preload_variation_data, 0x39D55A620FCB6A3A, i32, ped: Ped, slot: i32, drawable_id: i32, texture_id: i32);
	native!(has_ped_preload_variation_data_finished, 0x66680A92700F43DF, bool, ped: Ped);
	native!(release_ped_preload_variation_data, 0x5AAB586FFEC0FD96, (), ped: Ped);
	native!(set_ped_preload_prop_data, 0x2B16A3BFF1FBCE49, bool, ped: Ped, component_id: i32, drawable_id: i32, texture_id: i32);
	native!(has_ped_preload_prop_data_finished, 0x784002A632822099, bool, ped: Ped);
	native!(release_ped_preload_prop_data, 0xF79F9DEF0AADE61A, (), ped: Ped);
	native!(get_ped_prop_index, 0x898CC20EA75BACD8, i32, ped: Ped, component_id: i32);
	native!(set_ped_prop_index, 0x93376B65A266EB5F, (), ped: Ped, component_id: i32, drawable_id: i32, texture_id: i32, attach: bool);
	native!(knock_off_ped_prop, 0x6FD7816A36615F48, (), ped: Ped, p1: bool, p2: bool, p3: bool, p4: bool);
	native!(clear_ped_prop, 0x0943E5B8E078E76E, (), ped: Ped, prop_id: i32);
	native!(clear_all_ped_props, 0xCD8A7537A9B52F06, (), ped: Ped);
	native!(drop_ambient_prop, 0xAFF4710E2A0A6C12, (), ped: Ped);
	native!(get_ped_prop_texture_index, 0xE131A28626F81AB2, i32, ped: Ped, component_id: i32);
	native!(clear_ped_parachute_pack_variation, 0x1280804F7CFD2D6C, (), p0: i32);
	native!(_0x36c6984c3ed0c911, 0x36C6984C3ED0C911, (), p0: i32);
	native!(clear_ped_scuba_gear_variation, 0xB50EB4CCB29704AC, (), ped: Ped);
	native!(_0xfec9a3b1820f3331, 0xFEC9A3B1820F3331, bool, p0: i32);
	native!(set_blocking_of_non_temporary_events, 0x9F8AA94D6D97DBF4, (), ped: Ped, toggle: bool);
	native!(set_ped_bounds_orientation, 0x4F5F651ACCC9C4CF, (), ped: Ped, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32);
	native!(register_target, 0x2F25D9AEFA34FBA2, (), ped: Ped, target: Ped);
	native!(register_hated_targets_around_ped, 0x9222F300BF8354FE, (), ped: Ped, radius: f32);
	native!(get_random_ped_at_coord, 0x876046A8E3A4B71C, Ped, x: f32, y: f32, z: f32, x_radius: f32, y_radius: f32, z_radius: f32, ped_type: i32);
	native!(get_closest_ped, 0xC33AB876A77F8164, bool, x: f32, y: f32, z: f32, radius: f32, p4: bool, p5: bool, out_ped: &mut Ped, p7: bool, p8: bool, ped_type: i32);
	native!(set_scenario_peds_to_be_returned_by_next_command, 0x14F19A8782C8071E, (), value: bool);
	native!(_0x03ea03af85a85cb7, 0x03EA03AF85A85CB7, bool, ped: Ped, p1: bool, p2: bool, p3: bool, p4: bool, p5: bool, p6: bool, p7: bool, p8: i32);
	native!(set_driver_racing_modifier, 0xDED5AF5A0EA4B297, (), driver: Ped, modifier: f32);
	native!(set_driver_ability, 0xB195FFA8042FC5C3, (), driver: Ped, ability: f32);
	native!(set_driver_aggressiveness, 0xA731F608CA104E3C, (), driver: Ped, aggressiveness: f32);
	native!(can_ped_ragdoll, 0x128F79EDCECE4FD5, bool, ped: Ped);
	native!(set_ped_to_ragdoll, 0xAE99FB955581844A, bool, ped: Ped, time1: i32, time2: i32, ragdoll_type: i32, p4: bool, p5: bool, p6: bool);
	native!(set_ped_to_ragdoll_with_fall, 0xD76632D99E4966C8, bool, ped: Ped, time: i32, p2: i32, ragdoll_type: i32, x: f32, y: f32, z: f32, p7: f32, p8: f32, p9: f32, p10: f32, p11: f32, p12: f32, p13: f32);
	native!(set_ped_ragdoll_on_collision, 0xF0A4F1BBF4FA7497, (), ped: Ped, toggle: bool);
	native!(is_ped_ragdoll, 0x47E4E977581C5B55, bool, ped: Ped);
	native!(is_ped_running_ragdoll_task, 0xE3B6097CC25AA69E, bool, ped: Ped);
	native!(set_ped_ragdoll_force_fall, 0x01F6594B923B9251, (), ped: Ped);
	native!(reset_ped_ragdoll_timer, 0x9FA4664CF62E47E8, (), ped: Ped);
	native!(set_ped_can_ragdoll, 0xB128377056A54E2A, (), ped: Ped, toggle: bool);
	native!(is_ped_running_melee_task, 0xD1871251F3B5ACD7, bool, ped: Ped);
	native!(is_ped_running_mobile_phone_task, 0x2AFE52F782F25775, bool, ped: Ped);
	native!(_0xa3f3564a5b3646c0, 0xA3F3564A5B3646C0, bool, ped: Ped);
	native!(set_ragdoll_blocking_flags, 0x26695EC767728D84, (), ped: Ped, flags: i32);
	native!(clear_ragdoll_blocking_flags, 0xD86D101FCFD00A4B, (), ped: Ped, flags: i32);
	native!(set_ped_angled_defensive_area, 0xC7F76DF27A5045A1, (), ped: Ped, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: bool, p9: bool);
	native!(set_ped_sphere_defensive_area, 0x9D3151A373974804, (), ped: Ped, x: f32, y: f32, z: f32, radius: f32, p5: bool, p6: bool);
	native!(set_ped_defensive_sphere_attached_to_ped, 0xF9B8F91AAD3B953E, (), ped: Ped, target: Ped, x_offset: f32, y_offset: f32, z_offset: f32, radius: f32, p6: bool);
	native!(set_ped_defensive_sphere_attached_to_vehicle, 0xE4723DB6E736CCFF, (), ped: Ped, target: Vehicle, x_offset: f32, y_offset: f32, z_offset: f32, radius: f32, p6: bool);
	native!(set_ped_defensive_area_attached_to_ped, 0x4EF47FE21698A8B6, (), ped: Ped, attach_ped: Ped, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: bool, p10: bool);
	native!(set_ped_defensive_area_direction, 0x413C6C763A4AFFAD, (), ped: Ped, p1: f32, p2: f32, p3: f32, p4: bool);
	native!(remove_ped_defensive_area, 0x74D4E028107450A9, (), ped: Ped, toggle: bool);
	native!(get_ped_defensive_area_position, 0x3C06B8786DD94CD1, Vec3, ped: Ped, p1: bool);
	native!(is_ped_defensive_area_active, 0xBA63D9FE45412247, bool, ped: Ped, p1: bool);
	native!(set_ped_preferred_cover_set, 0x8421EB4DA7E391B9, (), ped: Ped, item_set: i32);
	native!(remove_ped_preferred_cover_set, 0xFDDB234CF74073D9, (), ped: Ped);
	native!(revive_injured_ped, 0x8D8ACD8388CD99CE, (), ped: Ped);
	native!(resurrect_ped, 0x71BC8E838B9C6035, (), ped: Ped);
	native!(set_ped_name_debug, 0x98EFA132A4117BE1, (), ped: Ped, name: *const c_char);
	native!(get_ped_extracted_displacement, 0xE0AF41401ADF87E3, Vec3, ped: Ped, world_space: bool);
	native!(set_ped_dies_when_injured, 0x5BA7919BED300023, (), ped: Ped, toggle: bool);
	native!(set_ped_enable_weapon_blocking, 0x97A790315D3831FD, (), ped: Ped, toggle: bool);
	native!(_0xf9acf4a08098ea25, 0xF9ACF4A08098EA25, (), ped: Ped, p1: bool);
	native!(reset_ped_visible_damage, 0x3AC1F7B898F30C05, (), ped: Ped);
	native!(apply_ped_blood_damage_by_zone, 0x816F6981C60BF53B, (), ped: Ped, p1: i32, p2: f32, p3: f32, p4: i32);
	native!(apply_ped_blood, 0x83F7E01C7B769A26, (), ped: Ped, bone_index: i32, x_rot: f32, y_rot: f32, z_rot: f32, wound_type: *const c_char);
	native!(apply_ped_blood_by_zone, 0x3311E47B91EDCBBC, (), ped: Ped, p1: i32, p2: f32, p3: f32, p4: &mut i32);
	native!(apply_ped_blood_specific, 0xEF0D582CBF2D9B0F, (), ped: Ped, p1: i32, p2: f32, p3: f32, p4: f32, p5: f32, p6: i32, p7: f32, p8: &mut i32);
	native!(apply_ped_damage_decal, 0x397C38AA7B4A5F83, (), ped: Ped, damage_zone: i32, x_offset: f32, y_offset: f32, heading: f32, scale: f32, alpha: f32, variation: i32, fade_in: bool, decal_name: *const c_char);
	native!(apply_ped_damage_pack, 0x46DF918788CB093F, (), ped: Ped, damage_pack: *const c_char, damage: f32, mult: f32);
	native!(clear_ped_blood_damage, 0x8FE22675A5A45817, (), ped: Ped);
	native!(clear_ped_blood_damage_by_zone, 0x56E3B78C5408D9F4, (), ped: Ped, p1: i32);
	native!(hide_ped_blood_damage_by_zone, 0x62AB793144DE75DC, (), ped: Ped, p1: i32, p2: bool);
	native!(clear_ped_damage_decal_by_zone, 0x523C79AEEFCC4A2A, (), ped: Ped, p1: i32, p2: *const c_char);
	native!(get_ped_decorations_state, 0x71EAB450D86954A1, i32, ped: Ped);
	native!(_0x2b694afcf64e6994, 0x2B694AFCF64E6994, (), ped: Ped, p1: bool);
	native!(clear_ped_wetness, 0x9C720776DAA43E7E, (), ped: Ped);
	native!(set_ped_wetness_height, 0x44CB6447D2571AA0, (), ped: Ped, height: f32);
	native!(set_ped_wetness_enabled_this_frame, 0xB5485E4907B53019, (), ped: Ped);
	native!(clear_ped_env_dirt, 0x6585D955A68452A5, (), ped: Ped);
	native!(set_ped_sweat, 0x27B0405F59637D1F, (), ped: Ped, sweat: f32);
	native!(add_ped_decoration_from_hashes, 0x5F5D1665E352A839, (), ped: Ped, collection: Hash, overlay: Hash);
	native!(add_ped_decoration_from_hashes_in_corona, 0x5619BFA07CFD7833, (), ped: Ped, collection: Hash, overlay: Hash);
	native!(get_ped_decoration_zone_from_hashes, 0x9FD452BFBE7A7A8B, i32, collection: Hash, overlay: Hash);
	native!(clear_ped_decorations, 0x0E5173C163976E38, (), ped: Ped);
	native!(clear_ped_decorations_leave_scars, 0xE3B27E70CEAB9F0C, (), ped: Ped);
	native!(was_ped_skeleton_updated, 0x11B499C1E0FF8559, bool, ped: Ped);
	native!(get_ped_bone_coords, 0x17C07FC640E86B4E, Vec3, ped: Ped, bone_id: i32, offset_x: f32, offset_y: f32, offset_z: f32);
	native!(create_nm_message, 0x418EF2A1BCE56685, (), start_immediately: bool, message_id: i32);
	native!(give_ped_nm_message, 0xB158DFCCC56E5C5B, (), ped: Ped);
	native!(add_scenario_blocking_area, 0x1B5C85C612E5256E, i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, p6: bool, p7: bool, p8: bool, p9: bool);
	native!(remove_scenario_blocking_areas, 0xD37401D78A929A49, ());
	native!(remove_scenario_blocking_area, 0x31D16B74C6E29D66, (), p0: i32, p1: bool);
	native!(set_scenario_peds_spawn_in_sphere_area, 0x28157D43CF600981, (), x: f32, y: f32, z: f32, range: f32, p4: i32);
	native!(_does_scenario_blocking_area_exist, 0x8A24B067D175A7BD, bool, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
	native!(is_ped_using_scenario, 0x1BF094736DD62C2E, bool, ped: Ped, scenario: *const c_char);
	native!(is_ped_using_any_scenario, 0x57AB4A3080F85143, bool, ped: Ped);
	native!(set_ped_panic_exit_scenario, 0xFE07FF6495D52E2A, i32, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x9a77dfd295e29b09, 0x9A77DFD295E29B09, (), p0: i32, p1: bool);
	native!(_0x25361a96e0f7e419, 0x25361A96E0F7E419, i32, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xec6935ebe0847b90, 0xEC6935EBE0847B90, i32, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0xa3a9299c4f2adb98, 0xA3A9299C4F2ADB98, (), p0: i32);
	native!(_0xf1c03a5352243a30, 0xF1C03A5352243A30, (), p0: i32);
	native!(_0xeeed8fafec331a70, 0xEEED8FAFEC331A70, i32, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x425aecf167663f48, 0x425AECF167663F48, (), ped: Ped, p1: bool);
	native!(_0x5b6010b3cbc29095, 0x5B6010B3CBC29095, (), p0: i32, p1: bool);
	native!(_0xceda60a74219d064, 0xCEDA60A74219D064, (), p0: i32, p1: bool);
	native!(play_facial_anim, 0xE1E65CA8AC9C00ED, (), ped: Ped, anim_name: *const c_char, anim_dict: *const c_char);
	native!(_0x5687c7f05b39e401, 0x5687C7F05B39E401, (), ped: Ped, anim_dict: *const c_char);
	native!(set_facial_idle_anim_override, 0xFFC24B988B938B38, (), ped: Ped, anim_name: *const c_char, anim_dict: *const c_char);
	native!(clear_facial_idle_anim_override, 0x726256CC1EEB182F, (), ped: Ped);
	native!(set_ped_can_play_gesture_anims, 0xBAF20C5432058024, (), ped: Ped, toggle: bool);
	native!(set_ped_can_play_viseme_anims, 0xF833DDBA3B104D43, (), ped: Ped, toggle: bool, p2: bool);
	native!(_set_ped_can_play_injured_anims, 0x33A60D8BDD6E508C, (), ped: Ped, p1: bool);
	native!(set_ped_can_play_ambient_anims, 0x6373D1349925A70E, (), ped: Ped, toggle: bool);
	native!(set_ped_can_play_ambient_base_anims, 0x0EB0585D15254740, (), ped: Ped, toggle: bool);
	native!(_0xc2ee020f5fb4db53, 0xC2EE020F5FB4DB53, (), ped: Ped);
	native!(set_ped_can_arm_ik, 0x6C3B4D6D13B4C841, (), ped: Ped, toggle: bool);
	native!(set_ped_can_head_ik, 0xC11C18092C5530DC, (), ped: Ped, toggle: bool);
	native!(set_ped_can_leg_ik, 0x73518ECE2485412B, (), ped: Ped, toggle: bool);
	native!(set_ped_can_torso_ik, 0xF2B7106D37947CE0, (), ped: Ped, toggle: bool);
	native!(set_ped_can_torso_react_ik, 0xF5846EDB26A98A24, (), ped: Ped, p1: bool);
	native!(_0x6647c5f6f5792496, 0x6647C5F6F5792496, (), ped: Ped, p1: bool);
	native!(set_ped_can_use_auto_conversation_lookat, 0xEC4686EC06434678, (), ped: Ped, toggle: bool);
	native!(is_ped_headtracking_ped, 0x5CD3CB88A7F8850D, bool, ped1: Ped, ped2: Ped);
	native!(is_ped_headtracking_entity, 0x813A0A7C9D2E831F, bool, ped: Ped, entity: Entity);
	native!(set_ped_primary_lookat, 0xCD17B554996A8D9E, (), ped: Ped, look_at: Ped);
	native!(set_ped_cloth_package_index, 0x78C4E9961DB3EB5B, (), p0: i32, p1: i32);
	native!(set_ped_cloth_prone, 0x82A3D6D9CC2CB8E3, (), p0: i32, p1: i32);
	native!(_0xa660faf550eb37e5, 0xA660FAF550EB37E5, (), p0: i32, p1: bool);
	native!(set_ped_config_flag, 0x1913FE4CBF41C463, (), ped: Ped, flag_id: i32, value: bool);
	native!(set_ped_reset_flag, 0xC1E8A365BF3B29F2, (), ped: Ped, flag_id: i32, do_reset: bool);
	native!(get_ped_config_flag, 0x7EE53118C892B513, bool, ped: Ped, flag_id: i32, p2: bool);
	native!(get_ped_reset_flag, 0xAF9E59B1B1FBF2A0, bool, ped: Ped, flag_id: i32);
	native!(set_ped_group_member_passenger_index, 0x0BDDB8D9EC6BCF3C, (), ped: Ped, index: i32);
	native!(set_ped_can_evasive_dive, 0x6B7A646C242A7059, (), ped: Ped, toggle: bool);
	native!(is_ped_evasive_diving, 0x414641C26E105898, bool, ped: Ped, evading_entity: &mut Entity);
	native!(set_ped_shoots_at_coord, 0x96A05E4FB321B1BA, (), ped: Ped, x: f32, y: f32, z: f32, toggle: bool);
	native!(set_ped_model_is_suppressed, 0xE163A4BCE4DE6F11, (), model_hash: Hash, toggle: bool);
	native!(stop_any_ped_model_being_suppressed, 0xB47BD05FA66B40CF, ());
	native!(set_ped_can_be_targeted_when_injured, 0x638C03B0F9878F57, (), ped: Ped, toggle: bool);
	native!(set_ped_generates_dead_body_events, 0x7FB17BA2E7DECA5B, (), ped: Ped, toggle: bool);
	native!(_block_ped_dead_body_shocking_events, 0xE43A13C9E4CCCBCF, (), ped: Ped, p1: bool);
	native!(_0x3e9679c1dfcf422c, 0x3E9679C1DFCF422C, (), p0: i32, p1: i32);
	native!(set_ped_can_ragdoll_from_player_impact, 0xDF993EE5E90ABA25, (), ped: Ped, toggle: bool);
	native!(give_ped_helmet, 0x54C7C4A94367717E, (), ped: Ped, cannot_remove: bool, helmet_flag: i32, texture_index: i32);
	native!(remove_ped_helmet, 0xA7B2458D0AD6DED8, (), ped: Ped, instantly: bool);
	native!(_0x14590ddbedb1ec85, 0x14590DDBEDB1EC85, bool, ped: Ped);
	native!(set_ped_helmet, 0x560A43136EB58105, (), ped: Ped, can_wear_helmet: bool);
	native!(set_ped_helmet_flag, 0xC0E78D5C2CE3EB25, (), ped: Ped, helmet_flag: i32);
	native!(set_ped_helmet_prop_index, 0x26D83693ED99291C, (), ped: Ped, prop_index: i32, p2: bool);
	native!(_set_ped_helmet_unk, 0x3F7325574E41B44D, (), ped: Ped, p1: bool, p2: i32, p3: i32);
	native!(_is_ped_helmet_unk, 0xB9496CE47546DB2C, bool, ped: Ped);
	native!(set_ped_helmet_texture_index, 0xF1550C4BD22582E2, (), ped: Ped, texture_index: i32);
	native!(is_ped_wearing_helmet, 0xF33BDFE19B309B19, bool, ped: Ped);
	native!(_0x687c0b594907d2e8, 0x687C0B594907D2E8, (), ped: Ped);
	native!(_0x451294e859ecc018, 0x451294E859ECC018, i32, p0: i32);
	native!(_0x9d728c1e12bf5518, 0x9D728C1E12BF5518, i32, p0: i32);
	native!(_0xf2385935bffd4d92, 0xF2385935BFFD4D92, bool, p0: i32);
	native!(set_ped_to_load_cover, 0x332B562EEDA62399, (), ped: Ped, toggle: bool);
	native!(set_ped_can_cower_in_cover, 0xCB7553CDCEF4A735, (), ped: Ped, toggle: bool);
	native!(set_ped_can_peek_in_cover, 0xC514825C507E3736, (), ped: Ped, toggle: bool);
	native!(set_ped_plays_head_on_horn_anim_when_dies_in_vehicle, 0x94D94BF1A75AED3D, (), ped: Ped, toggle: bool);
	native!(set_ped_leg_ik_mode, 0xC396F5B86FF9FEBD, (), ped: Ped, mode: i32);
	native!(set_ped_motion_blur, 0x0A986918B102B448, (), ped: Ped, toggle: bool);
	native!(set_ped_can_switch_weapon, 0xED7F7EFE9FABF340, (), ped: Ped, toggle: bool);
	native!(set_ped_dies_instantly_in_water, 0xEEB64139BA29A7CF, (), ped: Ped, toggle: bool);
	native!(_0x1a330d297aac6bc1, 0x1A330D297AAC6BC1, (), ped: Ped, p1: i32);
	native!(stop_ped_weapon_firing_when_dropped, 0xC158D28142A34608, (), ped: Ped);
	native!(set_scripted_anim_seat_offset, 0x5917BBA32D06C230, (), ped: Ped, p1: f32);
	native!(set_ped_combat_movement, 0x4D9CA1009AFBD057, (), ped: Ped, combat_movement: i32);
	native!(get_ped_combat_movement, 0xDEA92412FCAEB3F5, i32, ped: Ped);
	native!(set_ped_combat_ability, 0xC7622C0D36B2FDA8, (), ped: Ped, p1: i32);
	native!(set_ped_combat_range, 0x3C606747B23E497B, (), ped: Ped, p1: i32);
	native!(get_ped_combat_range, 0xF9D9F7F2DB8E2FA0, i32, ped: Ped);
	native!(set_ped_combat_attributes, 0x9F7794730795E019, (), ped: Ped, attribute_index: i32, enabled: bool);
	native!(set_ped_target_loss_response, 0x0703B9079823DA4A, (), ped: Ped, response_type: i32);
	native!(is_ped_performing_melee_action, 0xDCCA191DF9980FD7, bool, ped: Ped);
	native!(is_ped_performing_stealth_kill, 0xFD4CCDBCC59941B7, bool, ped: Ped);
	native!(is_ped_performing_dependent_combo_limit, 0xEBD0EDBA5BE957CF, bool, ped: Ped);
	native!(is_ped_being_stealth_killed, 0x863B23EFDE9C5DF2, bool, ped: Ped);
	native!(get_melee_target_for_ped, 0x18A3E9EE1297FD39, Ped, ped: Ped);
	native!(was_ped_killed_by_stealth, 0xF9800AA1A771B000, bool, ped: Ped);
	native!(was_ped_killed_by_takedown, 0x7F08E26039C7347C, bool, ped: Ped);
	native!(was_ped_knocked_out, 0x61767F73EACEED21, bool, ped: Ped);
	native!(set_ped_flee_attributes, 0x70A2D1137C8ED7C9, (), ped: Ped, attribute_flags: i32, enable: bool);
	native!(set_ped_cower_hash, 0xA549131166868ED3, (), ped: Ped, p1: *const c_char);
	native!(_0x2016c603d6b8987c, 0x2016C603D6B8987C, (), ped: Ped, toggle: bool);
	native!(set_ped_steers_around_peds, 0x46F2193B3AD1D891, (), ped: Ped, toggle: bool);
	native!(set_ped_steers_around_objects, 0x1509C089ADC208BF, (), ped: Ped, toggle: bool);
	native!(set_ped_steers_around_vehicles, 0xEB6FB9D48DDE23EC, (), ped: Ped, toggle: bool);
	native!(_0xa9b61a329bfdcbea, 0xA9B61A329BFDCBEA, (), p0: i32, p1: bool);
	native!(set_ped_increased_avoidance_radius, 0x570389D1C3DE3C6B, (), ped: Ped);
	native!(set_ped_blocks_pathing_when_dead, 0x576594E8D64375E2, (), ped: Ped, toggle: bool);
	native!(_0xa52d5247a4227e14, 0xA52D5247A4227E14, (), p0: i32);
	native!(is_any_ped_near_point, 0x083961498679DC9F, bool, x: f32, y: f32, z: f32, radius: f32);
	native!(_0x2208438012482a1a, 0x2208438012482A1A, (), ped: Ped, p1: bool, p2: bool);
	native!(is_ped_heading_towards_position, 0xFCF37A457CB96DC0, bool, ped: Ped, x: f32, y: f32, z: f32, p4: f32);
	native!(request_ped_visibility_tracking, 0x7D7A2E43E74E2EB8, (), ped: Ped);
	native!(request_ped_vehicle_visibility_tracking, 0x2BC338A7B21F4608, (), ped: Ped, p1: bool);
	native!(_0xcd018c591f94cb43, 0xCD018C591F94CB43, (), ped: Ped, p1: bool);
	native!(_0x75ba1cb3b7d40caf, 0x75BA1CB3B7D40CAF, (), ped: Ped, p1: bool);
	native!(is_tracked_ped_visible, 0x91C8E617F64188AC, bool, ped: Ped);
	native!(_0x511f1a683387c7e2, 0x511F1A683387C7E2, i32, ped: Ped);
	native!(is_ped_tracked, 0x4C5E1F087CD10BB7, bool, ped: Ped);
	native!(has_ped_received_event, 0x8507BCB710FA6DC0, bool, ped: Ped, event_id: i32);
	native!(can_ped_see_hated_ped, 0x6CD5A433374D4CFB, bool, ped1: Ped, ped2: Ped);
	native!(_0x9c6a6c19b6c0c496, 0x9C6A6C19B6C0C496, bool, ped: Ped, p1: &mut i32);
	native!(_0x2dfc81c9b9608549, 0x2DFC81C9B9608549, bool, ped: Ped, p1: &mut i32);
	native!(get_ped_bone_index, 0x3F428D08BE5AAE31, i32, ped: Ped, bone_id: i32);
	native!(get_ped_ragdoll_bone_index, 0x2057EF813397A772, i32, ped: Ped, bone: i32);
	native!(set_ped_enveff_scale, 0xBF29516833893561, (), ped: Ped, value: f32);
	native!(get_ped_enveff_scale, 0x9C14D30395A51A3C, f32, ped: Ped);
	native!(set_enable_ped_enveff_scale, 0xD2C5AA0C0E8D0F1E, (), ped: Ped, toggle: bool);
	native!(_0x110f526ab784111f, 0x110F526AB784111F, (), ped: Ped, p1: f32);
	native!(set_ped_enveff_color_modulator, 0xD69411AA0CEBF9E9, (), ped: Ped, p1: i32, p2: i32, p3: i32);
	native!(_set_ped_reflection_intensity, 0x4E90D746056E273D, (), ped: Ped, intensity: f32);
	native!(_get_ped_reflection_intensity, 0x1461B28A06717D68, f32, ped: Ped);
	native!(_is_ped_shader_effect_valid, 0x81AA517FBBA05D39, bool, ped: Ped);
	native!(_0xe906ec930f5fe7c8, 0xE906EC930F5FE7C8, (), p0: i32, p1: i32);
	native!(_0x1216e0bfa72cc703, 0x1216E0BFA72CC703, (), p0: i32, p1: i32);
	native!(_0x2b5aa717a181fb4c, 0x2B5AA717A181FB4C, (), p0: i32, p1: bool);
	native!(_0xb8b52e498014f5b0, 0xB8B52E498014F5B0, bool, ped: Ped);
	native!(create_synchronized_scene, 0x8C18E0F9080ADD73, i32, x: f32, y: f32, z: f32, roll: f32, pitch: f32, yaw: f32, p6: i32);
	native!(_create_synchronized_scene_2, 0x62EC273D00187DCA, i32, x: f32, y: f32, z: f32, radius: f32, object: Hash);
	native!(is_synchronized_scene_running, 0x25D39B935A038A26, bool, scene_id: i32);
	native!(set_synchronized_scene_origin, 0x6ACF6B7225801CD7, (), scene_id: i32, x: f32, y: f32, z: f32, roll: f32, pitch: f32, yaw: f32, p7: bool);
	native!(set_synchronized_scene_phase, 0x734292F4F0ABF6D0, (), scene_id: i32, phase: f32);
	native!(get_synchronized_scene_phase, 0xE4A310B1D7FA73CC, f32, scene_id: i32);
	native!(set_synchronized_scene_rate, 0xB6C49F8A5E295A5D, (), scene_id: i32, rate: f32);
	native!(get_synchronized_scene_rate, 0xD80932D577274D40, f32, scene_id: i32);
	native!(set_synchronized_scene_looped, 0xD9A897A4C6C2974F, (), scene_id: i32, toggle: bool);
	native!(is_synchronized_scene_looped, 0x62522002E0C391BA, bool, scene_id: i32);
	native!(_set_synchronized_scene_occlusion_portal, 0x394B9CD12435C981, (), scene_id: i32, p1: bool);
	native!(_0x7f2f4f13ac5257ef, 0x7F2F4F13AC5257EF, bool, p0: i32);
	native!(attach_synchronized_scene_to_entity, 0x272E4723B56A3B96, (), scene_id: i32, entity: Entity, bone_index: i32);
	native!(detach_synchronized_scene, 0x6D38F1F04CBB37EA, (), scene_id: i32);
	native!(_dispose_synchronized_scene, 0xCD9CC7E200A52A6F, (), scene: i32);
	native!(force_ped_motion_state, 0xF28965D04F570DCA, bool, ped: Ped, motion_state_hash: Hash, p2: bool, p3: i32, p4: bool);
	native!(_0xf60165e1d2c5370b, 0xF60165E1D2C5370B, bool, ped: Ped, p1: &mut i32, p2: &mut i32);
	native!(set_ped_max_move_blend_ratio, 0x433083750C5E064A, (), ped: Ped, value: f32);
	native!(set_ped_min_move_blend_ratio, 0x01A898D26E2333DD, (), ped: Ped, value: f32);
	native!(set_ped_move_rate_override, 0x085BF80FA50A39D1, (), ped: Ped, value: f32);
	native!(_0x0b3e35ac043707d9, 0x0B3E35AC043707D9, (), p0: i32, p1: i32);
	native!(_0x46b05bcae43856b0, 0x46B05BCAE43856B0, bool, ped: Ped, flag: i32);
	native!(get_ped_nearby_vehicles, 0xCFF869CBFA210D82, i32, ped: Ped, size_and_vehs: &mut i32);
	native!(get_ped_nearby_peds, 0x23F8F5FC7E8C4A6B, i32, ped: Ped, size_and_peds: &mut i32, ignore: i32);
	native!(_has_streamed_ped_assets_loaded, 0x7350823473013C02, bool, ped: Ped);
	native!(is_ped_using_action_mode, 0x00E73468D085F745, bool, ped: Ped);
	native!(set_ped_using_action_mode, 0xD75ACCF5E0FB5367, (), ped: Ped, p1: bool, p2: i32, action: *const c_char);
	native!(set_movement_mode_override, 0x781DE8FA214E87D2, (), ped: Ped, name: *const c_char);
	native!(set_ped_capsule, 0x364DF566EC833DE2, (), ped: Ped, value: f32);
	native!(register_pedheadshot, 0x4462658788425076, i32, ped: Ped);
	native!(_register_pedheadshot_3, 0xBA8805A1108A2515, i32, ped: Ped);
	native!(register_pedheadshot_transparent, 0x953563CE563143AF, i32, ped: Ped);
	native!(unregister_pedheadshot, 0x96B1361D9B24C2FF, (), id: i32);
	native!(is_pedheadshot_valid, 0xA0A9668F158129A2, bool, id: i32);
	native!(is_pedheadshot_ready, 0x7085228842B13A67, bool, id: i32);
	native!(get_pedheadshot_txd_string, 0xDB4EACD4AD0A5D6B, *const c_char, id: i32);
	native!(request_pedheadshot_img_upload, 0xF0DAEF2F545BEE25, bool, id: i32);
	native!(release_pedheadshot_img_upload, 0x5D517B27CF6ECD04, (), id: i32);
	native!(is_pedheadshot_img_upload_available, 0xEBB376779A760AA8, bool);
	native!(has_pedheadshot_img_upload_failed, 0x876928DDDFCCC9CD, bool);
	native!(has_pedheadshot_img_upload_succeeded, 0xE8A169E666CBC541, bool);
	native!(set_ped_heatscale_override, 0xC1F6EBF9A3D55538, (), ped: Ped, heat_scale: f32);
	native!(disable_ped_heatscale_override, 0x600048C60D5C2C51, (), p0: i32);
	native!(_0x2df9038c90ad5264, 0x2DF9038C90AD5264, (), p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, interior_flags: i32, scale: f32, duration: i32);
	native!(_0xb2aff10216defa2f, 0xB2AFF10216DEFA2F, (), x: f32, y: f32, z: f32, p3: f32, p4: f32, p5: f32, p6: f32, interior_flags: i32, scale: f32, duration: i32);
	native!(_0xfee4a5459472a9f8, 0xFEE4A5459472A9F8, ());
	native!(_0x3c67506996001f5e, 0x3C67506996001F5E, i32);
	native!(_0xa586fbeb32a53dbb, 0xA586FBEB32A53DBB, i32);
	native!(_0xf445de8da80a1792, 0xF445DE8DA80A1792, i32);
	native!(_0xa635c11b8c44afc2, 0xA635C11B8C44AFC2, i32);
	native!(_0x280c7e3ac7f56e90, 0x280C7E3AC7F56E90, (), p0: i32, p1: &mut i32, p2: &mut i32, p3: &mut i32);
	native!(_0xb782f8238512bad5, 0xB782F8238512BAD5, (), p0: i32, p1: &mut i32);
	native!(set_ik_target, 0xC32779C16FCEECD9, (), ped: Ped, ik_index: i32, entity_look_at: Entity, bone_look_at: i32, offset_x: f32, offset_y: f32, offset_z: f32, p7: i32, blend_in_duration: i32, blend_out_duration: i32);
	native!(_0xed3c76adfa6d07c4, 0xED3C76ADFA6D07C4, (), ped: Ped);
	native!(request_action_mode_asset, 0x290E2780BB7AA598, (), asset: *const c_char);
	native!(has_action_mode_asset_loaded, 0xE4B5F4BF2CB24E65, bool, asset: *const c_char);
	native!(remove_action_mode_asset, 0x13E940F88470FA51, (), asset: *const c_char);
	native!(request_stealth_mode_asset, 0x2A0A62FCDEE16D4F, (), asset: *const c_char);
	native!(has_stealth_mode_asset_loaded, 0xE977FC5B08AF3441, bool, asset: *const c_char);
	native!(remove_stealth_mode_asset, 0x9219857D21F0E842, (), asset: *const c_char);
	native!(set_ped_lod_multiplier, 0xDC2C5C242AAC342B, (), ped: Ped, multiplier: f32);
	native!(_0xe861d0b05c7662b8, 0xE861D0B05C7662B8, (), ped: Ped, p1: bool, p2: i32);
	native!(set_force_footstep_update, 0x129466ED55140F8D, (), ped: Ped, toggle: bool);
	native!(set_force_step_type, 0xCB968B53FC7F916D, (), ped: Ped, p1: bool, r#type: i32, p3: i32);
	native!(is_any_hostile_ped_near_point, 0x68772DB2B2526F9F, bool, ped: Ped, x: f32, y: f32, z: f32, radius: f32);
	native!(_0x820e9892a77e97cd, 0x820E9892A77E97CD, (), p0: i32, p1: i32);
	native!(_0x06087579e7aa85a9, 0x06087579E7AA85A9, bool, p0: i32, p1: i32, p2: f32, p3: f32, p4: f32, p5: f32);
	native!(set_pop_control_sphere_this_frame, 0xD8C3BE3EE94CAF2D, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_0xd33daa36272177c4, 0xD33DAA36272177C4, (), ped: Ped);
	native!(_0x711794453cfd692b, 0x711794453CFD692B, (), p0: i32, p1: i32);
	native!(_0x83a169eabcdb10a2, 0x83A169EABCDB10A2, (), p0: i32, p1: i32);
	native!(_0x288df530c92dad6f, 0x288DF530C92DAD6F, (), p0: i32, p1: f32);
	native!(_0x3795688a307e1eb6, 0x3795688A307E1EB6, bool, ped: Ped);
	native!(_0x0f62619393661d6e, 0x0F62619393661D6E, (), p0: i32, p1: i32, p2: i32);
	native!(_0xdfe68c4b787e1bfb, 0xDFE68C4B787E1BFB, (), p0: i32);
	native!(_set_enable_scuba_gear_light, 0xEE2476B9EE4A094F, (), ped: Ped, toggle: bool);
	native!(_is_scuba_gear_light_enabled, 0x88274C11CF0D866D, bool, ped: Ped);
	native!(_0x637822dc2afeebf8, 0x637822DC2AFEEBF8, (), p0: i32);
	native!(_0xfab944d4d481accb, 0xFAB944D4D481ACCB, (), ped: Ped, toggle: bool);
}

pub mod physics {
	use super::*;

	native!(add_rope, 0xE832D760399EB220, i32, x: f32, y: f32, z: f32, rot_x: f32, rot_y: f32, rot_z: f32, length: f32, rope_type: i32, max_length: f32, min_length: f32, p10: f32, p11: bool, p12: bool, rigid: bool, p14: f32, break_when_shot: bool, unk_ptr: &mut i32);
	native!(delete_rope, 0x52B4829281364649, (), rope_id: &mut i32);
	native!(delete_child_rope, 0xAA5D6B1888E4DB20, (), rope_id: i32);
	native!(does_rope_exist, 0xFD5448BE3111ED96, bool, rope_id: &mut i32);
	native!(rope_draw_shadow_enabled, 0xF159A63806BB5BA8, (), rope_id: &mut i32, toggle: bool);
	native!(load_rope_data, 0xCBB203C04D1ABD27, (), rope_id: i32, rope_preset: *const c_char);
	native!(pin_rope_vertex, 0x2B320CF14146B69A, (), rope_id: i32, vertex: i32, x: f32, y: f32, z: f32);
	native!(unpin_rope_vertex, 0x4B5AE2EEE4A8F180, (), rope_id: i32, vertex: i32);
	native!(get_rope_vertex_count, 0x3655F544CD30F0B5, i32, rope_id: i32);
	native!(attach_entities_to_rope, 0x3D95EC8B6D940AC3, (), rope_id: i32, ent1: Entity, ent2: Entity, ent1_x: f32, ent1_y: f32, ent1_z: f32, ent2_x: f32, ent2_y: f32, ent2_z: f32, length: f32, p10: bool, p11: bool, p12: &mut i32, p13: &mut i32);
	native!(attach_rope_to_entity, 0x4B490A6832559A65, (), rope_id: i32, entity: Entity, x: f32, y: f32, z: f32, p5: bool);
	native!(detach_rope_from_entity, 0xBCF3026912A8647D, (), rope_id: i32, entity: Entity);
	native!(rope_set_update_pinverts, 0xC8D667EE52114ABA, (), rope_id: i32);
	native!(rope_set_update_order, 0xDC57A637A20006ED, (), rope_id: i32, p1: i32);
	native!(_0x36ccb9be67b970fd, 0x36CCB9BE67B970FD, (), rope_id: i32, p1: bool);
	native!(_0x84de3b5fb3e666f0, 0x84DE3B5FB3E666F0, bool, rope_id: &mut i32);
	native!(get_rope_last_vertex_coord, 0x21BB0FBD3E217C2D, Vec3, rope_id: i32);
	native!(get_rope_vertex_coord, 0xEA61CA8E80F09E4D, Vec3, rope_id: i32, vertex: i32);
	native!(start_rope_winding, 0x1461C72C889E343E, (), rope_id: i32);
	native!(stop_rope_winding, 0xCB2D4AB84A19AA7C, (), rope_id: i32);
	native!(start_rope_unwinding_front, 0x538D1179EC1AA9A9, (), rope_id: i32);
	native!(stop_rope_unwinding_front, 0xFFF3A50779EFBBB3, (), rope_id: i32);
	native!(rope_convert_to_simple, 0x5389D48EFA2F079A, (), rope_id: i32);
	native!(rope_load_textures, 0x9B9039DBF2D258C1, ());
	native!(rope_are_textures_loaded, 0xF2D0E6A75CC05597, bool);
	native!(rope_unload_textures, 0x6CE36C35C1AC8163, ());
	native!(_does_rope_belong_to_this_script, 0x271C9D3ACA5D6409, bool, rope_id: i32);
	native!(_0xbc0ce682d4d05650, 0xBC0CE682D4D05650, (), rope_id: i32, p1: i32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: f32, p10: f32, p11: f32, p12: f32, p13: f32);
	native!(_0xb1b6216ca2e7b55e, 0xB1B6216CA2E7B55E, (), p0: i32, p1: bool, p2: bool);
	native!(_0xb743f735c03d7810, 0xB743F735C03D7810, (), rope_id: i32, p1: i32);
	native!(rope_get_distance_between_ends, 0x73040398DFF9A4A6, f32, rope_id: i32);
	native!(rope_force_length, 0xD009F759A723DB1B, (), rope_id: i32, length: f32);
	native!(rope_reset_length, 0xC16DE94D9BEA14A0, (), rope_id: i32, length: f32);
	native!(apply_impulse_to_cloth, 0xE37F721824571784, (), pos_x: f32, pos_y: f32, pos_z: f32, vec_x: f32, vec_y: f32, vec_z: f32, impulse: f32);
	native!(set_damping, 0xEEA3B200A6FEB65B, (), entity: Entity, vertex: i32, value: f32);
	native!(activate_physics, 0x710311ADF0E20730, (), entity: Entity);
	native!(set_cgoffset, 0xD8FA3908D7B86904, (), entity: Entity, x: f32, y: f32, z: f32);
	native!(get_cgoffset, 0x8214A4B5A7A33612, Vec3, entity: Entity);
	native!(set_cg_at_boundcenter, 0xBE520D9761FF811F, (), entity: Entity);
	native!(break_entity_glass, 0x2E648D16F6E308F3, (), entity: Entity, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: i32, p10: bool);
	native!(_get_has_object_frag_inst, 0x0C112765300C7E1E, bool, object: Object);
	native!(set_disable_breaking, 0x5CEC1A84620E7D5B, (), object: Object, toggle: bool);
	native!(_0xcc6e963682533882, 0xCC6E963682533882, (), object: Object);
	native!(set_disable_frag_damage, 0x01BA3AED21C16CFB, (), object: Object, toggle: bool);
	native!(_set_entity_proof_unk, 0x15F944730C832252, (), entity: Entity, toggle: bool);
	native!(_0x9ebd751e5787baf2, 0x9EBD751E5787BAF2, (), p0: bool);
	native!(_0xaa6a6098851c396f, 0xAA6A6098851C396F, (), p0: bool);
}

pub mod player {
	use super::*;

	native!(get_player_ped, 0x43A66C31C68491C0, Ped, player: Player);
	native!(get_player_ped_script_index, 0x50FAC3A3E030A6E1, Ped, player: Player);
	native!(set_player_model, 0x00A1CADD00108836, (), player: Player, model: Hash);
	native!(change_player_ped, 0x048189FAC643DEEE, (), player: Player, ped: Ped, p2: bool, reset_damage: bool);
	native!(get_player_rgb_colour, 0xE902EF951DCE178F, (), player: Player, r: &mut i32, g: &mut i32, b: &mut i32);
	native!(get_number_of_players, 0x407C7F91DDB46C16, i32);
	native!(get_player_team, 0x37039302F4E0A008, i32, player: Player);
	native!(set_player_team, 0x0299FA38396A4940, (), player: Player, team: i32);
	native!(_get_number_of_players_in_team, 0x1FC200409F10E6F1, i32, team: i32);
	native!(get_player_name, 0x6D0DE6A7B5DA71F8, *const c_char, player: Player);
	native!(get_wanted_level_radius, 0x085DEB493BE80812, f32, player: Player);
	native!(get_player_wanted_centre_position, 0x0C92BA89F1AF26F8, Vec3, player: Player);
	native!(set_player_wanted_centre_position, 0x520E541A97A13354, (), player: Player, position: &mut Vec3, p2: bool, p3: bool);
	native!(get_wanted_level_threshold, 0xFDD179EAF45B556C, i32, wanted_level: i32);
	native!(set_player_wanted_level, 0x39FF19C64EF7DA5B, (), player: Player, wanted_level: i32, disable_no_mission: bool);
	native!(set_player_wanted_level_no_drop, 0x340E61DE7F471565, (), player: Player, wanted_level: i32, p2: bool);
	native!(set_player_wanted_level_now, 0xE0A7D1E497FFCD6F, (), player: Player, p1: bool);
	native!(are_player_flashing_stars_about_to_drop, 0xAFAF86043E5874E9, bool, player: Player);
	native!(are_player_stars_greyed_out, 0x0A6EB355EE14A2DB, bool, player: Player);
	native!(_0x7e07c78925d5fd96, 0x7E07C78925D5FD96, i32, p0: i32);
	native!(set_dispatch_cops_for_player, 0xDB172424876553F4, (), player: Player, toggle: bool);
	native!(is_player_wanted_level_greater, 0x238DB2A2C23EE9EF, bool, player: Player, wanted_level: i32);
	native!(clear_player_wanted_level, 0xB302540597885499, (), player: Player);
	native!(is_player_dead, 0x424D4687FA1E5652, bool, player: Player);
	native!(is_player_pressing_horn, 0xFA1E2BF8B10598F9, bool, player: Player);
	native!(set_player_control, 0x8D32347D6D4C40A2, (), player: Player, b_has_control: bool, flags: i32);
	native!(get_player_wanted_level, 0xE28E54788CE8F12D, i32, player: Player);
	native!(set_max_wanted_level, 0xAA5F02DB48D704B9, (), max_wanted_level: i32);
	native!(set_police_radar_blips, 0x43286D561B72B8BF, (), toggle: bool);
	native!(set_police_ignore_player, 0x32C62AA929C2DA6A, (), player: Player, toggle: bool);
	native!(is_player_playing, 0x5E9564D8246B909A, bool, player: Player);
	native!(set_everyone_ignore_player, 0x8EEDA153AD141BA4, (), player: Player, toggle: bool);
	native!(set_all_random_peds_flee, 0x056E0FE8534C2949, (), player: Player, toggle: bool);
	native!(set_all_random_peds_flee_this_frame, 0x471D2FF42A94B4F2, (), player: Player);
	native!(_0xde45d1a1ef45ee61, 0xDE45D1A1EF45EE61, (), player: Player, toggle: bool);
	native!(_0xc3376f42b1faccc6, 0xC3376F42B1FACCC6, (), player: Player);
	native!(_0xfac75988a7d078d3, 0xFAC75988A7D078D3, (), player: Player);
	native!(set_ignore_low_priority_shocking_events, 0x596976B02B6B5700, (), player: Player, toggle: bool);
	native!(set_wanted_level_multiplier, 0x020E5F00CDA207BA, (), multiplier: f32);
	native!(set_wanted_level_difficulty, 0x9B0BB33B04405E7A, (), player: Player, difficulty: f32);
	native!(reset_wanted_level_difficulty, 0xB9D0DD990DC141DD, (), player: Player);
	native!(start_firing_amnesty, 0xBF9BD71691857E48, (), duration: i32);
	native!(report_crime, 0xE9B09589827545E7, (), player: Player, crime_type: i32, wanted_lvl_thresh: i32);
	native!(_switch_crime_type, 0x9A987297ED8BD838, (), player: Player, p1: i32);
	native!(_0xbc9490ca15aea8fb, 0xBC9490CA15AEA8FB, (), player: Player);
	native!(_0x4669b3ed80f24b4e, 0x4669B3ED80F24B4E, (), player: Player);
	native!(_0x2f41a3bae005e5fa, 0x2F41A3BAE005E5FA, (), p0: i32, p1: i32);
	native!(_0xad73ce5a09e42d12, 0xAD73CE5A09E42D12, (), player: Player);
	native!(_0x36f1b38855f2a8df, 0x36F1B38855F2A8DF, (), player: Player);
	native!(_0xdc64d2c53493ed12, 0xDC64D2C53493ED12, (), player: Player);
	native!(_0xb45eff719d8427a6, 0xB45EFF719D8427A6, (), p0: f32);
	native!(_0x0032a6dba562c518, 0x0032A6DBA562C518, ());
	native!(can_player_start_mission, 0xDE7465A27D403C06, bool, player: Player);
	native!(is_player_ready_for_cutscene, 0x908CBECC2CAA3690, bool, player: Player);
	native!(is_player_targetting_entity, 0x7912F7FC4F6264B6, bool, player: Player, entity: Entity);
	native!(get_player_target_entity, 0x13EDE1A5DBF797C9, bool, player: Player, entity: &mut Entity);
	native!(is_player_free_aiming, 0x2E397FD2ECD37C87, bool, player: Player);
	native!(is_player_free_aiming_at_entity, 0x3C06B5C839B38F7B, bool, player: Player, entity: Entity);
	native!(get_entity_player_is_free_aiming_at, 0x2975C866E6713290, bool, player: Player, entity: &mut Entity);
	native!(set_player_lockon_range_override, 0x29961D490E5814FD, (), player: Player, range: f32);
	native!(set_player_can_do_drive_by, 0x6E8834B52EC20C77, (), player: Player, toggle: bool);
	native!(set_player_can_be_hassled_by_gangs, 0xD5E460AD7020A246, (), player: Player, toggle: bool);
	native!(set_player_can_use_cover, 0xD465A8599DFF6814, (), player: Player, toggle: bool);
	native!(get_max_wanted_level, 0x462E0DB9B137DC5F, i32);
	native!(is_player_targetting_anything, 0x78CFE51896B6B8A4, bool, player: Player);
	native!(set_player_sprint, 0xA01B8075D8B92DF4, (), player: Player, toggle: bool);
	native!(reset_player_stamina, 0xA6F312FCCE9C1DFE, (), player: Player);
	native!(restore_player_stamina, 0xA352C1B864CAFD33, (), player: Player, p1: f32);
	native!(get_player_sprint_stamina_remaining, 0x3F9F16F8E65A7ED7, f32, player: Player);
	native!(get_player_sprint_time_remaining, 0x1885BC9B108B4C99, f32, player: Player);
	native!(get_player_underwater_time_remaining, 0xA1FCF8E6AF40B731, f32, player: Player);
	native!(_0xa0d3e4f7aafb7e78, 0xA0D3E4F7AAFB7E78, i32, p0: i32, p1: i32);
	native!(get_player_group, 0x0D127585F77030AF, i32, player: Player);
	native!(get_player_max_armour, 0x92659B4CE1863CB3, i32, player: Player);
	native!(is_player_control_on, 0x49C32D60007AFA47, bool, player: Player);
	native!(_is_player_cam_control_disabled, 0x7C814D2FB49F40C0, bool);
	native!(is_player_script_control_on, 0x8A876A65283DD7D7, bool, player: Player);
	native!(is_player_climbing, 0x95E8F73DC65EFB9C, bool, player: Player);
	native!(is_player_being_arrested, 0x388A47C51ABDAC8E, bool, player: Player, at_arresting: bool);
	native!(reset_player_arrest_state, 0x2D03E13C460760D6, (), player: Player);
	native!(get_players_last_vehicle, 0xB6997A7EB3F5C8C0, Vehicle);
	native!(get_player_index, 0xA5EDC40EF369B48D, Player);
	native!(int_to_playerindex, 0x41BD2A6B006AF756, Player, value: i32);
	native!(int_to_participantindex, 0x9EC6603812C24710, i32, value: i32);
	native!(get_time_since_player_hit_vehicle, 0x5D35ECF3A81A0EE0, i32, player: Player);
	native!(get_time_since_player_hit_ped, 0xE36A25322DC35F42, i32, player: Player);
	native!(get_time_since_player_drove_on_pavement, 0xD559D2BE9E37853B, i32, player: Player);
	native!(get_time_since_player_drove_against_traffic, 0xDB89591E290D9182, i32, player: Player);
	native!(is_player_free_for_ambient_task, 0xDCCFD3F106C36AB4, bool, player: Player);
	native!(player_id, 0x4F8644AF03D0E0D6, Player);
	native!(player_ped_id, 0xD80958FC74E988A6, Ped);
	native!(network_player_id_to_int, 0xEE68096F9F37341E, i32);
	native!(has_force_cleanup_occurred, 0xC968670BFACE42D9, bool, cleanup_flags: i32);
	native!(force_cleanup, 0xBC8983F38F78ED51, (), cleanup_flags: i32);
	native!(force_cleanup_for_all_threads_with_this_name, 0x4C68DDDDF0097317, (), name: *const c_char, cleanup_flags: i32);
	native!(force_cleanup_for_thread_with_this_id, 0xF745B37630DF176B, (), id: i32, cleanup_flags: i32);
	native!(get_cause_of_most_recent_force_cleanup, 0x9A41CF4674A12272, i32);
	native!(set_player_may_only_enter_this_vehicle, 0x8026FF78F208978A, (), player: Player, vehicle: Vehicle);
	native!(set_player_may_not_enter_any_vehicle, 0x1DE37BBF9E9CC14A, (), player: Player);
	native!(give_achievement_to_player, 0xBEC7076D64130195, bool, achievement: i32);
	native!(_set_achievement_progress, 0xC2AFFFDABBDC2C5C, bool, achievement: i32, progress: i32);
	native!(_get_achievement_progress, 0x1C186837D0619335, i32, achievement: i32);
	native!(has_achievement_been_passed, 0x867365E111A3B6EB, bool, achievement: i32);
	native!(is_player_online, 0xF25D331DC2627BBC, bool);
	native!(is_player_logging_in_np, 0x74556E1420867ECA, bool);
	native!(display_system_signin_ui, 0x94DD7888C10A979E, (), unk: bool);
	native!(is_system_ui_being_displayed, 0x5D511E3867C87139, bool);
	native!(set_player_invincible, 0x239528EACDC3E7DE, (), player: Player, toggle: bool);
	native!(get_player_invincible, 0xB721981B2B939E07, bool, player: Player);
	native!(_set_player_invincible_keep_ragdoll_enabled, 0x6BC97F4F4BB3C04B, (), player: Player, toggle: bool);
	native!(_0xcac57395b151135f, 0xCAC57395B151135F, (), player: Player, p1: bool);
	native!(remove_player_helmet, 0xF3AC26D3CC576528, (), player: Player, p2: bool);
	native!(give_player_ragdoll_control, 0x3C49C870E66F0A28, (), player: Player, toggle: bool);
	native!(set_player_lockon, 0x5C8B2F450EE4328E, (), player: Player, toggle: bool);
	native!(set_player_targeting_mode, 0xB1906895227793F3, (), target_mode: i32);
	native!(set_player_target_level, 0x5702B917B99DB1CD, (), target_level: i32);
	native!(_0xb9cf1f793a9f1bf1, 0xB9CF1F793A9F1BF1, bool);
	native!(_0xcb645e85e97ea48b, 0xCB645E85E97EA48B, bool);
	native!(clear_player_has_damaged_at_least_one_ped, 0xF0B67A4DE6AB5F98, (), player: Player);
	native!(has_player_damaged_at_least_one_ped, 0x20CE80B0C2BF4ACC, bool, player: Player);
	native!(clear_player_has_damaged_at_least_one_non_animal_ped, 0x4AACB96203D11A31, (), player: Player);
	native!(has_player_damaged_at_least_one_non_animal_ped, 0xE4B90F367BD81752, bool, player: Player);
	native!(set_air_drag_multiplier_for_players_vehicle, 0xCA7DC8329F0A1E9E, (), player: Player, multiplier: f32);
	native!(set_swim_multiplier_for_player, 0xA91C6F0FF7D16A13, (), player: Player, multiplier: f32);
	native!(set_run_sprint_multiplier_for_player, 0x6DB47AA77FD94E09, (), player: Player, multiplier: f32);
	native!(get_time_since_last_arrest, 0x5063F92F07C2A316, i32);
	native!(get_time_since_last_death, 0xC7034807558DDFCA, i32);
	native!(assisted_movement_close_route, 0xAEBF081FFC0A0E5E, ());
	native!(assisted_movement_flush_route, 0x8621390F0CDCFE1F, ());
	native!(set_player_forced_aim, 0x0FEE4F80AC44A726, (), player: Player, toggle: bool);
	native!(set_player_forced_zoom, 0x75E7D505F2B15902, (), player: Player, toggle: bool);
	native!(set_player_force_skip_aim_intro, 0x7651BC64AE59E128, (), player: Player, toggle: bool);
	native!(disable_player_firing, 0x5E6CC07646BBEAB8, (), player: Player, toggle: bool);
	native!(_0xb885852c39cc265d, 0xB885852C39CC265D, ());
	native!(set_disable_ambient_melee_move, 0x2E8AABFA40A84F8C, (), player: Player, toggle: bool);
	native!(set_player_max_armour, 0x77DFCCF5948B8C71, (), player: Player, value: i32);
	native!(_special_ability_activate, 0x821FDC827D6F4090, (), p0: i32);
	native!(_set_special_ability, 0xB214D570EAD7F81A, (), player: Player, p1: i32);
	native!(_special_ability_deplete, 0x17F7471EACA78290, (), p0: i32);
	native!(special_ability_deactivate, 0xD6A953C6D1492057, (), player: Player);
	native!(special_ability_deactivate_fast, 0x9CB5CE07A3968D5A, (), player: Player);
	native!(special_ability_reset, 0x375F0E738F861A94, (), player: Player);
	native!(special_ability_charge_on_mission_failed, 0xC9A763D8FE87436A, (), player: Player);
	native!(special_ability_charge_small, 0x2E7B9B683481687D, (), player: Player, p1: bool, p2: bool);
	native!(special_ability_charge_medium, 0xF113E3AA9BC54613, (), player: Player, p1: bool, p2: bool);
	native!(special_ability_charge_large, 0xF733F45FA4497D93, (), player: Player, p1: bool, p2: bool);
	native!(special_ability_charge_continuous, 0xED481732DFF7E997, (), player: Player, p2: Ped);
	native!(special_ability_charge_absolute, 0xB7B0870EB531D08D, (), player: Player, p1: i32, p2: bool);
	native!(special_ability_charge_normalized, 0xA0696A65F009EE18, (), player: Player, normalized_value: f32, p2: bool);
	native!(special_ability_fill_meter, 0x3DACA8DDC6FD4980, (), player: Player, p1: bool);
	native!(special_ability_deplete_meter, 0x1D506DBBBC51E64B, (), player: Player, p1: bool);
	native!(special_ability_lock, 0x6A09D0D590A47D13, (), player_model: Hash);
	native!(special_ability_unlock, 0xF145F3BE2EFA9A3B, (), player_model: Hash);
	native!(is_special_ability_unlocked, 0xC6017F6A6CDFA694, bool, player_model: Hash);
	native!(is_special_ability_active, 0x3E5F7FC85D854E15, bool, player: Player);
	native!(is_special_ability_meter_full, 0x05A1FE504B7F2587, bool, player: Player);
	native!(enable_special_ability, 0x181EC197DAEFE121, (), player: Player, toggle: bool);
	native!(is_special_ability_enabled, 0xB1D200FE26AEF3CB, bool, player: Player);
	native!(set_special_ability_multiplier, 0xA49C426ED0CA4AB7, (), multiplier: f32);
	native!(_0xffee8fa29ab9a18e, 0xFFEE8FA29AB9A18E, (), player: Player);
	native!(_0x5fc472c501ccadb3, 0x5FC472C501CCADB3, bool, player: Player);
	native!(_0xf10b44fd479d69f3, 0xF10B44FD479D69F3, bool, player: Player, p1: i32);
	native!(_0xdd2620b7b9d16ff1, 0xDD2620B7B9D16FF1, bool, player: Player, p1: f32);
	native!(start_player_teleport, 0xAD15F075A4DA0FDE, (), player: Player, x: f32, y: f32, z: f32, heading: f32, p5: bool, p6: bool, p7: bool);
	native!(_has_player_teleport_finished, 0xE23D5873C2394C61, bool, player: Player);
	native!(stop_player_teleport, 0xC449EDED9D73009C, ());
	native!(is_player_teleport_active, 0x02B15662D7F8886F, bool);
	native!(get_player_current_stealth_noise, 0x2F395D61F3A1F877, f32, player: Player);
	native!(set_player_health_recharge_multiplier, 0x5DB660B38DD98A31, (), player: Player, regen_rate: f32);
	native!(_get_player_health_recharge_limit, 0x8BC515BAE4AAF8FF, f32, player: Player);
	native!(_set_player_health_recharge_limit, 0xC388A0F065F5BC34, (), player: Player, limit: f32);
	native!(_set_player_fall_distance, 0xEFD79FA81DFBA9CB, (), p0: i32, p1: i32);
	native!(set_player_weapon_damage_modifier, 0xCE07B9F7817AADA3, (), player: Player, modifier: f32);
	native!(set_player_weapon_defense_modifier, 0x2D83BC011CA14A3C, (), player: Player, modifier: f32);
	native!(_set_player_weapon_defense_modifier_2, 0xBCFDE9EDE4CF27DC, (), player: Player, modifier: f32);
	native!(set_player_melee_weapon_damage_modifier, 0x4A3DC7ECCC321032, (), player: Player, modifier: f32, p2: bool);
	native!(set_player_melee_weapon_defense_modifier, 0xAE540335B4ABC4E2, (), player: Player, modifier: f32);
	native!(set_player_vehicle_damage_modifier, 0xA50E117CDDF82F0C, (), player: Player, modifier: f32);
	native!(set_player_vehicle_defense_modifier, 0x4C60E6EFDAFF2462, (), player: Player, modifier: f32);
	native!(_0x8d768602adef2245, 0x8D768602ADEF2245, (), player: Player, p1: f32);
	native!(_0xd821056b9acf8052, 0xD821056B9ACF8052, (), p0: i32, p1: i32);
	native!(_0x31e90b8873a4cd3b, 0x31E90B8873A4CD3B, (), p0: i32, p1: i32);
	native!(set_player_parachute_tint_index, 0xA3D0E54541D9A5E5, (), player: Player, tint_index: i32);
	native!(get_player_parachute_tint_index, 0x75D3F7A1B0D9B145, (), player: Player, tint_index: &mut i32);
	native!(set_player_reserve_parachute_tint_index, 0xAF04C87F5DC1DF38, (), player: Player, index: i32);
	native!(get_player_reserve_parachute_tint_index, 0xD5A016BC3C09CF40, (), player: Player, index: &mut i32);
	native!(set_player_parachute_pack_tint_index, 0x93B0FB27C9A04060, (), player: Player, tint_index: i32);
	native!(get_player_parachute_pack_tint_index, 0x6E9C742F340CE5A2, (), player: Player, tint_index: &mut i32);
	native!(set_player_has_reserve_parachute, 0x7DDAB28D31FAC363, (), player: Player);
	native!(get_player_has_reserve_parachute, 0x5DDFE2FF727F3CA3, bool, player: Player);
	native!(set_player_can_leave_parachute_smoke_trail, 0xF401B182DBA8AF53, (), player: Player, enabled: bool);
	native!(set_player_parachute_smoke_trail_color, 0x8217FD371A4625CF, (), player: Player, r: i32, g: i32, b: i32);
	native!(get_player_parachute_smoke_trail_color, 0xEF56DBABD3CD4887, (), player: Player, r: &mut i32, g: &mut i32, b: &mut i32);
	native!(set_player_reset_flag_prefer_rear_seats, 0x11D5F725F0E780E0, (), player: Player, flags: i32);
	native!(set_player_noise_multiplier, 0xDB89EF50FF25FCE9, (), player: Player, multiplier: f32);
	native!(set_player_sneaking_noise_multiplier, 0xB2C1A29588A9F47C, (), player: Player, multiplier: f32);
	native!(can_ped_hear_player, 0xF297383AA91DCA29, bool, player: Player, ped: Ped);
	native!(simulate_player_input_gait, 0x477D5D63E63ECA5D, (), player: Player, amount: f32, gait_type: i32, speed: f32, p4: bool, p5: bool);
	native!(reset_player_input_gait, 0x19531C47A2ABD691, (), player: Player);
	native!(set_auto_give_parachute_when_enter_plane, 0x9F343285A00B4BB6, (), player: Player, toggle: bool);
	native!(set_auto_give_scuba_gear_when_exit_vehicle, 0xD2B315B6689D537D, (), player: Player, toggle: bool);
	native!(set_player_stealth_perception_modifier, 0x4E9021C1FCDD507A, (), player: Player, value: f32);
	native!(_0x690a61a6d13583f6, 0x690A61A6D13583F6, bool, player: Player);
	native!(_0x9edd76e87d5d51ba, 0x9EDD76E87D5D51BA, (), player: Player);
	native!(set_player_simulate_aiming, 0xC54C95DA968EC5B5, (), player: Player, toggle: bool);
	native!(set_player_cloth_pin_frames, 0x749FADDF97DFE930, (), player: Player, toggle: bool);
	native!(set_player_cloth_package_index, 0x9F7BBA2EA6372500, (), index: i32);
	native!(set_player_cloth_lock_counter, 0x14D913B777DFF5DA, (), value: i32);
	native!(player_attach_virtual_bound, 0xED51733DC73AED51, (), p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32);
	native!(player_detach_virtual_bound, 0x1DD5897E2FA6E7C9, ());
	native!(has_player_been_spotted_in_stolen_vehicle, 0xD705740BB0A1CF4C, bool, player: Player);
	native!(is_player_battle_aware, 0x38D28DA81E4E9BF9, bool, player: Player);
	native!(_0xbc0753c9ca14b506, 0xBC0753C9CA14B506, bool, player: Player, p1: i32, p2: bool);
	native!(extend_world_boundary_for_player, 0x5006D96C995A5827, (), x: f32, y: f32, z: f32);
	native!(reset_world_boundary_for_player, 0xDA1DF03D5A315F4E, ());
	native!(is_player_riding_train, 0x4EC12697209F2196, bool, player: Player);
	native!(has_player_left_the_world, 0xD55DDFB47991A294, bool, player: Player);
	native!(set_player_leave_ped_behind, 0xFF300C7649724A0B, (), player: Player, toggle: bool);
	native!(set_player_parachute_variation_override, 0xD9284A8C0D48352C, (), player: Player, p1: i32, p2: i32, p3: i32, p4: bool);
	native!(clear_player_parachute_variation_override, 0x0F4CC924CF8C7B21, (), player: Player);
	native!(set_player_parachute_model_override, 0x977DB4641F6FC3DB, (), player: Player, model: Hash);
	native!(clear_player_parachute_model_override, 0x8753997EB5F6EE3F, (), player: Player);
	native!(set_player_parachute_pack_model_override, 0xDC80A4C2F18A2B64, (), player: Player, model: Hash);
	native!(clear_player_parachute_pack_model_override, 0x10C54E4389C12B42, (), player: Player);
	native!(disable_player_vehicle_rewards, 0xC142BE3BB9CE125F, (), player: Player);
	native!(_0x2f7ceb6520288061, 0x2F7CEB6520288061, (), p0: bool);
	native!(set_player_bluetooth_state, 0x5DC40A8869C22141, (), player: Player, state: bool);
	native!(is_player_bluetooth_enable, 0x65FAEE425DE637B0, bool, player: Player);
	native!(_0x5501b7a5cdb79d37, 0x5501B7A5CDB79D37, (), player: Player);
	native!(get_player_fake_wanted_level, 0x56105E599CAB0EFA, i32, player: Player);
	native!(_0x55fcc0c390620314, 0x55FCC0C390620314, (), p0: i32, p1: i32, p2: i32);
	native!(_0x2382ab11450ae7ba, 0x2382AB11450AE7BA, (), p0: i32, p1: i32);
	native!(_0x6e4361ff3e8cd7ca, 0x6E4361FF3E8CD7CA, i32, p0: i32);
	native!(_0x237440e46d918649, 0x237440E46D918649, (), p0: i32);
	native!(_set_player_homing_rocket_disabled, 0xEE4EBDD2593BA844, (), p0: i32, p1: i32);
	native!(_0x7bae68775557ae0b, 0x7BAE68775557AE0B, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(_0x7148e0f43d11f0d9, 0x7148E0F43D11F0D9, ());
	native!(_0x70a382adec069dd3, 0x70A382ADEC069DD3, (), p0: i32, p1: i32, p2: i32);
}

pub mod recording {
	use super::*;

	native!(_0x48621c9fca3ebd28, 0x48621C9FCA3EBD28, (), p0: i32);
	native!(_0x81cbae94390f9f89, 0x81CBAE94390F9F89, ());
	native!(_0x13b350b8ad0eee10, 0x13B350B8AD0EEE10, ());
	native!(_0x293220da1b46cebc, 0x293220DA1B46CEBC, (), p0: f32, p1: f32, p2: i32);
	native!(_0x208784099002bc30, 0x208784099002BC30, (), mission_name_label: *const c_char, p1: i32);
	native!(_stop_recording_this_frame, 0xEB2D525B57F42B40, ());
	native!(_0xf854439efbb3b583, 0xF854439EFBB3B583, ());
	native!(_disable_rockstar_editor_camera_changes, 0xAF66DCEE6609B148, ());
	native!(_0x66972397e0757e7a, 0x66972397E0757E7A, (), p0: i32, p1: i32, p2: i32);
	native!(_start_recording, 0xC3AC2FFF9612AC81, (), mode: i32);
	native!(_stop_recording_and_save_clip, 0x071A5197D6AFC8B3, ());
	native!(_stop_recording_and_discard_clip, 0x88BB3507ED41A240, ());
	native!(_save_recording_clip, 0x644546EC5287471B, bool);
	native!(_is_recording, 0x1897CA71995A90B4, bool);
	native!(_0xdf4b952f7d381b95, 0xDF4B952F7D381B95, i32);
	native!(_0x4282e08174868be3, 0x4282E08174868BE3, i32);
	native!(_0x33d47e85b476abcd, 0x33D47E85B476ABCD, bool, p0: bool);
}

pub mod replay {
	use super::*;

	native!(_0x7e2bd3ef6c205f09, 0x7E2BD3EF6C205F09, (), p0: *const c_char, p1: bool);
	native!(_is_interior_rendering_disabled, 0x95AB8B5C992C7B58, bool);
	native!(_0x5ad3932daeb1e5d3, 0x5AD3932DAEB1E5D3, ());
	native!(_0xe058175f8eafe79a, 0xE058175F8EAFE79A, (), p0: bool);
	native!(_reset_editor_values, 0x3353D13F09307691, ());
	native!(_activate_rockstar_editor, 0x49DA8145672B2725, ());
}

pub mod script {
	use super::*;

	native!(request_script, 0x6EB5F71AA68F2E8E, (), script_name: *const c_char);
	native!(set_script_as_no_longer_needed, 0xC90D2DCACD56184C, (), script_name: *const c_char);
	native!(has_script_loaded, 0xE6CC9F3BA0FB9EF1, bool, script_name: *const c_char);
	native!(does_script_exist, 0xFC04745FBE67C19A, bool, script_name: *const c_char);
	native!(request_script_with_name_hash, 0xD62A67D26D9653E6, (), script_hash: Hash);
	native!(set_script_with_name_hash_as_no_longer_needed, 0xC5BC038960E9DB27, (), script_hash: Hash);
	native!(has_script_with_name_hash_loaded, 0x5F0F0C783EB16C04, bool, script_hash: Hash);
	native!(does_script_with_name_hash_exist, 0xF86AA3C56BA31381, bool, script_hash: Hash);
	native!(terminate_thread, 0xC8B189ED9138BCD4, (), thread_id: i32);
	native!(is_thread_active, 0x46E9AE36D8FA6417, bool, thread_id: i32);
	native!(_get_name_of_thread, 0x05A42BA9FC8DA96B, *const c_char, thread_id: i32);
	native!(script_thread_iterator_reset, 0xDADFADA5A20143A8, ());
	native!(script_thread_iterator_get_next_thread_id, 0x30B4FA1C82DD4B9F, i32);
	native!(get_id_of_this_thread, 0xC30338E8088E2E21, i32);
	native!(terminate_this_thread, 0x1090044AD1DA76FA, ());
	native!(_get_number_of_references_of_script_with_name_hash, 0x2C83A9DA6BFFC4F9, i32, script_hash: Hash);
	native!(get_this_script_name, 0x442E0A7EDE4A738A, *const c_char);
	native!(get_hash_of_this_script_name, 0x8A1C8B1738FFE87E, Hash);
	native!(get_number_of_events, 0x5F92A689A06620AA, i32, event_group: i32);
	native!(get_event_exists, 0x936E6168A9BCEDB5, bool, event_group: i32, event_index: i32);
	native!(get_event_at_index, 0xD8F66A3A60C62153, i32, event_group: i32, event_index: i32);
	native!(get_event_data, 0x2902843FCD2B2D79, bool, event_group: i32, event_index: i32, arg_struct: &mut i32, arg_struct_size: i32);
	native!(trigger_script_event, 0x5AE99C571D5BBE5D, (), event_group: i32, args: &mut i32, arg_count: i32, bit: i32);
	native!(shutdown_loading_screen, 0x078EBE9809CCD637, ());
	native!(set_no_loading_screen, 0x5262CC1995D07E09, (), toggle: bool);
	native!(get_no_loading_screen, 0x18C1270EA7F199BC, bool);
	native!(_0xb1577667c3708f9b, 0xB1577667C3708F9B, ());
	native!(_0x836b62713e0534ca, 0x836B62713E0534CA, bool);
	native!(_0x760910b49d2b98ea, 0x760910B49D2B98EA, ());
	native!(bg_start_context_hash, 0x75B18E49607874C7, (), context_hash: Hash);
	native!(bg_end_context_hash, 0x107E5CC7CA942BC1, (), context_hash: Hash);
	native!(bg_start_context, 0x9D5A25BADB742ACD, (), context_name: *const c_char);
	native!(bg_end_context, 0xDC2BACD920D0A0DD, (), context_name: *const c_char);
	native!(_0x0f6f1ebbc4e1d5e6, 0x0F6F1EBBC4E1D5E6, bool, script_index: i32, p1: *const c_char);
	native!(_0x22e21fbcfc88c149, 0x22E21FBCFC88C149, i32, script_index: i32, p1: *const c_char);
	native!(_0x829cd22e043a2577, 0x829CD22E043A2577, i32, p0: Hash);
	native!(_trigger_script_event_2, 0xA40CC53DF8E50837, (), event_group: i32, args: &mut i32, arg_count: i32, bit: i32);
}

pub mod shapetest {
	use super::*;

	native!(start_shape_test_los_probe, 0x7EE9F5D83DD4F90E, i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, flags: i32, entity: Entity, p8: i32);
	native!(_start_shape_test_ray, 0x377906D8A31E5586, i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, flags: i32, entity: Entity, p8: i32);
	native!(start_shape_test_bounding_box, 0x052837721A854EC7, i32, entity: Entity, flags1: i32, flags2: i32);
	native!(start_shape_test_box, 0xFE466162C4401D18, i32, x: f32, y: f32, z: f32, x1: f32, y2: f32, z2: f32, rot_x: f32, rot_y: f32, rot_z: f32, p9: i32, p10: i32, entity: i32, p12: i32);
	native!(start_shape_test_bound, 0x37181417CE7C8900, i32, entity: Entity, flags1: i32, flags2: i32);
	native!(start_shape_test_capsule, 0x28579D1B8F8AAC80, i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, radius: f32, flags: i32, entity: Entity, p9: i32);
	native!(start_shape_test_swept_sphere, 0xE6AC6C45FBE83004, i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, radius: f32, flags: i32, entity: Entity, p9: i32);
	native!(_start_shape_test_surrounding_coords, 0xFF6BE494C7987F34, i32, p_vec1: &mut Vec3, p_vec2: &mut Vec3, flag: i32, entity: Entity, flag2: i32);
	native!(get_shape_test_result, 0x3D87450E15D98694, i32, ray_handle: i32, hit: &mut bool, end_coords: &mut Vec3, surface_normal: &mut Vec3, entity_hit: &mut Entity);
	native!(get_shape_test_result_including_material, 0x65287525D951F6BE, i32, ray_handle: i32, hit: &mut bool, end_coords: &mut Vec3, surface_normal: &mut Vec3, material_hash: &mut Hash, entity_hit: &mut Entity);
	native!(_shape_test_result_entity, 0x2B3334BCA57CD799, (), entity_hit: Entity);
}

pub mod socialclub {
	use super::*;

	native!(_get_total_sc_inbox_ids, 0x03A93FF1A2CA0864, i32);
	native!(_sc_inbox_message_init, 0xBB8EA16ECBC976C4, Hash, p0: i32);
	native!(_is_sc_inbox_valid, 0x93028F1DB42BFD08, bool, p0: i32);
	native!(_sc_inbox_message_pop, 0x2C015348CF19CA1D, bool, p0: i32);
	native!(sc_inbox_message_get_data_int, 0xA00EFE4082C4056E, bool, p0: i32, context: *const c_char, out: &mut i32);
	native!(_sc_inbox_message_get_data_bool, 0xFFE5C16F402D851D, bool, p0: i32, p1: *const c_char);
	native!(sc_inbox_message_get_data_string, 0x7572EF42FC6A9B6D, bool, p0: i32, context: *const c_char, out: &mut char);
	native!(sc_inbox_message_do_apply, 0x9A2C8064B6C1E41A, bool, p0: i32);
	native!(_sc_inbox_message_get_string, 0xF3E31D16CBDCB304, *const c_char, p0: i32);
	native!(_sc_inbox_message_push_gamer_to_event_recip_list, 0xDA024BDBD600F44A, (), network_handle: &mut i32);
	native!(_sc_inbox_message_send_ugc_stat_update_event, 0xA68D3D229F4F3B06, (), data: &mut i32);
	native!(sc_inbox_message_get_ugcdata, 0x69D82604A1A5A254, bool, p0: i32, p1: &mut i32);
	native!(_sc_inbox_message_send_bounty_presence_event, 0x6AFD2CD753FEEF83, bool, data: &mut i32);
	native!(_sc_inbox_message_get_bounty_data, 0x87E0052F08BD64E6, bool, index: i32, out_data: &mut i32);
	native!(_sc_inbox_get_emails, 0x040ADDCBAFA1018A, (), offset: i32, limit: i32);
	native!(_0x16da8172459434aa, 0x16DA8172459434AA, i32);
	native!(_0x7db18ca8cad5b098, 0x7DB18CA8CAD5B098, i32);
	native!(_0x4737980e8a283806, 0x4737980E8A283806, bool, p0: i32, p1: &mut i32);
	native!(_0x44aca259d67651db, 0x44ACA259D67651DB, (), p0: &mut i32, p1: i32);
	native!(sc_email_message_push_gamer_to_recip_list, 0x2330C12A7A605D16, (), network_handle: &mut i32);
	native!(sc_email_message_clear_recip_list, 0x55DF6DB45179236E, ());
	native!(_0x116fb94dc4b79f17, 0x116FB94DC4B79F17, (), p0: *const c_char);
	native!(_0x07dbd622d9533857, 0x07DBD622D9533857, i32, p0: i32);
	native!(_set_handle_rockstar_message_via_script, 0xBFA0A56A817C6C7D, (), toggle: bool);
	native!(_is_rockstar_message_ready_for_script, 0xBC1CC91205EC8D6E, bool);
	native!(_rockstar_message_get_string, 0xDF649C4E9AFDD788, *const c_char);
	native!(_0x1f1e9682483697c7, 0x1F1E9682483697C7, bool, p0: i32, p1: i32);
	native!(_0xc4c4575f62534a24, 0xC4C4575F62534A24, i32);
	native!(_0x287f1f75d2803595, 0x287F1F75D2803595, bool, p0: i32, p1: &mut i32);
	native!(_0x487912fd248efddf, 0x487912FD248EFDDF, bool, p0: i32, p1: f32);
	native!(_0xc85a7127e7ad02aa, 0xC85A7127E7AD02AA, i32);
	native!(_0xa770c8eec6fb2ac5, 0xA770C8EEC6FB2AC5, i32);
	native!(_sc_get_is_profile_attribute_set, 0x8416FE4E4629D7D7, bool, name: *const c_char);
	native!(_0x7ffcbfee44ecfabf, 0x7FFCBFEE44ECFABF, i32);
	native!(_0x2d874d4ae612a65f, 0x2D874D4AE612A65F, i32);
	native!(sc_profanity_check_string, 0x75632C5ECD7ED843, bool, string: *const c_char, token: &mut i32);
	native!(_sc_profanity_check_ugc_string, 0xEB2BF817463DFA28, bool, string: *const c_char, token: &mut i32);
	native!(sc_profanity_get_check_is_valid, 0x1753344C770358AE, bool, token: i32);
	native!(sc_profanity_get_check_is_pending, 0x82E4A58BABC15AE7, bool, token: i32);
	native!(sc_profanity_get_string_passed, 0x85535ACF97FC0969, bool, token: i32);
	native!(sc_profanity_get_string_status, 0x930DE22F07B1CCE3, i32, token: i32);
	native!(_0xf6baaaf762e1bf40, 0xF6BAAAF762E1BF40, bool, p0: *const c_char, p1: &mut i32);
	native!(_0xf22ca0fd74b80e7a, 0xF22CA0FD74B80E7A, bool, p0: i32);
	native!(_0x9237e334f6e43156, 0x9237E334F6E43156, i32, p0: i32);
	native!(_0x700569dba175a77c, 0x700569DBA175A77C, i32, p0: i32);
	native!(_0x1d4446a62d35b0d0, 0x1D4446A62D35B0D0, i32, p0: i32, p1: i32);
	native!(_0x2e89990ddff670c3, 0x2E89990DDFF670C3, i32, p0: i32, p1: i32);
	native!(_0xd0ee05fe193646ea, 0xD0EE05FE193646EA, bool, p0: &mut i32, p1: &mut i32, p2: &mut i32);
	native!(_0x1989c6e6f67e76a8, 0x1989C6E6F67E76A8, bool, p0: &mut i32, p1: &mut i32, p2: &mut i32);
	native!(_0x07c61676e5bb52cd, 0x07C61676E5BB52CD, i32, p0: i32);
	native!(_0x8147fff6a718e1ad, 0x8147FFF6A718E1AD, i32, p0: i32);
	native!(_0x0f73393bac7e6730, 0x0F73393BAC7E6730, bool, p0: &mut i32, p1: &mut i32);
	native!(_0xd302e99edf0449cf, 0xD302E99EDF0449CF, i32, p0: i32);
	native!(_0x5c4ebffa98bdb41c, 0x5C4EBFFA98BDB41C, i32, p0: i32);
	native!(_0xff8f3a92b75ed67a, 0xFF8F3A92B75ED67A, i32);
	native!(_0x4ed9c8d6da297639, 0x4ED9C8D6DA297639, i32);
	native!(_0x710bcda8071eded1, 0x710BCDA8071EDED1, i32);
	native!(_0x50a8a36201dbf83e, 0x50A8A36201DBF83E, i32);
	native!(_0x9de5d2f723575ed0, 0x9DE5D2F723575ED0, i32);
	native!(_0xc2c97ea97711d1ae, 0xC2C97EA97711D1AE, i32);
	native!(_0x450819d8cf90c416, 0x450819D8CF90C416, i32);
	native!(_0x4a7d6e727f941747, 0x4A7D6E727F941747, i32, p0: &mut i32);
	native!(_0xe75a4a2e5e316d86, 0xE75A4A2E5E316D86, i32);
	native!(_0x2570e26be63964e3, 0x2570E26BE63964E3, i32);
	native!(_0x1d12a56fc95be92e, 0x1D12A56FC95BE92E, i32);
	native!(_0x33df47cc0642061b, 0x33DF47CC0642061B, i32);
	native!(_0xa468e0be12b12c70, 0xA468E0BE12B12C70, i32);
	native!(_0x8cc469ab4d349b7c, 0x8CC469AB4D349B7C, bool, p0: i32, p1: *const c_char, p2: &mut i32);
	native!(_0xc5a35c73b68f3c49, 0xC5A35C73B68F3C49, i32);
	native!(_0x699e4a5c8c893a18, 0x699E4A5C8C893A18, bool, p0: i32, p1: *const c_char, p2: &mut i32);
	native!(_0x19853b5b17d77bca, 0x19853B5B17D77BCA, bool, p0: i32, p1: &mut i32);
	native!(_0x6bfb12ce158e3dd4, 0x6BFB12CE158E3DD4, bool, p0: i32);
	native!(_0xfe4c1d0d3b9cc17e, 0xFE4C1D0D3B9CC17E, bool, p0: i32, p1: i32);
	native!(_0xd8122c407663b995, 0xD8122C407663B995, i32);
	native!(_0x3001bef2feca3680, 0x3001BEF2FECA3680, bool);
	native!(_0x92da6e70ef249bd1, 0x92DA6E70EF249BD1, bool, p0: *const c_char, p1: &mut i32);
	native!(_0x675721c9f644d161, 0x675721C9F644D161, ());
	native!(_0xe4f6e8d07a2f0f51, 0xE4F6E8D07A2F0F51, i32, p0: i32);
	native!(_0x8a4416c0db05fa66, 0x8A4416C0DB05FA66, i32, p0: i32);
	native!(_0xea95c0853a27888e, 0xEA95C0853A27888E, ());
	native!(_sc_get_nickname, 0x198D161F458ECC7F, *const c_char);
	native!(_0x225798743970412b, 0x225798743970412B, bool, p0: &mut i32);
	native!(_sc_get_has_achievement_been_passed, 0x418DC16FAE452C1C, bool, achievement: i32);
}

pub mod stats {
	use super::*;

	native!(stat_clear_slot_for_reload, 0xEB0A72181D4AA4AD, i32, stat_slot: i32);
	native!(stat_load, 0xA651443F437B1CE6, bool, p0: i32);
	native!(stat_save, 0xE07BCA305B82D2FD, bool, p0: i32, p1: bool, p2: i32);
	native!(_0x5688585e6d563cd8, 0x5688585E6D563CD8, (), p0: i32);
	native!(stat_load_pending, 0xA1750FFAFA181661, bool, p0: i32);
	native!(stat_save_pending, 0x7D3A583856F2C5AC, bool);
	native!(stat_save_pending_or_requested, 0xBBB6AD006F1BBEA3, bool);
	native!(stat_delete_slot, 0x49A49BED12794D70, i32, p0: i32);
	native!(stat_slot_is_loaded, 0x0D0A9F0E7BD91E3C, bool, p0: i32);
	native!(_0x7f2c4cdf2e82df4c, 0x7F2C4CDF2E82DF4C, bool, p0: i32);
	native!(_0xe496a53ba5f50a56, 0xE496A53BA5F50A56, i32, p0: i32);
	native!(_0xf434a10ba01c37d0, 0xF434A10BA01C37D0, (), toggle: bool);
	native!(_0x7e6946f68a38b74f, 0x7E6946F68A38B74F, bool, p0: i32);
	native!(_0xa8733668d1047b51, 0xA8733668D1047B51, (), p0: i32);
	native!(_0xecb41ac6ab754401, 0xECB41AC6AB754401, bool);
	native!(_0x9b4bd21d69b1e609, 0x9B4BD21D69B1E609, ());
	native!(_0xc0e0d686ddfc6eae, 0xC0E0D686DDFC6EAE, i32);
	native!(stat_set_int, 0xB3271D7AB655B441, bool, stat_name: Hash, value: i32, save: bool);
	native!(stat_set_float, 0x4851997F37FE9B3C, bool, stat_name: Hash, value: f32, save: bool);
	native!(stat_set_bool, 0x4B33C4243DE0C432, bool, stat_name: Hash, value: bool, save: bool);
	native!(stat_set_gxt_label, 0x17695002FD8B2AE0, bool, stat_name: Hash, value: *const c_char, save: bool);
	native!(stat_set_date, 0x2C29BFB64F4FCBE4, bool, stat_name: Hash, value: &mut i32, num_fields: i32, save: bool);
	native!(stat_set_string, 0xA87B2335D12531D7, bool, stat_name: Hash, value: *const c_char, save: bool);
	native!(stat_set_pos, 0xDB283FDE680FE72E, bool, stat_name: Hash, x: f32, y: f32, z: f32, save: bool);
	native!(stat_set_masked_int, 0x7BBB1B54583ED410, bool, stat_name: Hash, p1: i32, p2: i32, p3: i32, save: bool);
	native!(stat_set_user_id, 0x8CDDF1E452BABE11, bool, stat_name: Hash, value: *const c_char, save: bool);
	native!(stat_set_current_posix_time, 0xC2F84B7F9C4D0C61, bool, stat_name: Hash, p1: bool);
	native!(stat_get_int, 0x767FBC2AC802EF3D, bool, stat_hash: Hash, out_value: &mut i32, p2: i32);
	native!(stat_get_float, 0xD7AE6C9C9C6AC54C, bool, stat_hash: Hash, out_value: &mut f32, p2: i32);
	native!(stat_get_bool, 0x11B5E6D2AE73F48E, bool, stat_hash: Hash, out_value: &mut bool, p2: i32);
	native!(stat_get_date, 0x8B0FACEFC36C824B, bool, stat_hash: Hash, p1: &mut i32, p2: i32, p3: i32);
	native!(stat_get_string, 0xE50384ACC2C3DB74, *const c_char, stat_hash: Hash, p1: i32);
	native!(stat_get_pos, 0x350F82CCB186AA1B, bool, p0: i32, p1: &mut i32, p2: &mut i32, p3: &mut i32, p4: i32);
	native!(stat_get_masked_int, 0x655185A06D9EEAAB, bool, p0: i32, p1: &mut i32, p2: i32, p3: i32, p4: i32);
	native!(stat_get_user_id, 0x2365C388E393BBE2, *const c_char, p0: i32);
	native!(stat_get_license_plate, 0x5473D4195058B2E4, *const c_char, stat_name: Hash);
	native!(stat_set_license_plate, 0x69FF13266D7296DA, bool, stat_name: Hash, str: *const c_char);
	native!(stat_increment, 0x9B5A68C6489E9909, (), stat_name: Hash, value: f32);
	native!(_0x5a556b229a169402, 0x5A556B229A169402, bool);
	native!(_0xb1d2bb1e1631f5b1, 0xB1D2BB1E1631F5B1, bool);
	native!(_0xbed9f5693f34ed17, 0xBED9F5693F34ED17, bool, stat_name: Hash, p1: i32, out_value: &mut f32);
	native!(_0x26d7399b9587fe89, 0x26D7399B9587FE89, (), p0: i32);
	native!(_0xa78b8fa58200da56, 0xA78B8FA58200DA56, (), p0: i32);
	native!(stat_get_number_of_days, 0xE0E854F5280FB769, i32, stat_name: Hash);
	native!(stat_get_number_of_hours, 0xF2D4B2FE415AAFC3, i32, stat_name: Hash);
	native!(stat_get_number_of_minutes, 0x7583B4BE4C5A41B5, i32, stat_name: Hash);
	native!(stat_get_number_of_seconds, 0x2CE056FF3723F00B, i32, stat_name: Hash);
	native!(stat_set_profile_setting_value, 0x68F01422BE1D838F, (), profile_setting: i32, value: i32);
	native!(_0xf4d8e7ac2a27758c, 0xF4D8E7AC2A27758C, i32, p0: i32);
	native!(_0x94f12abf9c79e339, 0x94F12ABF9C79E339, i32, p0: i32);
	native!(get_packed_bool_stat_key, 0x80C75307B1C42837, Hash, index: i32, sp_stat: bool, char_stat: bool, character: i32);
	native!(get_packed_int_stat_key, 0x61E111E323419E07, Hash, index: i32, sp_stat: bool, char_stat: bool, character: i32);
	native!(_get_packed_title_update_bool_stat_key, 0xC4BB08EE7907471E, Hash, index: i32, sp_stat: bool, char_stat: bool, character: i32);
	native!(_get_packed_title_update_int_stat_key, 0xD16C2AD6B8E32854, Hash, index: i32, sp_stat: bool, char_stat: bool, character: i32);
	native!(_get_ngstat_bool_hash, 0xBA52FF538ED2BC71, Hash, index: i32, sp_stat: bool, char_stat: bool, character: i32, section: *const c_char);
	native!(_get_ngstat_int_hash, 0x2B4CDCA6F07FF3DA, Hash, index: i32, sp_stat: bool, char_stat: bool, character: i32, section: *const c_char);
	native!(stat_get_bool_masked, 0x10FE3F1B79F9B071, bool, stat_name: Hash, mask: i32, p2: i32);
	native!(stat_set_bool_masked, 0x5BC62EC1937B9E5B, bool, stat_name: Hash, value: bool, mask: i32, save: bool);
	native!(playstats_background_script_action, 0x5009DFD741329729, (), action: *const c_char, value: i32);
	native!(playstats_npc_invite, 0x93054C88E6AA7C44, (), p0: &mut i32);
	native!(playstats_award_xp, 0x46F917F6B4128FE4, (), amount: i32, r#type: Hash, category: Hash);
	native!(playstats_rank_up, 0xC7F2DE41D102BFB4, (), rank: i32);
	native!(_playstats_start_offline_mode, 0x098760C7461724CD, ());
	native!(_0xa071e0ed98f91286, 0xA071E0ED98F91286, (), p0: i32, p1: i32);
	native!(_0xc5be134ec7ba96a0, 0xC5BE134EC7BA96A0, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(playstats_mission_started, 0xC19A2925C34D2231, (), p0: &mut i32, p1: i32, p2: i32, p3: bool);
	native!(playstats_mission_over, 0x7C4BB33A8CED7324, (), p0: &mut i32, p1: i32, p2: i32, p3: bool, p4: bool, p5: bool);
	native!(playstats_mission_checkpoint, 0xC900596A63978C1D, (), p0: &mut i32, p1: i32, p2: i32, p3: i32);
	native!(playstats_random_mission_done, 0x71862B1D855F32E1, (), name: *const c_char, p1: i32, p2: i32, p3: i32);
	native!(playstats_ros_bet, 0x121FB4DDDC2D5291, (), amount: i32, act: i32, player: Player, cm: f32);
	native!(playstats_race_checkpoint, 0x9C375C315099DDE4, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_0x6dee77aff8c21bd1, 0x6DEE77AFF8C21BD1, bool, player_account_id: &mut i32, posix_time: &mut i32);
	native!(playstats_match_started, 0xBC80E22DED931E3D, (), p0: i32, p1: i32, p2: i32);
	native!(playstats_shop_item, 0x176852ACAAC173D1, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_playstats_crate_drop, 0x1CAE5D2E3F9A07F0, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32);
	native!(_playstats_crate_created, 0xAFC7E5E075A96F46, (), p0: f32, p1: f32, p2: f32);
	native!(_playstats_hold_up, 0xCB00196B31C39EB1, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_playstats_imp_exp, 0x2B69F5074C894811, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_playstats_race_to_point, 0xADDD1C754E2E2914, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32);
	native!(playstats_acquired_hidden_package, 0x79AB33F0FBFAC40C, (), p0: i32);
	native!(playstats_website_visited, 0xDDF24D535060F811, (), scaleform_hash: Hash, p1: i32);
	native!(playstats_friend_activity, 0x0F71DE29AB2258F1, (), p0: i32, p1: i32);
	native!(playstats_oddjob_done, 0x69DEA3E9DB727B4C, (), p0: i32, p1: i32, p2: i32);
	native!(playstats_prop_change, 0xBA739D6D5A05D6E7, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(playstats_cloth_change, 0x34B973047A2268B9, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(playstats_weapon_mode_change, 0xE95C8A1875A02CA4, (), weapon_hash: Hash, component_hash_to: Hash, component_hash_from: Hash);
	native!(playstats_cheat_applied, 0x6058665D72302D3F, (), cheat: *const c_char);
	native!(_0xf8c54a461c3e11dc, 0xF8C54A461C3E11DC, (), p0: &mut i32, p1: &mut i32, p2: &mut i32, p3: &mut i32);
	native!(_0xf5bb8dac426a52c0, 0xF5BB8DAC426A52C0, (), p0: &mut i32, p1: &mut i32, p2: &mut i32, p3: &mut i32);
	native!(_0xa736cf7fb7c5bff4, 0xA736CF7FB7C5BFF4, (), p0: &mut i32, p1: &mut i32, p2: &mut i32, p3: &mut i32);
	native!(_0x14e0b2d1ad1044e0, 0x14E0B2D1AD1044E0, (), p0: &mut i32, p1: &mut i32, p2: &mut i32, p3: &mut i32);
	native!(playstats_quickfix_tool, 0x90D0622866E80445, (), element: i32, item: *const c_char);
	native!(playstats_idle_kick, 0x5DA3A8DE8CB6226F, (), time: i32);
	native!(_0xd1032e482629049e, 0xD1032E482629049E, (), p0: i32);
	native!(_playstats_heist_save_cheat, 0xF4FF020A08BC8863, (), hash: Hash, p1: i32);
	native!(_playstats_director_mode, 0x46326E13DA4E0546, (), p0: &mut i32);
	native!(_playstats_award_badsport, 0x47B32F5611E6E483, (), id: i32);
	native!(_playstats_pegasaircraft, 0x9572BD4DD6B72122, (), model_hash: Hash);
	native!(_0x6a60e43998228229, 0x6A60E43998228229, (), p0: i32);
	native!(_0xbfafdb5faaa5c5ab, 0xBFAFDB5FAAA5C5AB, (), p0: i32);
	native!(_0x8c9d11605e59d955, 0x8C9D11605E59D955, (), p0: i32);
	native!(_0x3de3aa516fb126a4, 0x3DE3AA516FB126A4, (), p0: i32);
	native!(_0xbaa2f0490e146be8, 0xBAA2F0490E146BE8, (), p0: i32);
	native!(_0x1a7ce7cd3e653485, 0x1A7CE7CD3E653485, (), p0: i32);
	native!(_0x419615486bbf1956, 0x419615486BBF1956, (), p0: i32);
	native!(_0x84dfc579c2fc214c, 0x84DFC579C2FC214C, (), p0: i32);
	native!(_0x0a9c7f36e5d7b683, 0x0A9C7F36E5D7B683, (), p0: i32);
	native!(_0x164c5ff663790845, 0x164C5FF663790845, (), p0: i32);
	native!(_0xedbf6c9b0d2c65c8, 0xEDBF6C9B0D2C65C8, (), p0: i32);
	native!(_0x6551b1f7f6cd46ea, 0x6551B1F7F6CD46EA, (), p0: i32);
	native!(_0x2cd90358f67d0aa8, 0x2CD90358F67D0AA8, (), p0: i32);
	native!(_playstats_pi_menu_hide_settings, 0x203B381133817079, (), data: &mut i32);
	native!(leaderboards_get_number_of_columns, 0x117B45156D7EFF2E, i32, p0: i32, p1: i32);
	native!(leaderboards_get_column_id, 0xC4B5467A1886EA7E, i32, p0: i32, p1: i32, p2: i32);
	native!(leaderboards_get_column_type, 0xBF4FEF46DB7894D3, i32, p0: i32, p1: i32, p2: i32);
	native!(leaderboards_read_clear_all, 0xA34CB6E6F0DF4A0B, i32);
	native!(leaderboards_read_clear, 0x7CCE5C737A665701, i32, p0: i32, p1: i32, p2: i32);
	native!(leaderboards_read_pending, 0xAC392C8483342AC2, bool, p0: i32, p1: i32, p2: i32);
	native!(leaderboards_read_any_pending, 0xA31FD15197B192BD, bool);
	native!(leaderboards_read_successful, 0x2FB19228983E832C, bool, p0: i32, p1: i32, p2: i32);
	native!(leaderboards2_read_friends_by_row, 0x918B101666F9CB83, bool, p0: &mut i32, p1: &mut i32, p2: i32, p3: bool, p4: i32, p5: i32);
	native!(leaderboards2_read_by_handle, 0xC30713A383BFBF0E, bool, p0: &mut i32, p1: &mut i32);
	native!(leaderboards2_read_by_row, 0xA9CDB1E3F0A49883, bool, p0: &mut i32, p1: &mut i32, p2: i32, p3: &mut i32, p4: i32, p5: &mut i32, p6: i32);
	native!(leaderboards2_read_by_rank, 0xBA2C7DB0C129449A, bool, p0: &mut i32, p1: i32, p2: i32);
	native!(leaderboards2_read_by_radius, 0x5CE587FB5A42C8C4, bool, p0: &mut i32, p1: i32, p2: &mut i32);
	native!(leaderboards2_read_by_score_int, 0x7EEC7E4F6984A16A, bool, p0: &mut i32, p1: i32, p2: i32);
	native!(leaderboards2_read_by_score_float, 0xE662C8B759D08F3C, bool, p0: &mut i32, p1: f32, p2: i32);
	native!(leaderboards2_read_rank_prediction, 0xC38DC1E90D22547C, bool, p0: &mut i32, p1: &mut i32, p2: &mut i32);
	native!(_leaderboards2_read_by_platform, 0xF1AE5DCDBFCA2721, bool, p0: &mut i32, gamer_handle_csv: *const c_char, platform_name: *const c_char);
	native!(_0xa0f93d5465b3094d, 0xA0F93D5465B3094D, bool, p0: &mut i32);
	native!(_0x71b008056e5692d6, 0x71B008056E5692D6, ());
	native!(_0x34770b9ce0e03b91, 0x34770B9CE0E03B91, bool, p0: i32, p1: &mut i32);
	native!(_0x88578f6ec36b4a3a, 0x88578F6EC36B4A3A, i32, p0: i32, p1: i32);
	native!(_0x38491439b6ba7f7d, 0x38491439B6BA7F7D, f32, p0: i32, p1: i32);
	native!(leaderboards2_write_data, 0xAE2206545888AE49, bool, p0: &mut i32);
	native!(leaderboards_write_add_column, 0x0BCA1D2C47B0D269, (), p0: i32, p1: i32, p2: f32);
	native!(leaderboards_write_add_column_long, 0x2E65248609523599, (), p0: i32, p1: i32, p2: i32);
	native!(leaderboards_cache_data_row, 0xB9BB18E2C40142ED, bool, p0: &mut i32);
	native!(leaderboards_clear_cache_data, 0xD4B02A6B476E1FDC, ());
	native!(_0x8ec74ceb042e7cff, 0x8EC74CEB042E7CFF, (), p0: i32);
	native!(leaderboards_get_cache_exists, 0x9C51349BE6CDFE2C, bool, p0: i32);
	native!(leaderboards_get_cache_time, 0xF04C1C27DA35F6C8, i32, p0: i32);
	native!(leaderboards_get_cache_number_of_rows, 0x58A651CD201D89AD, i32, p0: i32);
	native!(leaderboards_get_cache_data_row, 0x9120E8DBA3D69273, bool, p0: i32, p1: i32, p2: &mut i32);
	native!(_update_stat_int, 0x11FF1C80276097ED, (), stat_hash: Hash, value: i32, p2: i32);
	native!(_update_stat_float, 0x30A6614C1F7799B8, (), stat_hash: Hash, value: f32, p2: i32);
	native!(_0x6483c25849031c4f, 0x6483C25849031C4F, (), p0: i32, p1: i32, p2: i32, p3: &mut i32);
	native!(_0x5ead2bf6484852e4, 0x5EAD2BF6484852E4, bool);
	native!(_0xc141b8917e0017ec, 0xC141B8917E0017EC, ());
	native!(_0xb475f27c6a994d65, 0xB475F27C6A994D65, ());
	native!(_0xc67e2da1cbe759e2, 0xC67E2DA1CBE759E2, ());
	native!(_0xf1a1803d3476f215, 0xF1A1803D3476F215, (), value: i32);
	native!(_0x38baaa5dd4c9d19f, 0x38BAAA5DD4C9D19F, (), value: i32);
	native!(_0x55384438fc55ad8e, 0x55384438FC55AD8E, (), value: i32);
	native!(_0x723c1ce13fbfdb67, 0x723C1CE13FBFDB67, (), p0: i32, p1: i32);
	native!(_0x0d01d20616fc73fb, 0x0D01D20616FC73FB, (), p0: i32, p1: i32);
	native!(_0x428eaf89e24f6c36, 0x428EAF89E24F6C36, (), p0: i32, p1: f32);
	native!(_0x047cbed6f6f8b63c, 0x047CBED6F6F8B63C, ());
	native!(leaderboards2_write_data_for_event_type, 0xC980E62E33DF1D5C, bool, p0: &mut i32, p1: &mut i32);
	native!(_0x6f361b8889a792a3, 0x6F361B8889A792A3, ());
	native!(_0xc847b43f369ac0b5, 0xC847B43F369AC0B5, ());
	native!(_stat_migrate_save, 0xA5C80D8E768A9E66, bool, platform_name: *const c_char);
	native!(_0x9a62ec95ae10e011, 0x9A62EC95AE10E011, i32);
	native!(_0x4c89fe2bdeb3f169, 0x4C89FE2BDEB3F169, i32);
	native!(_0xc6e0e2616a7576bb, 0xC6E0E2616A7576BB, i32);
	native!(_0x5bd5f255321c4aaf, 0x5BD5F255321C4AAF, i32, p0: i32);
	native!(_0xdeaaf77eb3687e97, 0xDEAAF77EB3687E97, i32, p0: i32, p1: &mut i32);
	native!(stat_save_migration_status_start, 0xC70DDCE56D0D3A99, bool);
	native!(stat_get_save_migration_status, 0x886913BBEACA68C1, i32, data: &mut i32);
	native!(_stat_save_migration_cancel, 0x4FEF53183C3C6414, bool);
	native!(_stat_get_cancel_save_migration_status, 0x567384DFA67029E6, i32);
	native!(_stat_save_migration_consume_content_unlock, 0x3270F67EED31FBC1, bool, content_id: Hash, src_platform: *const c_char, src_gamer_handle: *const c_char);
	native!(_stat_get_save_migration_consume_content_unlock_status, 0xCE5AA445ABA8DEE0, i32, p0: &mut i32);
	native!(_0x98e2bc1ca26287c3, 0x98E2BC1CA26287C3, ());
	native!(_0x629526aba383bcaa, 0x629526ABA383BCAA, ());
	native!(_0xbe3db208333d9844, 0xBE3DB208333D9844, i32);
	native!(_0x33d72899e24c3365, 0x33D72899E24C3365, i32, p0: i32, p1: i32);
	native!(_0xa761d4ac6115623d, 0xA761D4AC6115623D, i32);
	native!(_0xf11f01d98113536a, 0xF11F01D98113536A, i32, p0: i32);
	native!(_0x8b9cdbd6c566c38c, 0x8B9CDBD6C566C38C, i32);
	native!(_0xe8853fbce7d8d0d6, 0xE8853FBCE7D8D0D6, i32);
	native!(_0xa943fd1722e11efd, 0xA943FD1722E11EFD, i32);
	native!(_0x84a810b375e69c0e, 0x84A810B375E69C0E, i32);
	native!(_0x9ec8858184cd253a, 0x9EC8858184CD253A, i32);
	native!(_0xba9749cc94c1fd85, 0xBA9749CC94C1FD85, i32);
	native!(_0x55a8becaf28a4eb7, 0x55A8BECAF28A4EB7, i32);
	native!(_0x32cac93c9de73d32, 0x32CAC93C9DE73D32, i32);
	native!(_0xaff47709f1d5dcce, 0xAFF47709F1D5DCCE, i32);
	native!(_0x6e0a5253375c4584, 0x6E0A5253375C4584, i32);
	native!(_0x1a8ea222f9c67dbb, 0x1A8EA222F9C67DBB, i32, p0: i32);
	native!(_0xf9f2922717b819ec, 0xF9F2922717B819EC, i32);
	native!(_0x0b8b7f74bf061c6d, 0x0B8B7F74BF061C6D, i32);
	native!(_0xb3da2606774a8e2d, 0xB3DA2606774A8E2D, bool);
	native!(_set_has_content_unlocks_flags, 0xDAC073C7901F9E15, (), value: i32);
	native!(_set_save_migration_transaction_id, 0xF6792800AC95350D, (), transaction_id: i32);
	native!(_0x6bc0acd0673acebe, 0x6BC0ACD0673ACEBE, (), p0: i32, p1: i32, p2: i32);
	native!(_0x8d8adb562f09a245, 0x8D8ADB562F09A245, (), p0: i32);
	native!(_0xd1a1ee3b4fa8e760, 0xD1A1EE3B4FA8E760, (), p0: i32);
	native!(_0x88087ee1f28024ae, 0x88087EE1F28024AE, (), p0: i32);
	native!(_0xfcc228e07217fcac, 0xFCC228E07217FCAC, (), p0: i32);
	native!(_0x678f86d8fc040bdb, 0x678F86D8FC040BDB, (), p0: i32);
	native!(_0xa6f54bb2ffca35ea, 0xA6F54BB2FFCA35EA, (), p0: i32);
	native!(_0x5ff2c33b13a02a11, 0x5FF2C33B13A02A11, (), p0: i32);
	native!(_0x282b6739644f4347, 0x282B6739644F4347, (), p0: i32);
	native!(_0xf06a6f41cb445443, 0xF06A6F41CB445443, (), p0: i32);
	native!(_0x7b18da61f6bae9d5, 0x7B18DA61F6BAE9D5, (), p0: i32);
	native!(_0x06eaf70ae066441e, 0x06EAF70AE066441E, (), p0: i32);
	native!(_0x14eda9ee27bd1626, 0x14EDA9EE27BD1626, (), p0: i32);
	native!(_0x930f504203f561c9, 0x930F504203F561C9, (), p0: i32);
	native!(_0xe3261d791eb44acb, 0xE3261D791EB44ACB, (), p0: i32);
	native!(_0x73001e34f85137f8, 0x73001E34F85137F8, (), p0: i32);
	native!(_0x53cae13e9b426993, 0x53CAE13E9B426993, (), p0: i32);
	native!(_0x7d36291161859389, 0x7D36291161859389, (), p0: i32);
	native!(_playstats_spent_pi_custom_loadout, 0xBE509B0A3693DE8B, (), amount: i32);
	native!(_0xd6781e42755531f7, 0xD6781E42755531F7, (), p0: i32);
	native!(_0xc729991a9065376e, 0xC729991A9065376E, (), p0: i32);
	native!(_0x2605663bd4f23b5d, 0x2605663BD4F23B5D, (), p0: i32);
	native!(_0x04d90ba8207ada2d, 0x04D90BA8207ADA2D, (), p0: i32);
	native!(_0x60eedc12af66e846, 0x60EEDC12AF66E846, (), p0: i32);
	native!(_0x3ebeac6c3f81f6bd, 0x3EBEAC6C3F81F6BD, (), p0: i32);
	native!(_0x96e6d5150dbf1c09, 0x96E6D5150DBF1C09, (), p0: i32, p1: i32, p2: i32);
	native!(_0xa3c53804bdb68ed2, 0xA3C53804BDB68ED2, (), p0: i32, p1: i32);
	native!(_0x6bccf9948492fd85, 0x6BCCF9948492FD85, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_hired_limo, 0x792271AB35C356A4, (), p0: i32, p1: i32);
	native!(_ordered_boss_vehicle, 0xCEA553E35C2246E1, (), p0: i32, p1: i32, vehicle_hash: Hash);
	native!(_0xd1c9b92bdd3f151d, 0xD1C9B92BDD3F151D, (), p0: i32, p1: i32, p2: i32);
	native!(_0x44919cc079bb60bf, 0x44919CC079BB60BF, (), p0: i32);
	native!(_0x7033eefd9b28088e, 0x7033EEFD9B28088E, (), p0: i32);
	native!(_0xaa525dff66bb82f5, 0xAA525DFF66BB82F5, (), p0: i32, p1: i32, p2: i32);
	native!(_0x015b03ee1c43e6ec, 0x015B03EE1C43E6EC, (), p0: i32);
	native!(_playstats_stunt_performed_event_allow_trigger, 0x928DBFB892638EF3, ());
	native!(_playstats_stunt_performed_event_disallow_trigger, 0x8A800DACCC0DA55D, ());
	native!(_0xbf371cd2b64212fd, 0xBF371CD2B64212FD, (), p0: i32);
	native!(_0x7d8ba05688ad64c7, 0x7D8BA05688AD64C7, (), p0: i32);
	native!(_0x0b565b0aae56a0e8, 0x0B565B0AAE56A0E8, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(_0x28ecb8ac2f607db2, 0x28ECB8AC2F607DB2, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_playstats_change_mc_emblem, 0x0A50D2604E05CB94, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_0xcc25a4553dfbf9ea, 0xCC25A4553DFBF9EA, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_0xf534d94dfa2ead26, 0xF534D94DFA2EAD26, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_0xd558bec0bba7e8d2, 0xD558BEC0BBA7E8D2, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_playstats_earned_mc_points, 0x501478855A6074CE, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(_0x03c2eebb04b3fb72, 0x03C2EEBB04B3FB72, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(_0x8989cbd7b4e82534, 0x8989CBD7B4E82534, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(_0x27aa1c973cacfe63, 0x27AA1C973CACFE63, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32);
	native!(_playstats_copy_rank_into_new_slot, 0xB7257BA2550EA10A, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(_playstats_dupe_detection, 0x848B66100EE33B05, (), data: &mut i32);
	native!(_playstats_ban_alert, 0x516FC96EB88EEFE5, (), p0: i32);
	native!(_playstats_gunrun_mission_ended, 0x0EACDF8487D5155A, (), data: &mut i32);
	native!(_0xdaf80797fc534bec, 0xDAF80797FC534BEC, (), p0: i32);
	native!(_0x316db59cd14c1774, 0x316DB59CD14C1774, (), p0: i32);
	native!(_0x2d7a9b577e72385e, 0x2D7A9B577E72385E, (), p0: i32);
	native!(_0x830c3a44eb3f2cf9, 0x830C3A44EB3F2CF9, (), p0: i32);
	native!(_0xb26f670685631727, 0xB26F670685631727, (), p0: i32);
	native!(_0xc14bd9f5337219b2, 0xC14BD9F5337219B2, (), p0: i32);
	native!(_playstats_stone_hatchet_end, 0x35E39E5570358630, (), data: &mut i32);
	native!(_playstats_smug_mission_ended, 0x320C35147D5B5DDD, (), data: &mut i32);
	native!(_playstats_h2_fmprep_end, 0xD8AFB345A9C5CCBB, (), data: &mut i32);
	native!(_playstats_h2_instance_end, 0x1E1497D0D2108115, (), data: &mut i32, p1: i32, p2: i32, p3: i32);
	native!(_playstats_dar_mission_end, 0x0BC254FF3A911501, (), data: &mut i32);
	native!(_playstats_enter_session_pack, 0x878FF156D36E9956, (), data: &mut i32);
	native!(_playstats_drone_usage, 0x66C7BB2416ED3FCE, (), p0: i32, p1: i32, p2: i32);
	native!(_playstats_spectator_wheel_spin, 0x6731DE84A38BFAD0, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_playstats_arena_war_spectator, 0x6F4F599753F8200A, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_playstats_arena_wars_ended, 0xB479D9F0D48A1BC5, (), data: &mut i32);
	native!(_playstats_passive_mode, 0x35EEC6C2BC821A71, (), p0: bool, p1: i32, p2: i32, p3: i32);
	native!(_playstats_collectible, 0xCD0A8A9338681CF2, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32);
	native!(_playstats_casino_story_mission_ended, 0xFCCCAC2BD3C1F180, (), p0: i32, p1: i32);
	native!(_playstats_casino_chip, 0x0999F3F090EC5012, (), p0: i32);
	native!(_playstats_casino_roulette, 0x95101C443A84E7F1, (), p0: i32);
	native!(_playstats_casino_blackjack, 0x3EAE97309727E7AD, (), p0: i32);
	native!(_playstats_casino_threecardpoker, 0xF740FB339D471C35, (), p0: i32);
	native!(_playstats_casino_slotmachine, 0xEF5EC67D392B830A, (), p0: i32);
	native!(_playstats_casino_insidetrack, 0x049F059625058A86, (), p0: i32);
	native!(_playstats_casino_luckyseven, 0x0C432C1435F5E4FA, (), p0: i32);
	native!(_playstats_casino_roulette_light, 0x6572ABA3DE1197FC, (), p0: i32);
	native!(_playstats_casino_blackjack_light, 0xD5451C7BF151EB6F, (), p0: i32);
	native!(_playstats_casino_threecardpoker_light, 0xC9001364B4388F22, (), p0: i32);
	native!(_playstats_casino_slotmachine_light, 0xE60054A0FAE8227F, (), p0: i32);
	native!(_playstats_casino_insidetrack_light, 0x23A3CBCD50D54E47, (), p0: i32);
	native!(_playstats_arcadegame, 0x533A7D1EA58DF958, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(_playstats_casino_mission_ended, 0x1A0D4A6C336B7BC5, (), data: &mut i32);
}

pub mod streaming {
	use super::*;

	native!(load_all_objects_now, 0xBD6E84632DD4CB3F, ());
	native!(load_scene, 0x4448EB75B4904BDB, (), x: f32, y: f32, z: f32);
	native!(network_update_load_scene, 0xC4582015556D1C46, bool);
	native!(is_network_loading_scene, 0x41CA5A33160EA4AB, bool);
	native!(set_interior_active, 0xE37B76C387BE28ED, (), interior_id: i32, toggle: bool);
	native!(request_model, 0x963D27A58DF860AC, (), model: Hash);
	native!(request_menu_ped_model, 0xA0261AEF7ACFC51E, (), model: Hash);
	native!(has_model_loaded, 0x98A4EB5D89A0C952, bool, model: Hash);
	native!(request_models_in_room, 0x8A7A40100EDFEC58, (), interior: Interior, room_name: *const c_char);
	native!(set_model_as_no_longer_needed, 0xE532F5D78798DAAB, (), model: Hash);
	native!(is_model_in_cdimage, 0x35B9E0803292B641, bool, model: Hash);
	native!(is_model_valid, 0xC0296A2EDF545E92, bool, model: Hash);
	native!(is_model_a_ped, 0x75816577FEA6DAD5, bool, model: Hash);
	native!(is_model_a_vehicle, 0x19AAC8F07BFEC53E, bool, model: Hash);
	native!(request_collision_at_coord, 0x07503F7948F491A7, (), x: f32, y: f32, z: f32);
	native!(request_collision_for_model, 0x923CB32A3B874FCB, (), model: Hash);
	native!(has_collision_for_model_loaded, 0x22CCA434E368F03A, bool, model: Hash);
	native!(request_additional_collision_at_coord, 0xC9156DC11411A9EA, (), x: f32, y: f32, z: f32);
	native!(does_anim_dict_exist, 0x2DA49C3B79856961, bool, anim_dict: *const c_char);
	native!(request_anim_dict, 0xD3BD40951412FEF6, (), anim_dict: *const c_char);
	native!(has_anim_dict_loaded, 0xD031A9162D01088C, bool, anim_dict: *const c_char);
	native!(remove_anim_dict, 0xF66A602F829E2A06, (), anim_dict: *const c_char);
	native!(request_anim_set, 0x6EA47DAE7FAD0EED, (), anim_set: *const c_char);
	native!(has_anim_set_loaded, 0xC4EA073D86FB29B0, bool, anim_set: *const c_char);
	native!(remove_anim_set, 0x16350528F93024B3, (), anim_set: *const c_char);
	native!(request_clip_set, 0xD2A71E1A77418A49, (), clip_set: *const c_char);
	native!(has_clip_set_loaded, 0x318234F4F3738AF3, bool, clip_set: *const c_char);
	native!(remove_clip_set, 0x01F73A131C18CD94, (), clip_set: *const c_char);
	native!(request_ipl, 0x41B4893843BBDB74, (), ipl_name: *const c_char);
	native!(remove_ipl, 0xEE6C5AD3ECE0A82D, (), ipl_name: *const c_char);
	native!(is_ipl_active, 0x88A741E44A2B3495, bool, ipl_name: *const c_char);
	native!(set_streaming, 0x6E0C692677008888, (), toggle: bool);
	native!(set_game_pauses_for_streaming, 0x717CD6E6FAEBBEDC, (), toggle: bool);
	native!(set_reduce_ped_model_budget, 0x77B5F9A36BF96710, (), toggle: bool);
	native!(set_reduce_vehicle_model_budget, 0x80C527893080CCF3, (), toggle: bool);
	native!(set_ditch_police_models, 0x42CBE54462D92634, (), toggle: bool);
	native!(get_number_of_streaming_requests, 0x4060057271CEBC89, i32);
	native!(request_ptfx_asset, 0x944955FB2A3935C8, ());
	native!(has_ptfx_asset_loaded, 0xCA7D9B86ECA7481B, bool);
	native!(remove_ptfx_asset, 0x88C6814073DD4A73, ());
	native!(request_named_ptfx_asset, 0xB80D8756B4668AB6, (), fx_name: *const c_char);
	native!(has_named_ptfx_asset_loaded, 0x8702416E512EC454, bool, fx_name: *const c_char);
	native!(remove_named_ptfx_asset, 0x5F61EBBE1A00F96D, (), fx_name: *const c_char);
	native!(set_vehicle_population_budget, 0xCB9E1EB3BE2AF4E9, (), p0: i32);
	native!(set_ped_population_budget, 0x8C95333CFC3340F3, (), p0: i32);
	native!(clear_focus, 0x31B73D1EA9F01DA2, ());
	native!(set_focus_pos_and_vel, 0xBB7454BAFF08FE25, (), x: f32, y: f32, z: f32, offset_x: f32, offset_y: f32, offset_z: f32);
	native!(set_focus_entity, 0x198F77705FA0931D, (), entity: Entity);
	native!(is_entity_focus, 0x2DDFF3FB9075D747, bool, entity: Entity);
	native!(_0x0811381ef5062fec, 0x0811381EF5062FEC, (), p0: Entity);
	native!(set_mapdatacullbox_enabled, 0xAF12610C644A35C9, (), name: *const c_char, toggle: bool);
	native!(_0x4e52e752c76e7e7a, 0x4E52E752C76E7E7A, (), p0: i32);
	native!(format_focus_heading, 0x219C7B8D53E429FD, i32, x: f32, y: f32, z: f32, rad: f32, p4: i32, p5: i32);
	native!(_0x1f3f018bc3afa77c, 0x1F3F018BC3AFA77C, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: i32, p8: i32);
	native!(_0x0ad9710cee2f590f, 0x0AD9710CEE2F590F, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: i32);
	native!(_0x1ee7d8df4425f053, 0x1EE7D8DF4425F053, (), p0: i32);
	native!(_0x7d41e9d2d17c5b2d, 0x7D41E9D2D17C5B2D, i32, p0: i32);
	native!(_0x07c313f94746702c, 0x07C313F94746702C, i32, p0: i32);
	native!(_0xbc9823ab80a3dcac, 0xBC9823AB80A3DCAC, i32);
	native!(new_load_scene_start, 0x212A8D0D2BABFAC2, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: i32);
	native!(new_load_scene_start_sphere, 0xACCFB4ACF53551B0, bool, x: f32, y: f32, z: f32, radius: f32, p4: i32);
	native!(new_load_scene_stop, 0xC197616D221FF4A4, ());
	native!(is_new_load_scene_active, 0xA41A05B6CB741B85, bool);
	native!(is_new_load_scene_loaded, 0x01B8247A7A8B9AD1, bool);
	native!(_0x71e7b2e657449aad, 0x71E7B2E657449AAD, i32);
	native!(start_player_switch, 0xFAA23F2CBA159D67, (), from: Ped, to: Ped, flags: i32, switch_type: i32);
	native!(stop_player_switch, 0x95C0A5BBDC189AA1, ());
	native!(is_player_switch_in_progress, 0xD9D2CFFF49FAB35F, bool);
	native!(get_player_switch_type, 0xB3C94A90D9FC9E62, i32);
	native!(get_ideal_player_switch_type, 0xB5D7B26B45720E05, i32, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32);
	native!(get_player_switch_state, 0x470555300D10B2A5, i32);
	native!(get_player_short_switch_state, 0x20F898A5D9782800, i32);
	native!(_0x5f2013f8bc24ee69, 0x5F2013F8BC24EE69, (), p0: i32);
	native!(get_player_switch_jump_cut_index, 0x78C0D93253149435, i32);
	native!(set_player_switch_outro, 0xC208B673CE446B61, (), p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: i32);
	native!(set_player_switch_establishing_shot, 0x0FDE9DBFC0A6BC65, (), name: *const c_char);
	native!(_0x43d1680c6d19a8e9, 0x43D1680C6D19A8E9, ());
	native!(_0x74de2e8739086740, 0x74DE2E8739086740, ());
	native!(_0x8e2a065abdae6994, 0x8E2A065ABDAE6994, ());
	native!(_0xad5fdf34b81bfe79, 0xAD5FDF34B81BFE79, ());
	native!(is_switch_ready_for_descent, 0xDFA80CB25D0A19B3, bool);
	native!(enable_switch_pause_before_descent, 0xD4793DFF3AF2ABCD, ());
	native!(disable_switch_outro_fx, 0xBD605B8E0E18B3BB, ());
	native!(_switch_out_player, 0xAAB3200ED59016BC, (), ped: Ped, flags: i32, unknown: i32);
	native!(_switch_in_player, 0xD8295AF639FD9CB8, (), ped: Ped);
	native!(_0x933bbeeb8c61b5f4, 0x933BBEEB8C61B5F4, bool);
	native!(get_player_switch_interp_out_duration, 0x08C2D6C52A3104BB, i32);
	native!(_0x5b48a06dd0e792a5, 0x5B48A06DD0E792A5, i32);
	native!(is_switch_skipping_descent, 0x5B74EA8CFD5E3E7E, bool);
	native!(_0x1e9057a74fd73e23, 0x1E9057A74FD73E23, ());
	native!(_0x0c15b0e443b2349d, 0x0C15B0E443B2349D, f32);
	native!(_0xa76359fc80b2438e, 0xA76359FC80B2438E, (), p0: f32);
	native!(_0xbed8ca5ff5e04113, 0xBED8CA5FF5E04113, (), p0: f32, p1: f32, p2: f32, p3: f32);
	native!(_0x472397322e92a856, 0x472397322E92A856, ());
	native!(_0x40aefd1a244741f2, 0x40AEFD1A244741F2, (), p0: bool);
	native!(_0x03f1a106bda7dd3e, 0x03F1A106BDA7DD3E, ());
	native!(_0x95a7dabddbb78ae7, 0x95A7DABDDBB78AE7, (), ipl_name1: *const c_char, ipl_name2: *const c_char);
	native!(_0x63eb2b972a218cac, 0x63EB2B972A218CAC, ());
	native!(_0xfb199266061f820a, 0xFB199266061F820A, bool);
	native!(_0xf4a0dadb70f57fa6, 0xF4A0DADB70F57FA6, ());
	native!(_0x5068f488ddb54dd8, 0x5068F488DDB54DD8, i32);
	native!(prefetch_srl, 0x3D245789CE12982C, (), srl: *const c_char);
	native!(is_srl_loaded, 0xD0263801A4C5B0BB, bool);
	native!(begin_srl, 0x9BADDC94EF83B823, ());
	native!(end_srl, 0x0A41540E63C9EE17, ());
	native!(set_srl_time, 0xA74A541C6884E7B8, (), p0: f32);
	native!(_0xef39ee20c537e98c, 0xEF39EE20C537E98C, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(_0xbeb2d9a1d9a8f55a, 0xBEB2D9A1D9A8F55A, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x20c6c7e4eb082a7f, 0x20C6C7E4EB082A7F, (), p0: bool);
	native!(_0xf8155a7f03ddfc8e, 0xF8155A7F03DDFC8E, (), p0: i32);
	native!(set_hd_area, 0xB85F26619073E775, (), x: f32, y: f32, z: f32, radius: f32);
	native!(clear_hd_area, 0xCE58B1CFB9290813, ());
	native!(init_creator_budget, 0xB5A4DB34FE89B88A, ());
	native!(shutdown_creator_budget, 0xCCE26000E9A6FAD7, ());
	native!(add_model_to_creator_budget, 0x0BC3144DEB678666, bool, model_hash: Hash);
	native!(remove_model_from_creator_budget, 0xF086AD9354FAC3A3, (), model_hash: Hash);
	native!(_get_used_creator_model_memory_percentage, 0x3D3D8B3BE5A83D35, f32);
}

pub mod task {
	use super::*;

	native!(task_pause, 0xE73A266DB0CA9042, (), ped: Ped, ms: i32);
	native!(task_stand_still, 0x919BE13EED931959, (), ped: Ped, time: i32);
	native!(task_jump, 0x0AE4086104E067B1, (), ped: Ped, unused: bool, p2: i32, p3: i32);
	native!(task_cower, 0x3EB1FE9E8E908E15, (), ped: Ped, duration: i32);
	native!(task_hands_up, 0xF2EAB31979A7F910, (), ped: Ped, duration: i32, facing_ped: Ped, p3: i32, p4: bool);
	native!(update_task_hands_up_duration, 0xA98FCAFD7893C834, (), ped: Ped, duration: i32);
	native!(task_open_vehicle_door, 0x965791A9A488A062, (), ped: Ped, vehicle: Vehicle, time_out: i32, seat: i32, speed: f32);
	native!(task_enter_vehicle, 0xC20E50AA46D09CA8, (), ped: Ped, vehicle: Vehicle, timeout: i32, seat: i32, speed: f32, flag: i32, p6: i32);
	native!(task_leave_vehicle, 0xD3DBCE61A490BE02, (), ped: Ped, vehicle: Vehicle, flags: i32);
	native!(task_get_off_boat, 0x9C00E77AF14B2DFF, (), ped: Ped, boat: Vehicle);
	native!(task_sky_dive, 0x601736CFE536B0A0, (), ped: Ped, p1: bool);
	native!(task_parachute, 0xD2F1C53C97EE81AB, (), ped: Ped, p1: bool, p2: bool);
	native!(task_parachute_to_target, 0xB33E291AFA6BD03A, (), ped: Ped, x: f32, y: f32, z: f32);
	native!(set_parachute_task_target, 0xC313379AF0FCEDA7, (), ped: Ped, x: f32, y: f32, z: f32);
	native!(set_parachute_task_thrust, 0x0729BAC1B8C64317, (), ped: Ped, thrust: f32);
	native!(task_rappel_from_heli, 0x09693B0312F91649, (), ped: Ped, p1: f32);
	native!(task_vehicle_drive_to_coord, 0xE2A2AA2F659D77A7, (), ped: Ped, vehicle: Vehicle, x: f32, y: f32, z: f32, speed: f32, p6: i32, vehicle_model: Hash, driving_mode: i32, stop_range: f32, p10: f32);
	native!(task_vehicle_drive_to_coord_longrange, 0x158BB33F920D360C, (), ped: Ped, vehicle: Vehicle, x: f32, y: f32, z: f32, speed: f32, drive_mode: i32, stop_range: f32);
	native!(task_vehicle_drive_wander, 0x480142959D337D00, (), ped: Ped, vehicle: Vehicle, speed: f32, driving_style: i32);
	native!(task_follow_to_offset_of_entity, 0x304AE42E357B8C7E, (), ped: Ped, entity: Entity, offset_x: f32, offset_y: f32, offset_z: f32, movement_speed: f32, timeout: i32, stopping_range: f32, persist_following: bool);
	native!(task_go_straight_to_coord, 0xD76B57B44F1E6F8B, (), ped: Ped, x: f32, y: f32, z: f32, speed: f32, timeout: i32, target_heading: f32, distance_to_slide: f32);
	native!(task_go_straight_to_coord_relative_to_entity, 0x61E360B7E040D12E, (), entity1: Entity, entity2: Entity, p2: f32, p3: f32, p4: f32, p5: f32, p6: i32);
	native!(task_achieve_heading, 0x93B93A37987F1F3D, (), ped: Ped, heading: f32, timeout: i32);
	native!(task_flush_route, 0x841142A1376E9006, ());
	native!(task_extend_route, 0x1E7889778264843A, (), x: f32, y: f32, z: f32);
	native!(task_follow_point_route, 0x595583281858626E, (), ped: Ped, speed: f32, unknown: i32);
	native!(task_go_to_entity, 0x6A071245EB0D1882, (), entity: Entity, target: Entity, duration: i32, distance: f32, speed: f32, p5: f32, p6: i32);
	native!(task_smart_flee_coord, 0x94587F17E9C365D5, (), ped: Ped, x: f32, y: f32, z: f32, distance: f32, time: i32, p6: bool, p7: bool);
	native!(task_smart_flee_ped, 0x22B0D0E37CCB840D, (), ped: Ped, flee_target: Ped, distance: f32, flee_time: i32, p4: bool, p5: bool);
	native!(task_react_and_flee_ped, 0x72C896464915D1B1, (), ped: Ped, flee_target: Ped);
	native!(task_shocking_event_react, 0x452419CBD838065B, (), ped: Ped, event_handle: i32);
	native!(task_wander_in_area, 0xE054346CA3A0F315, (), ped: Ped, x: f32, y: f32, z: f32, radius: f32, minimal_length: f32, time_between_walks: f32);
	native!(task_wander_standard, 0xBB9CE077274F6A1B, (), ped: Ped, p1: f32, p2: i32);
	native!(task_vehicle_park, 0x0F3E34E968EA374E, (), ped: Ped, vehicle: Vehicle, x: f32, y: f32, z: f32, heading: f32, mode: i32, radius: f32, keep_engine_on: bool);
	native!(task_stealth_kill, 0xAA5DC05579D60BD9, (), killer: Ped, target: Ped, action_type: Hash, p3: f32, p4: i32);
	native!(task_plant_bomb, 0x965FEC691D55E9BF, (), ped: Ped, x: f32, y: f32, z: f32, heading: f32);
	native!(task_follow_nav_mesh_to_coord, 0x15D3A79D4E44B913, (), ped: Ped, x: f32, y: f32, z: f32, speed: f32, timeout: i32, stopping_range: f32, persist_following: bool, unk: f32);
	native!(task_follow_nav_mesh_to_coord_advanced, 0x17F58B88D085DBAC, (), ped: Ped, x: f32, y: f32, z: f32, speed: f32, timeout: i32, unk_float: f32, unk_int: i32, unk_x: f32, unk_y: f32, unk_z: f32, unk_40000f: f32);
	native!(set_ped_path_can_use_climbovers, 0x8E06A6FE76C9EFF4, (), ped: Ped, toggle: bool);
	native!(set_ped_path_can_use_ladders, 0x77A5B103C87F476E, (), ped: Ped, toggle: bool);
	native!(set_ped_path_can_drop_from_height, 0xE361C5C71C431A4F, (), ped: Ped, toggle: bool);
	native!(_0x88e32db8c1a4aa4b, 0x88E32DB8C1A4AA4B, (), ped: Ped, p1: f32);
	native!(set_ped_path_may_enter_water, 0xF35425A4204367EC, (), ped: Ped, may_enter_water: bool);
	native!(set_ped_path_prefer_to_avoid_water, 0x38FE1EC73743793C, (), ped: Ped, avoid_water: bool);
	native!(set_ped_path_avoid_fire, 0x4455517B28441E60, (), ped: Ped, avoid_fire: bool);
	native!(set_global_min_bird_flight_height, 0x6C6B148586F934F7, (), height: f32);
	native!(get_navmesh_route_distance_remaining, 0xC6F5C0BCDC74D62D, i32, ped: Ped, p1: &mut i32, p2: &mut i32);
	native!(get_navmesh_route_result, 0x632E831F382A0FA8, i32, ped: Ped);
	native!(_0x3e38e28a1d80ddf6, 0x3E38E28A1D80DDF6, bool, ped: Ped);
	native!(task_go_to_coord_any_means, 0x5BC448CB78FA3E88, (), ped: Ped, x: f32, y: f32, z: f32, speed: f32, p5: i32, p6: bool, walking_style: i32, p8: f32);
	native!(task_go_to_coord_any_means_extra_params, 0x1DD45F9ECFDB1BC9, (), ped: Ped, x: f32, y: f32, z: f32, speed: f32, p5: i32, p6: bool, walking_style: i32, p8: f32, p9: i32, p10: i32, p11: i32, p12: i32);
	native!(task_go_to_coord_any_means_extra_params_with_cruise_speed, 0xB8ECD61F531A7B02, (), ped: Ped, x: f32, y: f32, z: f32, speed: f32, p5: i32, p6: bool, walking_style: i32, p8: f32, p9: i32, p10: i32, p11: i32, p12: i32, p13: i32);
	native!(task_play_anim, 0xEA47FE3719165B94, (), ped: Ped, anim_dictionary: *const c_char, animation_name: *const c_char, speed: f32, speed_multiplier: f32, duration: i32, flag: i32, playback_rate: f32, lock_x: bool, lock_y: bool, lock_z: bool);
	native!(task_play_anim_advanced, 0x83CDB10EA29B370B, (), ped: Ped, anim_dict: *const c_char, anim_name: *const c_char, pos_x: f32, pos_y: f32, pos_z: f32, rot_x: f32, rot_y: f32, rot_z: f32, speed: f32, speed_multiplier: f32, duration: i32, flag: i32, anim_time: f32, p14: i32, p15: i32);
	native!(stop_anim_task, 0x97FF36A1D40EA00A, (), ped: Ped, anim_dictionary: *const c_char, animation_name: *const c_char, p3: f32);
	native!(task_scripted_animation, 0x126EF75F1E17ABE5, (), ped: Ped, p1: &mut i32, p2: &mut i32, p3: &mut i32, p4: f32, p5: f32);
	native!(play_entity_scripted_anim, 0x77A1EEC547E7FCF1, (), p0: i32, p1: &mut i32, p2: &mut i32, p3: &mut i32, p4: f32, p5: f32);
	native!(stop_anim_playback, 0xEE08C992D238C5D1, (), ped: Ped, p1: i32, p2: bool);
	native!(set_anim_weight, 0x207F1A47C0342F48, (), p0: i32, p1: f32, p2: i32, p3: i32, p4: bool);
	native!(set_anim_rate, 0x032D49C5E359C847, (), p0: i32, p1: f32, p2: i32, p3: bool);
	native!(set_anim_looped, 0x70033C3CC29A1FF4, (), p0: i32, p1: bool, p2: i32, p3: bool);
	native!(task_play_phone_gesture_animation, 0x8FBB6758B3B3E9EC, (), ped: Ped, anim_dict: *const c_char, animation: *const c_char, bone_mask_type: *const c_char, p4: f32, p5: f32, p6: bool, p7: bool);
	native!(task_stop_phone_gesture_animation, 0x3FA00D4F4641BFAE, (), ped: Ped, p1: i32);
	native!(is_playing_phone_gesture_anim, 0xB8EBB1E9D3588C10, bool, ped: Ped);
	native!(get_phone_gesture_anim_current_time, 0x47619ABE8B268C60, f32, ped: Ped);
	native!(get_phone_gesture_anim_total_time, 0x1EE0F68A7C25DEC6, f32, ped: Ped);
	native!(task_vehicle_play_anim, 0x69F5C3BD0F3EBD89, (), vehicle: Vehicle, animation_set: *const c_char, animation_name: *const c_char);
	native!(task_look_at_coord, 0x6FA46612594F7973, (), entity: Entity, x: f32, y: f32, z: f32, duration: f32, p5: i32, p6: i32);
	native!(task_look_at_entity, 0x69F4BE8C8CC4796C, (), ped: Ped, look_at: Entity, duration: i32, unknown1: i32, unknown2: i32);
	native!(task_clear_look_at, 0x0F804F1DB19B9689, (), ped: Ped);
	native!(open_sequence_task, 0xE8854A4326B9E12B, (), task_sequence_id: &mut i32);
	native!(close_sequence_task, 0x39E72BC99E6360CB, (), task_sequence_id: i32);
	native!(task_perform_sequence, 0x5ABA3986D90D8A3B, (), ped: Ped, task_sequence_id: i32);
	native!(task_perform_sequence_locally, 0x8C33220C8D78CA0D, (), ped: Ped, task_sequence_id: i32);
	native!(clear_sequence_task, 0x3841422E9C488D8C, (), task_sequence_id: &mut i32);
	native!(set_sequence_to_repeat, 0x58C70CF3A41E4AE7, (), task_sequence_id: i32, repeat: bool);
	native!(get_sequence_progress, 0x00A9010CFE1E3533, i32, ped: Ped);
	native!(get_is_task_active, 0xB0760331C7AA4155, bool, ped: Ped, task_index: i32);
	native!(get_script_task_status, 0x77F1BEB8863288D5, i32, ped: Ped, task_hash: Hash);
	native!(get_active_vehicle_mission_type, 0x534AEBA6E5ED4CAB, i32, vehicle: Vehicle);
	native!(task_leave_any_vehicle, 0x504D54DF3F6F2247, (), ped: Ped, p1: i32, p2: i32);
	native!(task_aim_gun_scripted, 0x7A192BE16D373D00, (), ped: Ped, script_task: Hash, p2: bool, p3: bool);
	native!(task_aim_gun_scripted_with_target, 0x8605AF0DE8B3A5AC, (), p0: i32, p1: i32, p2: f32, p3: f32, p4: f32, p5: i32, p6: bool, p7: bool);
	native!(update_task_aim_gun_scripted_target, 0x9724FB59A3E72AD0, (), p0: Ped, p1: Ped, p2: f32, p3: f32, p4: f32, p5: bool);
	native!(get_clip_set_for_scripted_gun_task, 0x3A8CADC7D37AACC5, *const c_char, p0: i32);
	native!(task_aim_gun_at_entity, 0x9B53BB6E8943AF53, (), ped: Ped, entity: Entity, duration: i32, p3: bool);
	native!(task_turn_ped_to_face_entity, 0x5AD23D40115353AC, (), ped: Ped, entity: Entity, duration: i32);
	native!(task_aim_gun_at_coord, 0x6671F3EEC681BDA1, (), ped: Ped, x: f32, y: f32, z: f32, time: i32, p5: bool, p6: bool);
	native!(task_shoot_at_coord, 0x46A6CC01E0826106, (), ped: Ped, x: f32, y: f32, z: f32, duration: i32, firing_pattern: Hash);
	native!(task_shuffle_to_next_vehicle_seat, 0x7AA80209BDA643EB, (), ped: Ped, vehicle: Vehicle, p2: i32);
	native!(clear_ped_tasks, 0xE1EF3C1216AFF2CD, (), ped: Ped);
	native!(clear_ped_secondary_task, 0x176CECF6F920D707, (), ped: Ped);
	native!(task_everyone_leave_vehicle, 0x7F93691AB4B92272, (), vehicle: Vehicle);
	native!(task_goto_entity_offset, 0xE39B4FF4FDEBDE27, (), ped: Ped, p1: i32, p2: i32, x: f32, y: f32, z: f32, duration: i32);
	native!(task_goto_entity_offset_xy, 0x338E7EF52B6095A9, (), p0: i32, oed: Ped, duration: i32, p3: f32, p4: f32, p5: f32, p6: f32, p7: bool);
	native!(task_turn_ped_to_face_coord, 0x1DDA930A0AC38571, (), ped: Ped, x: f32, y: f32, z: f32, duration: i32);
	native!(task_vehicle_temp_action, 0xC429DCEEB339E129, (), driver: Ped, vehicle: Vehicle, action: i32, time: i32);
	native!(task_vehicle_mission, 0x659427E0EF36BCDE, (), p0: i32, p1: i32, veh: Vehicle, p3: i32, p4: f32, p5: i32, p6: f32, p7: f32, p8: bool);
	native!(task_vehicle_mission_ped_target, 0x9454528DF15D657A, (), ped: Ped, vehicle: Vehicle, ped_target: Ped, mode: i32, max_speed: f32, driving_style: i32, min_distance: f32, p7: f32, p8: bool);
	native!(task_vehicle_mission_coors_target, 0xF0AF20AA7731F8C3, (), ped: Ped, vehicle: Vehicle, x: f32, y: f32, z: f32, p5: i32, p6: i32, p7: i32, p8: f32, p9: f32, p10: bool);
	native!(task_vehicle_escort, 0x0FA6E4B75F302400, (), ped: Ped, vehicle: Vehicle, target_vehicle: Vehicle, mode: i32, speed: f32, driving_style: i32, min_distance: f32, p7: i32, no_roads_distance: f32);
	native!(task_vehicle_follow, 0xFC545A9F0626E3B6, (), driver: Ped, vehicle: Vehicle, target_entity: Entity, speed: f32, driving_style: i32, min_distance: i32);
	native!(task_vehicle_chase, 0x3C08A8E30363B353, (), driver: Ped, target_ent: Entity);
	native!(task_vehicle_heli_protect, 0x1E09C32048FEFD1C, (), pilot: Ped, vehicle: Vehicle, entity_to_follow: Entity, target_speed: f32, p4: i32, radius: f32, altitude: i32, p7: i32);
	native!(set_task_vehicle_chase_behavior_flag, 0xCC665AAC360D31E7, (), ped: Ped, flag: i32, set: bool);
	native!(set_task_vehicle_chase_ideal_pursuit_distance, 0x639B642FACBE4EDD, (), ped: Ped, distance: f32);
	native!(task_heli_chase, 0xAC83B1DB38D0ADA0, (), pilot: Ped, entity_to_follow: Entity, x: f32, y: f32, z: f32);
	native!(task_plane_chase, 0x2D2386F273FF7A25, (), pilot: Ped, entity_to_follow: Entity, x: f32, y: f32, z: f32);
	native!(task_plane_land, 0xBF19721FA34D32C0, (), pilot: Ped, plane: Vehicle, runway_start_x: f32, runway_start_y: f32, runway_start_z: f32, runway_end_x: f32, runway_end_y: f32, runway_end_z: f32);
	native!(_0xdbbc7a2432524127, 0xDBBC7A2432524127, (), vehicle: Vehicle);
	native!(_0x53ddc75bc3ac0a90, 0x53DDC75BC3AC0A90, (), vehicle: Vehicle);
	native!(task_plane_goto_precise_vtol, 0xF7F9DCCA89E7505B, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32);
	native!(task_heli_mission, 0xDAD029E187A2BEB4, (), pilot: Ped, aircraft: Vehicle, target_vehicle: Vehicle, target_ped: Ped, destination_x: f32, destination_y: f32, destination_z: f32, mission_flag: i32, max_speed: f32, landing_radius: f32, target_heading: f32, unk1: i32, unk2: i32, unk3: Hash, landing_flags: i32);
	native!(task_heli_escort_heli, 0xB385523325077210, (), pilot: Ped, heli1: Vehicle, heli2: Vehicle, p3: f32, p4: f32, p5: f32);
	native!(task_plane_mission, 0x23703CD154E83B88, (), pilot: Ped, aircraft: Vehicle, target_vehicle: Vehicle, target_ped: Ped, destination_x: f32, destination_y: f32, destination_z: f32, mission_flag: i32, angular_drag: f32, unk: f32, target_heading: f32, max_z: f32, min_z: f32, p13: i32);
	native!(task_plane_taxi, 0x92C360B5F15D2302, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(task_boat_mission, 0x15C86013127CE63F, (), ped_driver: Ped, boat: Vehicle, p2: i32, p3: i32, x: f32, y: f32, z: f32, p7: i32, max_speed: f32, driving_style: i32, p10: f32, p11: i32);
	native!(task_drive_by, 0x2F8AF0E82773A171, (), driver_ped: Ped, target_ped: Ped, target_vehicle: Vehicle, target_x: f32, target_y: f32, target_z: f32, distance_to_shoot: f32, ped_accuracy: i32, p8: bool, firing_pattern: Hash);
	native!(set_driveby_task_target, 0xE5B302114D8162EE, (), shooting_ped: Ped, target_ped: Ped, target_vehicle: Vehicle, x: f32, y: f32, z: f32);
	native!(clear_driveby_task_underneath_driving_task, 0xC35B5CDB2824CF69, (), ped: Ped);
	native!(is_driveby_task_underneath_driving_task, 0x8785E6E40C7A8818, bool, ped: Ped);
	native!(control_mounted_weapon, 0xDCFE42068FE0135A, bool, ped: Ped);
	native!(set_mounted_weapon_target, 0xCCD892192C6D2BB9, (), shooting_ped: Ped, target_ped: Ped, target_vehicle: Vehicle, x: f32, y: f32, z: f32, p6: i32, p7: i32);
	native!(is_mounted_weapon_task_underneath_driving_task, 0xA320EF046186FA3B, bool, ped: Ped);
	native!(task_use_mobile_phone, 0xBD2A8EC3AF4DE7DB, (), ped: Ped, p1: i32, p2: i32);
	native!(task_use_mobile_phone_timed, 0x5EE02954A14C69DB, (), ped: Ped, duration: i32);
	native!(task_chat_to_ped, 0x8C338E0263E4FD19, (), ped: Ped, target: Ped, p2: i32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32);
	native!(task_warp_ped_into_vehicle, 0x9A7D091411C5F684, (), ped: Ped, vehicle: Vehicle, seat: i32);
	native!(task_shoot_at_entity, 0x08DA95E8298AE772, (), entity: Entity, target: Entity, duration: i32, firing_pattern: Hash);
	native!(task_climb, 0x89D9FCC2435112F1, (), ped: Ped, unused: bool);
	native!(task_climb_ladder, 0xB6C987F9285A3814, (), ped: Ped, p1: i32);
	native!(clear_ped_tasks_immediately, 0xAAA34F8A7CB32098, (), ped: Ped);
	native!(task_perform_sequence_from_progress, 0x89221B16730234F0, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(set_next_desired_move_state, 0xF1B9F16E89E2C93A, (), p0: f32);
	native!(set_ped_desired_move_blend_ratio, 0x1E982AC8716912C5, (), ped: Ped, p1: f32);
	native!(get_ped_desired_move_blend_ratio, 0x8517D4A6CA8513ED, f32, ped: Ped);
	native!(task_goto_entity_aiming, 0xA9DA48FAB8A76C12, (), ped: Ped, target: Entity, distance_to_stop_at: f32, start_aiming_dist: f32);
	native!(task_set_decision_maker, 0xEB8517DDA73720DA, (), ped: Ped, p1: Hash);
	native!(task_set_sphere_defensive_area, 0x933C06518B52A9A4, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: f32);
	native!(task_clear_defensive_area, 0x95A6C46A31D1917D, (), p0: i32);
	native!(task_ped_slide_to_coord, 0xD04FE6765D990A06, (), ped: Ped, x: f32, y: f32, z: f32, heading: f32, p5: f32);
	native!(task_ped_slide_to_coord_hdg_rate, 0x5A4A6A6D3DC64F52, (), ped: Ped, x: f32, y: f32, z: f32, heading: f32, p5: f32, p6: f32);
	native!(add_cover_point, 0xD5C12A75C7B9497F, ScrHandle, p0: f32, p1: f32, p2: f32, p3: f32, p4: i32, p5: i32, p6: i32, p7: bool);
	native!(remove_cover_point, 0xAE287C923D891715, (), coverpoint: ScrHandle);
	native!(does_scripted_cover_point_exist_at_coords, 0xA98B8E3C088E5A31, bool, x: f32, y: f32, z: f32);
	native!(get_scripted_cover_point_coords, 0x594A1028FC2A3E85, Vec3, coverpoint: ScrHandle);
	native!(task_combat_ped, 0xF166E48407BAC484, (), ped: Ped, target_ped: Ped, p2: i32, p3: i32);
	native!(task_combat_ped_timed, 0x944F30DCB7096BDE, (), p0: i32, ped: Ped, p2: i32, p3: i32);
	native!(task_seek_cover_from_pos, 0x75AC2B60386D89F2, (), ped: Ped, x: f32, y: f32, z: f32, duration: i32, p5: bool);
	native!(task_seek_cover_from_ped, 0x84D32B3BEC531324, (), ped: Ped, target: Ped, duration: i32, p3: bool);
	native!(task_seek_cover_to_cover_point, 0xD43D95C7A869447F, (), p0: i32, p1: i32, p2: f32, p3: f32, p4: f32, p5: i32, p6: bool);
	native!(task_seek_cover_to_coords, 0x39246A6958EF072C, (), ped: Ped, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, p7: i32, p8: bool);
	native!(task_put_ped_directly_into_cover, 0x4172393E6BE1FECE, (), ped: Ped, x: f32, y: f32, z: f32, timeout: i32, p5: bool, p6: f32, p7: bool, p8: bool, p9: i32, p10: bool);
	native!(task_exit_cover, 0x79B258E397854D29, (), p0: i32, p1: i32, p2: f32, p3: f32, p4: f32);
	native!(task_put_ped_directly_into_melee, 0x1C6CD14A876FFE39, (), ped: Ped, melee_target: Ped, p2: f32, p3: f32, p4: f32, p5: bool);
	native!(task_toggle_duck, 0xAC96609B9995EDF8, (), p0: bool, p1: bool);
	native!(task_guard_current_position, 0x4A58A47A72E3FCB4, (), p0: Ped, p1: f32, p2: f32, p3: bool);
	native!(task_guard_assigned_defensive_area, 0xD2A207EEBDF9889B, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: i32);
	native!(task_guard_sphere_defensive_area, 0xC946FE14BE0EB5E2, (), p0: Ped, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: i32, p7: f32, p8: f32, p9: f32, p10: f32);
	native!(task_stand_guard, 0xAE032F8BBA959E90, (), ped: Ped, x: f32, y: f32, z: f32, heading: f32, scenario_name: *const c_char);
	native!(set_drive_task_cruise_speed, 0x5C9B84BD7D31D908, (), driver: Ped, cruise_speed: f32);
	native!(set_drive_task_max_cruise_speed, 0x404A5AA9B9F0B746, (), p0: i32, p1: f32);
	native!(set_drive_task_driving_style, 0xDACE1BE37D88AF67, (), ped: Ped, driving_style: i32);
	native!(add_cover_blocking_area, 0x45C597097DD7CB81, (), player_x: f32, player_y: f32, player_z: f32, radius_x: f32, radius_y: f32, radius_z: f32, p6: bool, p7: bool, p8: bool, p9: bool);
	native!(remove_all_cover_blocking_areas, 0xDB6708C0B46F56D8, ());
	native!(_0xfa83ca6776038f64, 0xFA83CA6776038F64, (), x: f32, y: f32, z: f32);
	native!(_0x1f351cf1c6475734, 0x1F351CF1C6475734, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32, p9: i32);
	native!(task_start_scenario_in_place, 0x142A02425FF02BD9, (), ped: Ped, scenario_name: *const c_char, unk_delay: i32, play_enter_anim: bool);
	native!(task_start_scenario_at_position, 0xFA4EFC79F69D4F07, (), ped: Ped, scenario_name: *const c_char, x: f32, y: f32, z: f32, heading: f32, duration: i32, sitting_scenario: bool, teleport: bool);
	native!(task_use_nearest_scenario_to_coord, 0x277F471BA9DB000B, (), ped: Ped, x: f32, y: f32, z: f32, distance: f32, duration: i32);
	native!(task_use_nearest_scenario_to_coord_warp, 0x58E2E0F23F6B76C3, (), ped: Ped, x: f32, y: f32, z: f32, radius: f32, p5: i32);
	native!(task_use_nearest_scenario_chain_to_coord, 0x9FDA1B3D7E7028B3, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: f32, p5: i32);
	native!(task_use_nearest_scenario_chain_to_coord_warp, 0x97A28E63F0BA5631, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: f32, p5: i32);
	native!(does_scenario_exist_in_area, 0x5A59271FFADD33C1, bool, x: f32, y: f32, z: f32, radius: f32, b: bool);
	native!(does_scenario_of_type_exist_in_area, 0x0A9D0C2A3BBC86C1, bool, p0: f32, p1: f32, p2: f32, p3: &mut i32, p4: f32, p5: bool);
	native!(is_scenario_occupied, 0x788756D73AC2E07C, bool, p0: f32, p1: f32, p2: f32, p3: f32, p4: bool);
	native!(ped_has_use_scenario_task, 0x295E3CCEC879CCD7, bool, ped: Ped);
	native!(play_anim_on_running_scenario, 0x748040460F8DF5DC, (), ped: Ped, anim_dict: *const c_char, anim_name: *const c_char);
	native!(does_scenario_group_exist, 0xF9034C136C9E00D3, bool, scenario_group: *const c_char);
	native!(is_scenario_group_enabled, 0x367A09DED4E05B99, bool, scenario_group: *const c_char);
	native!(set_scenario_group_enabled, 0x02C8E5B49848664E, (), scenario_group: *const c_char, p1: bool);
	native!(reset_scenario_groups_enabled, 0xDD902D0349AFAD3A, ());
	native!(set_exclusive_scenario_group, 0x535E97E1F7FC0C6A, (), scenario_group: *const c_char);
	native!(reset_exclusive_scenario_group, 0x4202BBCB8684563D, ());
	native!(is_scenario_type_enabled, 0x3A815DB3EA088722, bool, scenario_type: *const c_char);
	native!(set_scenario_type_enabled, 0xEB47EC4E34FB7EE1, (), scenario_type: *const c_char, toggle: bool);
	native!(reset_scenario_types_enabled, 0x0D40EE2A7F2B2D6D, ());
	native!(is_ped_active_in_scenario, 0xAA135F9482C82CC3, bool, ped: Ped);
	native!(_0x621c6e4729388e41, 0x621C6E4729388E41, bool, ped: Ped);
	native!(set_ped_can_play_ambient_idles, 0x8FD89A6240813FD0, (), ped: Ped, p1: bool, p2: bool);
	native!(task_combat_hated_targets_in_area, 0x4CF5F55DAC3280A0, (), ped: Ped, x: f32, y: f32, z: f32, radius: f32, p5: i32);
	native!(task_combat_hated_targets_around_ped, 0x7BF835BB9E2698C8, (), ped: Ped, radius: f32, p2: i32);
	native!(task_combat_hated_targets_around_ped_timed, 0x2BBA30B854534A0C, (), p0: i32, p1: f32, p2: i32, p3: i32);
	native!(task_throw_projectile, 0x7285951DBF6B5A51, (), ped: Ped, x: f32, y: f32, z: f32, p4: i32, p5: i32);
	native!(task_swap_weapon, 0xA21C51255B205245, (), ped: Ped, p1: bool);
	native!(task_reload_weapon, 0x62D2916F56B9CD2D, (), ped: Ped, unused: bool);
	native!(is_ped_getting_up, 0x2A74E1D5F2F00EEC, bool, ped: Ped);
	native!(task_writhe, 0xCDDC2B77CE54AC6E, (), ped: Ped, target: Ped, time: i32, p3: i32, p4: i32, p5: i32);
	native!(is_ped_in_writhe, 0xDEB6D52126E7D640, bool, ped: Ped);
	native!(open_patrol_route, 0xA36BFB5EE89F3D82, (), patrol_route: *const c_char);
	native!(close_patrol_route, 0xB043ECA801B8CBC1, ());
	native!(add_patrol_route_node, 0x8EDF950167586B7C, (), p0: i32, p1: *const c_char, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, p8: i32);
	native!(add_patrol_route_link, 0x23083260DEC3A551, (), p0: i32, p1: i32);
	native!(create_patrol_route, 0xAF8A443CCC8018DC, ());
	native!(delete_patrol_route, 0x7767DD9D65E91319, (), patrol_route: *const c_char);
	native!(task_patrol, 0xBDA5DF49D080FE4E, (), ped: Ped, p1: *const c_char, p2: i32, p3: bool, p4: bool);
	native!(task_stay_in_cover, 0xE5DA8615A6180789, (), ped: Ped);
	native!(add_vehicle_subtask_attack_coord, 0x5CF0D8F9BBA0DD75, (), ped: Ped, x: f32, y: f32, z: f32);
	native!(add_vehicle_subtask_attack_ped, 0x85F462BADC7DA47F, (), ped: Ped, ped2: Ped);
	native!(task_vehicle_shoot_at_ped, 0x10AB107B887214D8, (), ped: Ped, target: Ped, p2: f32);
	native!(task_vehicle_aim_at_ped, 0xE41885592B08B097, (), ped: Ped, target: Ped);
	native!(task_vehicle_shoot_at_coord, 0x5190796ED39C9B6D, (), ped: Ped, x: f32, y: f32, z: f32, p4: f32);
	native!(task_vehicle_aim_at_coord, 0x447C1E9EF844BC0F, (), ped: Ped, x: f32, y: f32, z: f32);
	native!(task_vehicle_goto_navmesh, 0x195AEEB13CEFE2EE, (), ped: Ped, vehicle: Vehicle, x: f32, y: f32, z: f32, speed: f32, behavior_flag: i32, stopping_range: f32);
	native!(task_go_to_coord_while_aiming_at_coord, 0x11315AB3385B8AC0, (), ped: Ped, x: f32, y: f32, z: f32, aim_at_x: f32, aim_at_y: f32, aim_at_z: f32, move_speed: f32, p8: bool, p9: f32, p10: f32, p11: bool, flags: i32, p13: bool, firing_pattern: Hash);
	native!(task_go_to_coord_while_aiming_at_entity, 0xB2A16444EAD9AE47, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: i32, p5: f32, p6: bool, p7: f32, p8: f32, p9: bool, p10: i32, p11: bool, p12: i32, p13: i32);
	native!(task_go_to_coord_and_aim_at_hated_entities_near_coord, 0xA55547801EB331FC, (), ped_handle: Ped, go_to_location_x: f32, go_to_location_y: f32, go_to_location_z: f32, focus_location_x: f32, focus_location_y: f32, focus_location_z: f32, speed: f32, shoot_at_enemies: bool, distance_to_stop_at: f32, no_roads_distance: f32, unk_true: bool, unk_flag: i32, aiming_flag: i32, firing_pattern: Hash);
	native!(task_go_to_entity_while_aiming_at_coord, 0x04701832B739DCE5, (), p0: i32, p1: i32, p2: f32, p3: f32, p4: f32, p5: f32, p6: bool, p7: f32, p8: f32, p9: bool, p10: bool, p11: i32);
	native!(task_go_to_entity_while_aiming_at_entity, 0x97465886D35210E9, (), ped: Ped, entity_to_walk_to: Entity, entity_to_aim_at: Entity, speed: f32, shootat_entity: bool, p5: f32, p6: f32, p7: bool, p8: bool, firing_pattern: Hash);
	native!(set_high_fall_task, 0x8C825BDC7741D37C, (), ped: Ped, p1: i32, p2: i32, p3: i32);
	native!(request_waypoint_recording, 0x9EEFB62EB27B5792, (), name: *const c_char);
	native!(get_is_waypoint_recording_loaded, 0xCB4E8BE8A0063C5D, bool, name: *const c_char);
	native!(remove_waypoint_recording, 0xFF1B8B4AA1C25DC8, (), name: *const c_char);
	native!(waypoint_recording_get_num_points, 0x5343532C01A07234, bool, name: *const c_char, points: &mut i32);
	native!(waypoint_recording_get_coord, 0x2FB897405C90B361, bool, name: *const c_char, point: i32, coord: &mut Vec3);
	native!(waypoint_recording_get_speed_at_point, 0x005622AEBC33ACA9, f32, name: *const c_char, point: i32);
	native!(waypoint_recording_get_closest_waypoint, 0xB629A298081F876F, bool, name: *const c_char, x: f32, y: f32, z: f32, point: &mut i32);
	native!(task_follow_waypoint_recording, 0x0759591819534F7B, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(is_waypoint_playback_going_on_for_ped, 0xE03B3F2D3DC59B64, bool, p0: i32);
	native!(get_ped_waypoint_progress, 0x2720AAA75001E094, i32, ped: Ped);
	native!(get_ped_waypoint_distance, 0xE6A877C64CAF1BC5, f32, p0: i32);
	native!(set_ped_waypoint_route_offset, 0xED98E10B0AFCE4B4, i32, p0: i32, p1: i32, p2: i32, p3: i32);
	native!(get_waypoint_distance_along_route, 0xA5B769058763E497, f32, p0: *const c_char, p1: i32);
	native!(waypoint_playback_get_is_paused, 0x701375A7D43F01CB, bool, p0: i32);
	native!(waypoint_playback_pause, 0x0F342546AA06FED5, (), p0: i32, p1: bool, p2: bool);
	native!(waypoint_playback_resume, 0x244F70C84C547D2D, (), p0: i32, p1: bool, p2: i32, p3: i32);
	native!(waypoint_playback_override_speed, 0x7D7D2B47FA788E85, (), p0: i32, p1: f32, p2: bool);
	native!(waypoint_playback_use_default_speed, 0x6599D834B12D0800, (), p0: i32);
	native!(use_waypoint_recording_as_assisted_movement_route, 0x5A353B8E6B1095B5, (), p0: &mut i32, p1: bool, p2: f32, p3: f32);
	native!(waypoint_playback_start_aiming_at_ped, 0x20E330937C399D29, (), p0: i32, p1: i32, p2: bool);
	native!(waypoint_playback_start_aiming_at_coord, 0x8968400D900ED8B3, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: bool);
	native!(waypoint_playback_start_shooting_at_ped, 0xE70BA7B90F8390DC, (), p0: i32, p1: i32, p2: bool, p3: i32);
	native!(waypoint_playback_start_shooting_at_coord, 0x057A25CFCC9DB671, (), p0: i32, p1: f32, p2: f32, p3: f32, p4: bool, p5: i32);
	native!(waypoint_playback_stop_aiming_or_shooting, 0x47EFA040EBB8E2EA, (), p0: i32);
	native!(assisted_movement_request_route, 0x817268968605947A, (), route: *const c_char);
	native!(assisted_movement_remove_route, 0x3548536485DD792B, (), route: *const c_char);
	native!(assisted_movement_is_route_loaded, 0x60F9A4393A21F741, bool, route: *const c_char);
	native!(assisted_movement_set_route_properties, 0xD5002D78B7162E1B, (), route: *const c_char, props: i32);
	native!(assisted_movement_override_load_distance_this_frame, 0x13945951E16EF912, (), dist: f32);
	native!(task_vehicle_follow_waypoint_recording, 0x3123FAA6DB1CF7ED, (), ped: Ped, vehicle: Vehicle, wprecording: *const c_char, p3: i32, p4: i32, p5: i32, p6: i32, p7: f32, p8: bool, p9: f32);
	native!(is_waypoint_playback_going_on_for_vehicle, 0xF5134943EA29868C, bool, vehicle: Vehicle);
	native!(get_vehicle_waypoint_progress, 0x9824CFF8FC66E159, i32, vehicle: Vehicle);
	native!(get_vehicle_waypoint_target_point, 0x416B62AC8B9E5BBD, i32, vehicle: Vehicle);
	native!(vehicle_waypoint_playback_pause, 0x8A4E6AC373666BC5, (), vehicle: Vehicle);
	native!(vehicle_waypoint_playback_resume, 0xDC04FCAA7839D492, (), vehicle: Vehicle);
	native!(vehicle_waypoint_playback_use_default_speed, 0x5CEB25A7D2848963, (), vehicle: Vehicle);
	native!(vehicle_waypoint_playback_override_speed, 0x121F0593E0A431D7, (), vehicle: Vehicle, speed: f32);
	native!(task_set_blocking_of_non_temporary_events, 0x90D2156198831D69, (), ped: Ped, toggle: bool);
	native!(task_force_motion_state, 0x4F056E1AFFEF17AB, (), ped: Ped, state: Hash, p2: bool);
	native!(task_move_network_by_name, 0x2D537BA194896636, (), ped: Ped, task: *const c_char, multiplier: f32, p3: bool, anim_dict: *const c_char, flags: i32);
	native!(task_move_network_advanced_by_name, 0xD5B35BEA41919ACB, (), ped: Ped, p1: *const c_char, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: i32, p9: f32, p10: bool, anim_dict: *const c_char, flags: i32);
	native!(_task_move_network_by_name_with_init_params, 0x3D45B0B355C5E0C9, (), ped: Ped, p1: *const c_char, data: &mut i32, p3: f32, p4: bool, anim_dict: *const c_char, flags: i32);
	native!(is_task_move_network_active, 0x921CE12C489C4C41, bool, ped: Ped);
	native!(is_task_move_network_ready_for_transition, 0x30ED88D5E0C56A37, bool, ped: Ped);
	native!(request_task_move_network_state_transition, 0xD01015C7316AE176, bool, ped: Ped, name: *const c_char);
	native!(_0xab13a5565480b6d9, 0xAB13A5565480B6D9, i32, ped: Ped, p1: *const c_char);
	native!(get_task_move_network_state, 0x717E4D1F2048376D, *const c_char, ped: Ped);
	native!(_0x8423541e8b3a1589, 0x8423541E8B3A1589, (), p0: i32, p1: i32, p2: i32);
	native!(set_task_move_network_signal_float, 0xD5BB4025AE449A4E, (), ped: Ped, signal_name: *const c_char, value: f32);
	native!(_set_task_move_network_signal_float_2, 0x373EF409B82697A3, (), ped: Ped, signal_name: *const c_char, value: f32);
	native!(_0x8634cef2522d987b, 0x8634CEF2522D987B, (), ped: Ped, p1: *const c_char, value: f32);
	native!(set_task_move_network_signal_bool, 0xB0A6CFD2C69C1088, (), ped: Ped, signal_name: *const c_char, value: bool);
	native!(_get_task_move_network_signal_float, 0x44AB0B3AFECCE242, f32, ped: Ped, signal_name: *const c_char);
	native!(get_task_move_network_signal_bool, 0xA7FFBA498E4AAF67, bool, ped: Ped, signal_name: *const c_char);
	native!(get_task_move_network_event, 0xB4F47213DF45A64C, bool, ped: Ped, event_name: *const c_char);
	native!(is_move_blend_ratio_still, 0x349CE7B56DAFD95C, bool, ped: Ped);
	native!(is_move_blend_ratio_walking, 0xF133BBBE91E1691F, bool, ped: Ped);
	native!(is_move_blend_ratio_running, 0xD4D8636C0199A939, bool, ped: Ped);
	native!(is_move_blend_ratio_sprinting, 0x24A2AD74FA9814E2, bool, ped: Ped);
	native!(is_ped_still, 0xAC29253EEF8F0180, bool, ped: Ped);
	native!(is_ped_walking, 0xDE4C184B2B9B071A, bool, ped: Ped);
	native!(is_ped_running, 0xC5286FFC176F28A2, bool, ped: Ped);
	native!(is_ped_sprinting, 0x57E457CD2C0FC168, bool, ped: Ped);
	native!(is_ped_strafing, 0xE45B7F222DE47E09, bool, ped: Ped);
	native!(task_synchronized_scene, 0xEEA929141F699854, (), ped: Ped, scene: i32, anim_dictionary: *const c_char, animation_name: *const c_char, speed: f32, speed_multiplier: f32, duration: i32, flag: i32, playback_rate: f32, p9: i32);
	native!(task_agitated_action, 0x19D1B791CB3670FE, (), ped: Ped, ped2: Ped);
	native!(task_sweep_aim_entity, 0x2047C02158D6405A, (), ped: Ped, anim: *const c_char, p2: *const c_char, p3: *const c_char, p4: *const c_char, p5: i32, vehicle: Vehicle, p7: f32, p8: f32);
	native!(update_task_sweep_aim_entity, 0xE4973DBDBE6E44B3, (), ped: Ped, entity: Entity);
	native!(task_sweep_aim_position, 0x7AFE8FDC10BC07D2, (), p0: i32, p1: &mut i32, p2: &mut i32, p3: &mut i32, p4: &mut i32, p5: i32, p6: f32, p7: f32, p8: f32, p9: f32, p10: f32);
	native!(update_task_sweep_aim_position, 0xBB106883F5201FC4, (), p0: i32, p1: f32, p2: f32, p3: f32);
	native!(task_arrest_ped, 0xF3B9A78A178572B1, (), ped: Ped, target: Ped);
	native!(is_ped_running_arrest_task, 0x3DC52677769B4AE0, bool, ped: Ped);
	native!(is_ped_being_arrested, 0x90A09F3A45FED688, bool, ped: Ped);
	native!(uncuff_ped, 0x67406F2C8F87FC4F, (), ped: Ped);
	native!(is_ped_cuffed, 0x74E559B3BC910685, bool, ped: Ped);
}

pub mod vehicle {
	use super::*;

	native!(create_vehicle, 0xAF35D0D2583051B0, Vehicle, model_hash: Hash, x: f32, y: f32, z: f32, heading: f32, is_network: bool, net_mission_entity: bool, p7: bool);
	native!(delete_vehicle, 0xEA386986E786A54F, (), vehicle: &mut Vehicle);
	native!(_0x7d6f9a3ef26136a0, 0x7D6F9A3EF26136A0, (), vehicle: Vehicle, toggle: bool, p2: bool);
	native!(_set_vehicle_can_be_locked_on, 0x1DDA078D12879EEE, (), vehicle: Vehicle, can_be_locked_on: bool, unk: bool);
	native!(set_vehicle_allow_no_passengers_lockon, 0x5D14D4154BFE7B2C, (), veh: Vehicle, toggle: bool);
	native!(_0xe6b0e8cfc3633bf0, 0xE6B0E8CFC3633BF0, i32, vehicle: Vehicle);
	native!(_0x6eaaefc76acc311f, 0x6EAAEFC76ACC311F, i32, p0: i32);
	native!(_0x407dc5e97db1a4d3, 0x407DC5E97DB1A4D3, (), p0: i32, p1: i32);
	native!(is_vehicle_model, 0x423E8DE37D934D89, bool, vehicle: Vehicle, model: Hash);
	native!(does_script_vehicle_generator_exist, 0xF6086BC836400876, bool, vehicle_generator: i32);
	native!(create_script_vehicle_generator, 0x9DEF883114668116, i32, x: f32, y: f32, z: f32, heading: f32, p4: f32, p5: f32, model_hash: Hash, p7: i32, p8: i32, p9: i32, p10: i32, p11: bool, p12: bool, p13: bool, p14: bool, p15: bool, p16: i32);
	native!(delete_script_vehicle_generator, 0x22102C9ABFCF125D, (), vehicle_generator: i32);
	native!(set_script_vehicle_generator, 0xD9D620E0AC6DC4B0, (), vehicle_generator: i32, enabled: bool);
	native!(set_all_vehicle_generators_active_in_area, 0xC12321827687FE4D, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, p6: bool, p7: bool);
	native!(set_all_vehicle_generators_active, 0x34AD89078831A4BC, ());
	native!(set_all_low_priority_vehicle_generators_active, 0x608207E7A8FB787C, (), active: bool);
	native!(_0x9a75585fb2e54fad, 0x9A75585FB2E54FAD, (), x: f32, y: f32, z: f32, p3: f32);
	native!(_0x0a436b8643716d14, 0x0A436B8643716D14, ());
	native!(set_vehicle_on_ground_properly, 0x49733E92263139D1, bool, vehicle: Vehicle, p1: f32);
	native!(set_vehicle_use_cutscene_wheel_compression, 0xE023E8AC4EF7C117, i32, p0: Vehicle, p1: bool, p2: bool, p3: bool);
	native!(is_vehicle_stuck_on_roof, 0xB497F06B288DCFDF, bool, vehicle: Vehicle);
	native!(add_vehicle_upsidedown_check, 0xB72E26D81006005B, (), vehicle: Vehicle);
	native!(remove_vehicle_upsidedown_check, 0xC53EB42A499A7E90, (), vehicle: Vehicle);
	native!(is_vehicle_stopped, 0x5721B434AD84D57A, bool, vehicle: Vehicle);
	native!(get_vehicle_number_of_passengers, 0x24CB2137731FFE89, i32, vehicle: Vehicle);
	native!(get_vehicle_max_number_of_passengers, 0xA7C4F2C6E744A550, i32, vehicle: Vehicle);
	native!(get_vehicle_model_number_of_seats, 0x2AD93716F184EDA4, i32, model_hash: Hash);
	native!(is_seat_warp_only, 0xF7F203E31F96F6A1, bool, vehicle: Vehicle, seat_index: i32);
	native!(is_turret_seat, 0xE33FFA906CE74880, bool, vehicle: Vehicle, seat_index: i32);
	native!(_does_vehicle_allow_rappel, 0x4E417C547182C84D, bool, vehicle: Vehicle);
	native!(set_vehicle_density_multiplier_this_frame, 0x245A6883D966D537, (), multiplier: f32);
	native!(set_random_vehicle_density_multiplier_this_frame, 0xB3B3359379FE77D3, (), multiplier: f32);
	native!(set_parked_vehicle_density_multiplier_this_frame, 0xEAE6DCC7EEE3DB1D, (), multiplier: f32);
	native!(set_disable_random_trains_this_frame, 0xD4B8E3D1917BC86B, (), toggle: bool);
	native!(set_ambient_vehicle_range_multiplier_this_frame, 0x90B6DA738A9A25DA, (), value: f32);
	native!(set_far_draw_vehicles, 0x26324F33423F3CC3, (), toggle: bool);
	native!(set_number_of_parked_vehicles, 0xCAA15F13EBD417FF, (), value: i32);
	native!(set_vehicle_doors_locked, 0xB664292EAECF7FA6, (), vehicle: Vehicle, door_lock_status: i32);
	native!(_set_vehicle_door_destroy_type, 0xBE70724027F85BCD, (), vehicle: Vehicle, door_index: i32, destroy_type: i32);
	native!(set_vehicle_has_muted_sirens, 0xD8050E0EB60CF274, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_doors_locked_for_player, 0x517AAF684BB50CD1, (), vehicle: Vehicle, player: Player, toggle: bool);
	native!(get_vehicle_doors_locked_for_player, 0xF6AF6CB341349015, bool, vehicle: Vehicle, player: Player);
	native!(set_vehicle_doors_locked_for_all_players, 0xA2F80B8D040727CC, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_doors_locked_for_non_script_players, 0x9737A37136F07E75, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_doors_locked_for_team, 0xB81F6D4A8F5EEBA8, (), vehicle: Vehicle, team: i32, toggle: bool);
	native!(_set_vehicle_doors_locked_for_unk, 0x203B527D1B77904C, (), vehicle: Vehicle, toggle: bool);
	native!(_0x76d26a22750e849e, 0x76D26A22750E849E, (), vehicle: Vehicle);
	native!(explode_vehicle, 0xBA71116ADF5B514C, (), vehicle: Vehicle, is_audible: bool, is_invisible: bool);
	native!(set_vehicle_out_of_control, 0xF19D095E42D430CC, (), vehicle: Vehicle, kill_driver: bool, explode_on_impact: bool);
	native!(set_vehicle_timed_explosion, 0x2E0A74E1002380B1, (), vehicle: Vehicle, ped: Ped, toggle: bool);
	native!(add_vehicle_phone_explosive_device, 0x99AD4CCCB128CBC9, (), vehicle: Vehicle);
	native!(_clear_vehicle_phone_explosive_device, 0xAA3F739ABDDCF21F, ());
	native!(has_vehicle_phone_explosive_device, 0x6ADAABD3068C5235, bool);
	native!(detonate_vehicle_phone_explosive_device, 0xEF49CF0270307CBE, ());
	native!(set_taxi_lights, 0x598803E85E8448D9, (), vehicle: Vehicle, state: bool);
	native!(is_taxi_light_on, 0x7504C0F113AB50FC, bool, vehicle: Vehicle);
	native!(is_vehicle_in_garage_area, 0xCEE4490CD57BB3C2, bool, garage_name: *const c_char, vehicle: Vehicle);
	native!(set_vehicle_colours, 0x4F1D4BE3A7F24601, (), vehicle: Vehicle, color_primary: i32, color_secondary: i32);
	native!(set_vehicle_fullbeam, 0x8B7FD87F0DDB421E, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_is_racing, 0x07116E24E9D1929D, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_custom_primary_colour, 0x7141766F91D15BEA, (), vehicle: Vehicle, r: i32, g: i32, b: i32);
	native!(get_vehicle_custom_primary_colour, 0xB64CF2CCA9D95F52, (), vehicle: Vehicle, r: &mut i32, g: &mut i32, b: &mut i32);
	native!(clear_vehicle_custom_primary_colour, 0x55E1D2758F34E437, (), vehicle: Vehicle);
	native!(get_is_vehicle_primary_colour_custom, 0xF095C0405307B21B, bool, vehicle: Vehicle);
	native!(set_vehicle_custom_secondary_colour, 0x36CED73BFED89754, (), vehicle: Vehicle, r: i32, g: i32, b: i32);
	native!(get_vehicle_custom_secondary_colour, 0x8389CD56CA8072DC, (), vehicle: Vehicle, r: &mut i32, g: &mut i32, b: &mut i32);
	native!(clear_vehicle_custom_secondary_colour, 0x5FFBDEEC3E8E2009, (), vehicle: Vehicle);
	native!(get_is_vehicle_secondary_colour_custom, 0x910A32E7AAD2656C, bool, vehicle: Vehicle);
	native!(set_vehicle_enveff_scale, 0x3AFDC536C3D01674, (), vehicle: Vehicle, fade: f32);
	native!(get_vehicle_enveff_scale, 0xA82819CAC9C4C403, f32, vehicle: Vehicle);
	native!(set_can_respray_vehicle, 0x52BBA29D5EC69356, (), vehicle: Vehicle, state: bool);
	native!(_0xab31ef4de6800ce9, 0xAB31EF4DE6800CE9, (), p0: i32, p1: i32);
	native!(_0x1b212b26dd3c04df, 0x1B212B26DD3C04DF, (), vehicle: Vehicle, toggle: bool);
	native!(force_submarine_surface_mode, 0x33506883545AC0DF, (), vehicle: Vehicle, toggle: bool);
	native!(set_submarine_crush_depths, 0xC59872A5134879C7, (), vehicle: Vehicle, p1: bool, depth1: f32, depth2: f32, depth3: f32);
	native!(_0xed5ede9e676643c9, 0xED5EDE9E676643C9, (), p0: i32, p1: i32);
	native!(set_boat_anchor, 0x75DBEC174AEEAD10, (), vehicle: Vehicle, toggle: bool);
	native!(can_anchor_boat_here, 0x26C10ECBDA5D043B, bool, vehicle: Vehicle);
	native!(_can_anchor_boat_here_2, 0x24F4121D07579880, bool, vehicle: Vehicle);
	native!(_set_boat_frozen_when_anchored, 0xE3EBAAE484798530, (), vehicle: Vehicle, toggle: bool);
	native!(_0xb28b1fe5bfadd7f5, 0xB28B1FE5BFADD7F5, (), vehicle: Vehicle, p1: bool);
	native!(_set_boat_movement_resistance, 0xE842A9398079BD82, (), vehicle: Vehicle, value: f32);
	native!(_is_boat_anchored_and_frozen, 0xB0AD1238A709B1A2, bool, vehicle: Vehicle);
	native!(set_boat_sinks_when_wrecked, 0x8F719973E1445BA2, (), vehicle: Vehicle, toggle: bool);
	native!(_set_boat_is_sinking, 0xBD32E46AA95C1DD2, (), p0: i32);
	native!(set_vehicle_siren, 0xF4924635A19EB37D, (), vehicle: Vehicle, toggle: bool);
	native!(is_vehicle_siren_on, 0x4C9BF537BE2634B2, bool, vehicle: Vehicle);
	native!(is_vehicle_siren_audio_on, 0xB5CC40FBCB586380, bool, vehicle: Vehicle);
	native!(set_vehicle_strong, 0x3E8C8727991A8A0B, (), vehicle: Vehicle, toggle: bool);
	native!(remove_vehicle_stuck_check, 0x8386BFB614D06749, (), vehicle: Vehicle);
	native!(get_vehicle_colours, 0xA19435F193E081AC, (), vehicle: Vehicle, color_primary: &mut i32, color_secondary: &mut i32);
	native!(is_vehicle_seat_free, 0x22AC59A870E6A669, bool, vehicle: Vehicle, seat_index: i32, p2: bool);
	native!(get_ped_in_vehicle_seat, 0xBB40DD2270B65366, Ped, vehicle: Vehicle, index: i32, p2: i32);
	native!(get_last_ped_in_vehicle_seat, 0x83F969AA1EE2A664, Ped, vehicle: Vehicle, seat_index: i32);
	native!(get_vehicle_lights_state, 0xB91B4C20085BD12F, bool, vehicle: Vehicle, lights_on: &mut bool, highbeams_on: &mut bool);
	native!(is_vehicle_tyre_burst, 0xBA291848A0815CA9, bool, vehicle: Vehicle, wheel_id: i32, completely: bool);
	native!(set_vehicle_forward_speed, 0xAB54A438726D25D5, (), vehicle: Vehicle, speed: f32);
	native!(_0x6501129c9e0ffa05, 0x6501129C9E0FFA05, (), p0: i32, p1: i32);
	native!(bring_vehicle_to_halt, 0x260BE8F09E326A20, (), vehicle: Vehicle, distance: f32, duration: i32, unknown: bool);
	native!(_0xdce97bdf8a0eabc8, 0xDCE97BDF8A0EABC8, (), p0: i32, p1: i32);
	native!(_0x9849de24fcf23ccc, 0x9849DE24FCF23CCC, (), p0: i32, p1: i32);
	native!(_0x7c06330bfdda182e, 0x7C06330BFDDA182E, (), p0: i32);
	native!(_0xc69bb1d832a710ef, 0xC69BB1D832A710EF, i32, p0: i32);
	native!(set_forklift_fork_height, 0x37EBBF3117BD6A25, (), vehicle: Vehicle, height: f32);
	native!(is_entity_attached_to_handler_frame, 0x57715966069157AD, bool, vehicle: Vehicle, entity: Entity);
	native!(_0x62ca17b74c435651, 0x62CA17B74C435651, bool, vehicle: Vehicle);
	native!(_find_vehicle_carrying_this_entity, 0x375E7FC44F21C8AB, Vehicle, entity: Entity);
	native!(_is_handler_frame_above_container, 0x89D630CF5EA96D23, bool, vehicle: Vehicle, entity: Entity);
	native!(_0x6a98c2ecf57fa5d4, 0x6A98C2ECF57FA5D4, (), vehicle: Vehicle, entity: Entity);
	native!(detach_container_from_handler_frame, 0x7C0043FDFF6436BC, (), vehicle: Vehicle);
	native!(_0x8aa9180de2fedd45, 0x8AA9180DE2FEDD45, (), vehicle: Vehicle, p1: bool);
	native!(set_boat_disable_avoidance, 0x0A6A279F3AA4FD70, (), vehicle: Vehicle, p1: bool);
	native!(is_heli_landing_area_blocked, 0x634148744F385576, bool, vehicle: Vehicle);
	native!(_0x107a473d7a6647a9, 0x107A473D7A6647A9, (), p0: i32);
	native!(set_heli_turbulence_scalar, 0xE6F13851780394DA, (), vehicle: Vehicle, p1: f32);
	native!(set_car_boot_open, 0xFC40CBF7B90CA77C, (), vehicle: Vehicle);
	native!(set_vehicle_tyre_burst, 0xEC6A202EE4960385, (), vehicle: Vehicle, index: i32, on_rim: bool, p3: f32);
	native!(set_vehicle_doors_shut, 0x781B3D62BB013EF5, (), vehicle: Vehicle, close_instantly: bool);
	native!(set_vehicle_tyres_can_burst, 0xEB9DC3C7D8596C46, (), vehicle: Vehicle, toggle: bool);
	native!(get_vehicle_tyres_can_burst, 0x678B9BB8C3F58FEB, bool, vehicle: Vehicle);
	native!(set_vehicle_wheels_can_break, 0x29B18B4FD460CA8F, (), vehicle: Vehicle, enabled: bool);
	native!(set_vehicle_door_open, 0x7C65DAC73C35C862, (), vehicle: Vehicle, door_index: i32, loose: bool, open_instantly: bool);
	native!(_0x3b458ddb57038f08, 0x3B458DDB57038F08, (), p0: i32, p1: i32, p2: i32);
	native!(_0xa247f9ef01d8082e, 0xA247F9EF01D8082E, (), p0: i32);
	native!(remove_vehicle_window, 0xA711568EEDB43069, (), vehicle: Vehicle, window_index: i32);
	native!(roll_down_windows, 0x85796B0549DDE156, (), vehicle: Vehicle);
	native!(roll_down_window, 0x7AD9E6CE657D69E3, (), vehicle: Vehicle, window_index: i32);
	native!(roll_up_window, 0x602E548F46E24D59, (), vehicle: Vehicle, window_index: i32);
	native!(smash_vehicle_window, 0x9E5B5E4D2CCD2259, (), vehicle: Vehicle, index: i32);
	native!(fix_vehicle_window, 0x772282EBEB95E682, (), vehicle: Vehicle, index: i32);
	native!(_detach_vehicle_windscreen, 0x6D645D59FB5F5AD3, (), vehicle: Vehicle);
	native!(_eject_jb700_roof, 0xE38CB9D7D39FDBCC, (), vehicle: Vehicle, x: f32, y: f32, z: f32);
	native!(set_vehicle_lights, 0x34E710FF01247C5A, (), vehicle: Vehicle, state: i32);
	native!(_set_vehicle_use_player_light_settings, 0xC45C27EF50F36ADC, (), vehicle: Vehicle, p1: bool);
	native!(_set_vehicle_lights_mode, 0x1FD09E7390A74D54, (), vehicle: Vehicle, p1: i32);
	native!(set_vehicle_alarm, 0xCDE5E70C1DDB954C, (), vehicle: Vehicle, state: bool);
	native!(start_vehicle_alarm, 0xB8FF7AB45305C345, (), vehicle: Vehicle);
	native!(is_vehicle_alarm_activated, 0x4319E335B71FFF34, bool, vehicle: Vehicle);
	native!(set_vehicle_interiorlight, 0xBC2042F090AF6AD3, (), vehicle: Vehicle, toggle: bool);
	native!(_0x8821196d91fa2de5, 0x8821196D91FA2DE5, (), p0: i32, p1: i32);
	native!(set_vehicle_light_multiplier, 0xB385454F8791F57C, (), vehicle: Vehicle, multiplier: f32);
	native!(attach_vehicle_to_trailer, 0x3C7D42D58F770B54, (), vehicle: Vehicle, trailer: Vehicle, radius: f32);
	native!(attach_vehicle_on_to_trailer, 0x16B5E274BDE402F8, (), vehicle: Vehicle, trailer: Vehicle, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: f32, p10: f32, p11: f32);
	native!(stabilise_entity_attached_to_heli, 0x374706271354CB18, (), vehicle: Vehicle, entity: Entity, p2: f32);
	native!(detach_vehicle_from_trailer, 0x90532EDF0D2BDD86, (), vehicle: Vehicle);
	native!(is_vehicle_attached_to_trailer, 0xE7CF3C4F9F489F0C, bool, vehicle: Vehicle);
	native!(set_trailer_inverse_mass_scale, 0x2A8F319B392E7B3F, (), vehicle: Vehicle, p1: f32);
	native!(set_trailer_legs_raised, 0x95CF53B3D687F9FA, (), vehicle: Vehicle);
	native!(_set_trailer_legs_lowered, 0x878C75C09FBDB942, (), p0: i32);
	native!(set_vehicle_tyre_fixed, 0x6E13FC662B882D1D, (), vehicle: Vehicle, tyre_index: i32);
	native!(set_vehicle_number_plate_text, 0x95A88F0B409CDA47, (), vehicle: Vehicle, plate_text: *const c_char);
	native!(get_vehicle_number_plate_text, 0x7CE1CCB9B293020E, *const c_char, vehicle: Vehicle);
	native!(get_number_of_vehicle_number_plates, 0x4C4D6B2644F458CB, i32);
	native!(set_vehicle_number_plate_text_index, 0x9088EB5A43FFB0A1, (), vehicle: Vehicle, plate_index: i32);
	native!(get_vehicle_number_plate_text_index, 0xF11BC2DD9A3E7195, i32, vehicle: Vehicle);
	native!(set_random_trains, 0x80D9F74197EA47D9, (), toggle: bool);
	native!(create_mission_train, 0x63C6CCA8E68AE8C8, Vehicle, variation: i32, x: f32, y: f32, z: f32, direction: bool);
	native!(switch_train_track, 0xFD813BB7DB977F20, (), intersection_id: i32, state: bool);
	native!(set_train_track_spawn_frequency, 0x21973BBF8D17EDFA, (), track_index: i32, frequency: i32);
	native!(delete_all_trains, 0x736A718577F39C7D, ());
	native!(set_train_speed, 0xAA0BC91BE0B796E3, (), train: Vehicle, speed: f32);
	native!(set_train_cruise_speed, 0x16469284DB8C62B5, (), train: Vehicle, speed: f32);
	native!(set_random_boats, 0x84436EC293B1415F, (), toggle: bool);
	native!(set_garbage_trucks, 0x2AFD795EEAC8D30D, (), toggle: bool);
	native!(does_vehicle_have_stuck_vehicle_check, 0x57E4C39DE5EE8470, bool, vehicle: Vehicle);
	native!(get_vehicle_recording_id, 0x21543C612379DB3C, i32, p0: i32, p1: *const c_char);
	native!(request_vehicle_recording, 0xAF514CABE74CBF15, (), i: i32, name: *const c_char);
	native!(has_vehicle_recording_been_loaded, 0x300D614A4C785FC4, bool, p0: i32, p1: &mut i32);
	native!(remove_vehicle_recording, 0xF1160ACCF98A3FC8, (), p0: i32, p1: &mut i32);
	native!(get_position_of_vehicle_recording_id_at_time, 0x92523B76657A517D, Vec3, id: i32, time: f32);
	native!(get_position_of_vehicle_recording_at_time, 0xD242728AA6F0FBA2, Vec3, p0: i32, p1: f32, p2: *const c_char);
	native!(get_rotation_of_vehicle_recording_id_at_time, 0xF0F2103EFAF8CBA7, Vec3, id: i32, time: f32);
	native!(get_rotation_of_vehicle_recording_at_time, 0x2058206FBE79A8AD, Vec3, p0: i32, p1: f32, p2: &mut i32);
	native!(get_total_duration_of_vehicle_recording_id, 0x102D125411A7B6E6, f32, p0: i32);
	native!(get_total_duration_of_vehicle_recording, 0x0E48D1C262390950, f32, p0: i32, p1: i32);
	native!(get_position_in_recording, 0x2DACD605FC681475, f32, p0: i32);
	native!(get_time_position_in_recording, 0x5746F3A7AB7FE544, f32, p0: i32);
	native!(start_playback_recorded_vehicle, 0x3F878F92B3A7A071, (), vehicle: Vehicle, p1: i32, playback: *const c_char, p3: bool);
	native!(start_playback_recorded_vehicle_with_flags, 0x7D80FD645D4DA346, (), vehicle: Vehicle, p1: i32, playback: *const c_char, p3: i32, p4: i32, p5: i32);
	native!(_0x1f2e4e06dea8992b, 0x1F2E4E06DEA8992B, (), vehicle: Vehicle, p1: bool);
	native!(stop_playback_recorded_vehicle, 0x54833611C17ABDEA, (), vehicle: Vehicle);
	native!(pause_playback_recorded_vehicle, 0x632A689BF42301B1, (), vehicle: Vehicle);
	native!(unpause_playback_recorded_vehicle, 0x8879EE09268305D5, (), vehicle: Vehicle);
	native!(is_playback_going_on_for_vehicle, 0x1C8A4C2C19E68EEC, bool, vehicle: Vehicle);
	native!(is_playback_using_ai_going_on_for_vehicle, 0xAEA8FD591FAD4106, bool, vehicle: Vehicle);
	native!(get_current_playback_for_vehicle, 0x42BC05C27A946054, i32, vehicle: Vehicle);
	native!(skip_to_end_and_stop_playback_recorded_vehicle, 0xAB8E2EDA0C0A5883, (), vehicle: Vehicle);
	native!(set_playback_speed, 0x6683AB880E427778, (), vehicle: Vehicle, speed: f32);
	native!(start_playback_recorded_vehicle_using_ai, 0x29DE5FA52D00428C, (), p0: i32, p1: i32, p2: &mut i32, p3: f32, p4: i32);
	native!(skip_time_in_playback_recorded_vehicle, 0x9438F7AD68771A20, (), p0: i32, p1: f32);
	native!(set_playback_to_use_ai, 0xA549C3B37EA28131, (), vehicle: Vehicle, flag: i32);
	native!(set_playback_to_use_ai_try_to_revert_back_later, 0x6E63860BBB190730, (), p0: i32, p1: i32, p2: i32, p3: bool);
	native!(_0x5845066d8a1ea7f7, 0x5845066D8A1EA7F7, (), vehicle: Vehicle, x: f32, y: f32, z: f32, p4: i32);
	native!(_0x796a877e459b99ea, 0x796A877E459B99EA, (), p0: i32, p1: f32, p2: f32, p3: f32);
	native!(_0xfaf2a78061fd9ef4, 0xFAF2A78061FD9EF4, (), p0: i32, p1: f32, p2: f32, p3: f32);
	native!(_0x063ae2b2cc273588, 0x063AE2B2CC273588, (), p0: i32, p1: bool);
	native!(explode_vehicle_in_cutscene, 0x786A4EB67B01BF0B, (), vehicle: Vehicle, p1: bool);
	native!(add_vehicle_stuck_check_with_warp, 0x2FA9923062DD396C, (), p0: i32, p1: f32, p2: i32, p3: bool, p4: bool, p5: bool, p6: i32);
	native!(set_vehicle_model_is_suppressed, 0x0FC2D89AC25A5814, (), model: Hash, suppressed: bool);
	native!(get_random_vehicle_in_sphere, 0x386F6CE5BAF6091C, Vehicle, x: f32, y: f32, z: f32, radius: f32, model_hash: Hash, flags: i32);
	native!(get_random_vehicle_front_bumper_in_sphere, 0xC5574E0AEB86BA68, Vehicle, p0: f32, p1: f32, p2: f32, p3: f32, p4: i32, p5: i32, p6: i32);
	native!(get_random_vehicle_back_bumper_in_sphere, 0xB50807EABE20A8DC, Vehicle, p0: f32, p1: f32, p2: f32, p3: f32, p4: i32, p5: i32, p6: i32);
	native!(get_closest_vehicle, 0xF73EB622C4F1689B, Vehicle, x: f32, y: f32, z: f32, radius: f32, model_hash: Hash, flags: i32);
	native!(get_train_carriage, 0x08AAFD0814722BC3, Entity, train: Vehicle, trailer_number: i32);
	native!(delete_mission_train, 0x5B76B14AE875C795, (), train: &mut Vehicle);
	native!(set_mission_train_as_no_longer_needed, 0xBBE7648349B49BE8, (), train: &mut Vehicle, p1: bool);
	native!(set_mission_train_coords, 0x591CA673AA6AB736, (), train: Vehicle, x: f32, y: f32, z: f32);
	native!(is_this_model_a_boat, 0x45A9187928F4B9E3, bool, model: Hash);
	native!(is_this_model_a_jetski, 0x9537097412CF75FE, bool, model: Hash);
	native!(is_this_model_a_plane, 0xA0948AB42D7BA0DE, bool, model: Hash);
	native!(is_this_model_a_heli, 0xDCE4334788AF94EA, bool, model: Hash);
	native!(is_this_model_a_car, 0x7F6DB52EEFC96DF8, bool, model: Hash);
	native!(is_this_model_a_train, 0xAB935175B22E822B, bool, model: Hash);
	native!(is_this_model_a_bike, 0xB50C0B0CEDC6CE84, bool, model: Hash);
	native!(is_this_model_a_bicycle, 0xBF94DD42F63BDED2, bool, model: Hash);
	native!(is_this_model_a_quadbike, 0x39DAC362EE65FA28, bool, model: Hash);
	native!(_is_this_model_an_amphibious_car, 0x633F6F44A537EBB6, bool, model: Hash);
	native!(_is_this_model_an_amphibious_quadbike, 0xA1A9FC1C76A6730D, bool, model: Hash);
	native!(set_heli_blades_full_speed, 0xA178472EBB8AE60D, (), vehicle: Vehicle);
	native!(set_heli_blades_speed, 0xFD280B4D7F3ABC4D, (), vehicle: Vehicle, speed: f32);
	native!(_0x99cad8e7afdb60fa, 0x99CAD8E7AFDB60FA, (), vehicle: Vehicle, p1: f32, p2: f32);
	native!(set_vehicle_can_be_targetted, 0x3750146A28097A82, (), vehicle: Vehicle, state: bool);
	native!(_0xdbc631f109350b8c, 0xDBC631F109350B8C, (), vehicle: Vehicle, p1: bool);
	native!(set_vehicle_can_be_visibly_damaged, 0x4C7028F78FFD3681, (), vehicle: Vehicle, state: bool);
	native!(_set_vehicle_lights_can_be_visibly_damaged, 0x1AA8A837D2169D94, (), vehicle: Vehicle, p1: bool);
	native!(_0x2311dd7159f00582, 0x2311DD7159F00582, (), vehicle: Vehicle, p1: bool);
	native!(_0x065d03a9d6b2c6b5, 0x065D03A9D6B2C6B5, (), p0: i32, p1: i32);
	native!(get_vehicle_dirt_level, 0x8F17BC8BA08DA62B, f32, vehicle: Vehicle);
	native!(set_vehicle_dirt_level, 0x79D3B596FE44EE8B, (), vehicle: Vehicle, dirt_level: f32);
	native!(_is_vehicle_damaged, 0xBCDC5017D3CE1E9E, bool, vehicle: Vehicle);
	native!(is_vehicle_door_fully_open, 0x3E933CFF7B111C22, bool, vehicle: Vehicle, door_index: i32);
	native!(set_vehicle_engine_on, 0x2497C4717C8B881E, (), vehicle: Vehicle, value: bool, instantly: bool, no_auto_turn_on: bool);
	native!(set_vehicle_undriveable, 0x8ABA6AF54B942B95, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_provides_cover, 0x5AFEEDD9BB2899D7, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_door_control, 0xF2BFA0430F0A0FCB, (), vehicle: Vehicle, door_index: i32, speed: i32, angle: f32);
	native!(set_vehicle_door_latched, 0xA5A9653A8D2CAF48, (), vehicle: Vehicle, door_index: i32, p2: bool, p3: bool, p4: bool);
	native!(get_vehicle_door_angle_ratio, 0xFE3F9C29F7B32BD5, f32, vehicle: Vehicle, door: i32);
	native!(get_ped_using_vehicle_door, 0x218297BF0CFD853B, Ped, vehicle: Vehicle, door_index: i32);
	native!(set_vehicle_door_shut, 0x93D9BD300D7789E5, (), vehicle: Vehicle, door_index: i32, close_instantly: bool);
	native!(set_vehicle_door_broken, 0xD4D4F6A4AB575A33, (), vehicle: Vehicle, door_index: i32, delete_door: bool);
	native!(set_vehicle_can_break, 0x59BF8C3D52C92F66, (), vehicle: Vehicle, toggle: bool);
	native!(does_vehicle_have_roof, 0x8AC862B0B32C5B80, bool, vehicle: Vehicle);
	native!(_0xc4b3347bd68bd609, 0xC4B3347BD68BD609, (), p0: i32);
	native!(_0xd3301660a57c9272, 0xD3301660A57C9272, (), p0: i32);
	native!(_0xb9562064627ff9db, 0xB9562064627FF9DB, (), p0: i32, p1: i32);
	native!(is_big_vehicle, 0x9F243D3919F442FE, bool, vehicle: Vehicle);
	native!(get_number_of_vehicle_colours, 0x3B963160CD65D41E, i32, vehicle: Vehicle);
	native!(set_vehicle_colour_combination, 0x33E8CD3322E2FE31, (), vehicle: Vehicle, color_combination: i32);
	native!(get_vehicle_colour_combination, 0x6A842D197F845D56, i32, vehicle: Vehicle);
	native!(_set_vehicle_xenon_lights_color, 0xE41033B25D003A07, (), vehicle: Vehicle, color_index: i32);
	native!(_get_vehicle_xenon_lights_color, 0x3DFF319A831E0CDB, i32, vehicle: Vehicle);
	native!(set_vehicle_is_considered_by_player, 0x31B927BBC44156CD, (), vehicle: Vehicle, toggle: bool);
	native!(_0xbe5c1255a1830ff5, 0xBE5C1255A1830FF5, (), vehicle: Vehicle, toggle: bool);
	native!(_0x9becd4b9fef3f8a6, 0x9BECD4B9FEF3F8A6, (), vehicle: Vehicle, p1: bool);
	native!(_0x88bc673ca9e0ae99, 0x88BC673CA9E0AE99, (), vehicle: Vehicle, p1: bool);
	native!(_0xe851e480b814d4ba, 0xE851E480B814D4BA, (), vehicle: Vehicle, p1: bool);
	native!(get_random_vehicle_model_in_memory, 0x055BF0AC0C34F4FD, (), p0: bool, model_hash: &mut Hash, success_indicator: &mut i32);
	native!(get_vehicle_door_lock_status, 0x25BC98A59C2EA962, i32, vehicle: Vehicle);
	native!(_0xca4ac3eaae46ec7b, 0xCA4AC3EAAE46EC7B, i32, p0: i32, p1: i32);
	native!(is_vehicle_door_damaged, 0xB8E181E559464527, bool, veh: Vehicle, door_id: i32);
	native!(_set_vehicle_door_can_break, 0x2FA133A4A9D37ED8, (), vehicle: Vehicle, door_index: i32, is_breakable: bool);
	native!(is_vehicle_bumper_bouncing, 0x27B926779DEB502D, bool, vehicle: Vehicle, front_bumper: bool);
	native!(is_vehicle_bumper_broken_off, 0x468056A6BB6F3846, bool, vehicle: Vehicle, front: bool);
	native!(is_cop_vehicle_in_area_3d, 0x7EEF65D5F153E26A, bool, x1: f32, x2: f32, y1: f32, y2: f32, z1: f32, z2: f32);
	native!(is_vehicle_on_all_wheels, 0xB104CD1BABF302E2, bool, vehicle: Vehicle);
	native!(_0x5873c14a52d74236, 0x5873C14A52D74236, i32, p0: i32);
	native!(get_vehicle_layout_hash, 0x28D37D4F71AC5C58, Hash, vehicle: Vehicle);
	native!(_0xa01bc64dd4bfbbac, 0xA01BC64DD4BFBBAC, i32, vehicle: Vehicle, p1: i32);
	native!(set_render_train_as_derailed, 0x317B11A312DF5534, (), train: Vehicle, toggle: bool);
	native!(set_vehicle_extra_colours, 0x2036F561ADD12E33, (), vehicle: Vehicle, pearlescent_color: i32, wheel_color: i32);
	native!(get_vehicle_extra_colours, 0x3BC4245933A166F7, (), vehicle: Vehicle, pearlescent_color: &mut i32, wheel_color: &mut i32);
	native!(_set_vehicle_interior_color, 0xF40DD601A65F7F19, (), vehicle: Vehicle, color: i32);
	native!(_get_vehicle_interior_color, 0x7D1464D472D32136, (), vehicle: Vehicle, color: &mut i32);
	native!(_set_vehicle_dashboard_color, 0x6089CDF6A57F326C, (), vehicle: Vehicle, color: i32);
	native!(_get_vehicle_dashboard_color, 0xB7635E80A5C31BFF, (), vehicle: Vehicle, color: &mut i32);
	native!(stop_all_garage_activity, 0x0F87E938BDF29D66, ());
	native!(set_vehicle_fixed, 0x115722B1B9C14C1C, (), vehicle: Vehicle);
	native!(set_vehicle_deformation_fixed, 0x953DA1E1B12C0491, (), vehicle: Vehicle);
	native!(_set_vehicle_can_engine_operate_on_fire, 0x206BC5DC9D1AC70A, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_can_leak_oil, 0x51BB2D88D31A914B, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_can_leak_petrol, 0x192547247864DFDD, (), vehicle: Vehicle, toggle: bool);
	native!(set_disable_vehicle_petrol_tank_fires, 0x465BF26AB9684352, (), vehicle: Vehicle, toggle: bool);
	native!(set_disable_vehicle_petrol_tank_damage, 0x37C8252A7C92D017, (), vehicle: Vehicle, toggle: bool);
	native!(set_disable_vehicle_engine_fires, 0x91A0BD635321F145, (), vehicle: Vehicle, toggle: bool);
	native!(_0xc50ce861b55eab8b, 0xC50CE861B55EAB8B, (), vehicle: Vehicle, p1: bool);
	native!(_0x6ebfb22d646ffc18, 0x6EBFB22D646FFC18, (), vehicle: Vehicle, p1: bool);
	native!(set_disable_pretend_occupants, 0x25367DE49D64CF16, (), vehicle: Vehicle, toggle: bool);
	native!(remove_vehicles_from_generators_in_area, 0x46A1E1A299EC4BBA, (), x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, unk: i32);
	native!(set_vehicle_steer_bias, 0x42A8EC77D5150CBE, (), vehicle: Vehicle, value: f32);
	native!(is_vehicle_extra_turned_on, 0xD2E6822DBFD6C8BD, bool, vehicle: Vehicle, extra_id: i32);
	native!(set_vehicle_extra, 0x7EE3A3C5E4A40CC9, (), vehicle: Vehicle, extra_id: i32, disable: bool);
	native!(does_extra_exist, 0x1262D55792428154, bool, vehicle: Vehicle, extra_id: i32);
	native!(_0x534e36d4db9ecc5d, 0x534E36D4DB9ECC5D, i32, p0: i32, p1: i32);
	native!(set_convertible_roof, 0xF39C4F538B5124C2, (), vehicle: Vehicle, p1: bool);
	native!(lower_convertible_roof, 0xDED51F703D0FA83D, (), vehicle: Vehicle, instantly_lower: bool);
	native!(raise_convertible_roof, 0x8F5FB35D7E88FC70, (), vehicle: Vehicle, instantly_raise: bool);
	native!(get_convertible_roof_state, 0xF8C397922FC03F41, i32, vehicle: Vehicle);
	native!(is_vehicle_a_convertible, 0x52F357A30698BCCE, bool, vehicle: Vehicle, p1: bool);
	native!(_transform_vehicle_to_submarine, 0xBE4C854FFDB6EEBE, (), vehicle: Vehicle, no_animation: bool);
	native!(_transform_submarine_to_vehicle, 0x2A69FFD1B42BFF9E, (), vehicle: Vehicle, no_animation: bool);
	native!(_get_is_submarine_vehicle_transformed, 0xA77DC70BD689A1E5, bool, vehicle: Vehicle);
	native!(is_vehicle_stopped_at_traffic_lights, 0x2959F696AE390A99, bool, vehicle: Vehicle);
	native!(set_vehicle_damage, 0xA1DD317EA8FD4F29, (), vehicle: Vehicle, x_offset: f32, y_offset: f32, z_offset: f32, damage: f32, radius: f32, p6: bool);
	native!(_0x35bb21de06784373, 0x35BB21DE06784373, (), p0: i32, p1: i32);
	native!(get_vehicle_engine_health, 0xC45D23BAF168AAB8, f32, vehicle: Vehicle);
	native!(set_vehicle_engine_health, 0x45F6D8EEF34ABEF1, (), vehicle: Vehicle, health: f32);
	native!(_0x2a86a0475b6a1434, 0x2A86A0475B6A1434, (), p0: i32, p1: i32);
	native!(get_vehicle_petrol_tank_health, 0x7D5DABE888D2D074, f32, vehicle: Vehicle);
	native!(set_vehicle_petrol_tank_health, 0x70DB57649FA8D0D8, (), vehicle: Vehicle, health: f32);
	native!(is_vehicle_stuck_timer_up, 0x679BE1DAF71DA874, bool, vehicle: Vehicle, p1: i32, p2: i32);
	native!(reset_vehicle_stuck_timer, 0xD7591B0065AFAA7A, (), vehicle: Vehicle, null_attributes: i32);
	native!(is_vehicle_driveable, 0x4C241E39B23DF959, bool, vehicle: Vehicle, is_on_fire_check: bool);
	native!(set_vehicle_has_been_owned_by_player, 0x2B5F9D2AF1F1722D, (), vehicle: Vehicle, owned: bool);
	native!(set_vehicle_needs_to_be_hotwired, 0xFBA550EA44404EE6, (), vehicle: Vehicle, toggle: bool);
	native!(_0x9f3f689b814f2599, 0x9F3F689B814F2599, (), vehicle: Vehicle, p1: bool);
	native!(_0x4e74e62e0a97e901, 0x4E74E62E0A97E901, (), vehicle: Vehicle, p1: bool);
	native!(start_vehicle_horn, 0x9C8C6504B5B63D2C, (), vehicle: Vehicle, duration: i32, mode: Hash, forever: bool);
	native!(_set_vehicle_silent, 0x9D44FCCE98450843, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_has_strong_axles, 0x92F0CF722BC4202F, (), vehicle: Vehicle, toggle: bool);
	native!(get_display_name_from_vehicle_model, 0xB215AAC32D25D019, *const c_char, model_hash: Hash);
	native!(get_vehicle_deformation_at_pos, 0x4EC6CFBC7B2E9536, Vec3, vehicle: Vehicle, offset_x: f32, offset_y: f32, offset_z: f32);
	native!(set_vehicle_livery, 0x60BF608F1B8CD1B6, (), vehicle: Vehicle, livery: Hash);
	native!(get_vehicle_livery, 0x2BB9230590DA5E8A, Vehicle, trailers2: Vehicle);
	native!(get_vehicle_livery_count, 0x87B63E25A529D526, i32, vehicle: Vehicle);
	native!(_set_vehicle_roof_livery, 0xA6D3A8750DC73270, (), vehicle: Vehicle, livery: i32);
	native!(_get_vehicle_roof_livery, 0x60190048C0764A26, i32, vehicle: Vehicle);
	native!(_get_vehicle_roof_livery_count, 0x5ECB40269053C0D4, i32, vehicle: Vehicle);
	native!(is_vehicle_window_intact, 0x46E571A0E20D01F1, bool, vehicle: Vehicle, window_index: i32);
	native!(are_all_vehicle_windows_intact, 0x11D862A3E977A9EF, bool, vehicle: Vehicle);
	native!(are_any_vehicle_seats_free, 0x2D34FC3BC4ADB780, bool, vehicle: Vehicle);
	native!(reset_vehicle_wheels, 0x21D2E5662C1F6FED, (), vehicle: Vehicle, toggle: bool);
	native!(is_heli_part_broken, 0xBC74B4BE25EB6C8A, bool, vehicle: Vehicle, p1: bool, p2: bool, p3: bool);
	native!(get_heli_main_rotor_health, 0xE4CB7541F413D2C5, f32, vehicle: Vehicle);
	native!(get_heli_tail_rotor_health, 0xAE8CE82A4219AC8C, f32, vehicle: Vehicle);
	native!(get_heli_tail_boom_health, 0xAC51915D27E4A5F7, f32, vehicle: Vehicle);
	native!(_0x4056ea1105f5abd7, 0x4056EA1105F5ABD7, (), p0: i32, p1: i32);
	native!(_set_heli_tail_rotor_health, 0xFE205F38AAA58E5B, (), p0: i32, p1: i32);
	native!(set_heli_tail_explode_throw_dashboard, 0x3EC8BF18AA453FE9, (), vehicle: Vehicle, p1: bool);
	native!(set_vehicle_name_debug, 0xBFDF984E2C22B94F, (), vehicle: Vehicle, name: *const c_char);
	native!(set_vehicle_explodes_on_high_explosion_damage, 0x71B0892EC081D60A, (), vehicle: Vehicle, toggle: bool);
	native!(_0xd565f438137f0e10, 0xD565F438137F0E10, (), p0: i32, p1: i32);
	native!(_0x3441cad2f2231923, 0x3441CAD2F2231923, (), vehicle: Vehicle, p1: bool);
	native!(set_vehicle_disable_towing, 0x2B6747FAA9DB9D6B, (), vehicle: Vehicle, toggle: bool);
	native!(_does_vehicle_have_landing_gear, 0xE43701C36CAFF1A4, bool, vehicle: Vehicle);
	native!(control_landing_gear, 0xCFC8BE9A5E1FE575, (), vehicle: Vehicle, state: i32);
	native!(get_landing_gear_state, 0x9B0F3DCA3DB0F4CD, i32, vehicle: Vehicle);
	native!(is_any_vehicle_near_point, 0x61E1DD6125A3EEE6, bool, x: f32, y: f32, z: f32, radius: f32);
	native!(request_vehicle_high_detail_model, 0xA6E9FDCB2C76785E, (), vehicle: Vehicle);
	native!(remove_vehicle_high_detail_model, 0x00689CDE5F7C6787, (), vehicle: Vehicle);
	native!(is_vehicle_high_detail, 0x1F25887F3C104278, bool, vehicle: Vehicle);
	native!(request_vehicle_asset, 0x81A15811460FAB3A, (), vehicle_hash: Hash, vehicle_asset: i32);
	native!(has_vehicle_asset_loaded, 0x1BBE0523B8DB9A21, bool, vehicle_asset: i32);
	native!(remove_vehicle_asset, 0xACE699C71AB9DEB5, (), vehicle_asset: i32);
	native!(set_vehicle_tow_truck_arm_position, 0xFE54B92A344583CA, (), vehicle: Vehicle, position: f32);
	native!(attach_vehicle_to_tow_truck, 0x29A16F8D621C4508, (), tow_truck: Vehicle, vehicle: Vehicle, rear: bool, hook_offset_x: f32, hook_offset_y: f32, hook_offset_z: f32);
	native!(detach_vehicle_from_tow_truck, 0xC2DB6B6708350ED8, (), tow_truck: Vehicle, vehicle: Vehicle);
	native!(detach_vehicle_from_any_tow_truck, 0xD0E9CE05A1E68CD8, bool, vehicle: Vehicle);
	native!(is_vehicle_attached_to_tow_truck, 0x146DF9EC4C4B9FD4, bool, tow_truck: Vehicle, vehicle: Vehicle);
	native!(get_entity_attached_to_tow_truck, 0xEFEA18DCF10F8F75, Entity, tow_truck: Vehicle);
	native!(set_vehicle_automatically_attaches, 0x8BA6F76BC53A1493, i32, vehicle: Vehicle, p1: bool, p2: i32);
	native!(set_vehicle_bulldozer_arm_position, 0xF8EBCCC96ADB9FB7, (), vehicle: Vehicle, position: f32, p2: bool);
	native!(set_vehicle_tank_turret_position, 0x56B94C6D7127DFBA, (), vehicle: Vehicle, position: f32, p2: bool);
	native!(_0x0581730ab9380412, 0x0581730AB9380412, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(_0x737e398138550fff, 0x737E398138550FFF, (), p0: i32, p1: i32);
	native!(_0x1093408b4b9d1146, 0x1093408B4B9D1146, (), p0: i32, p1: f32);
	native!(_disable_vehicle_turret_movement_this_frame, 0x32CAEDF24A583345, (), p0: i32);
	native!(set_vehicle_flight_nozzle_position, 0x30D779DE7C4F6DD3, (), vehicle: Vehicle, angle_ratio: f32);
	native!(set_vehicle_flight_nozzle_position_immediate, 0x9AA47FFF660CB932, (), vehicle: Vehicle, angle: f32);
	native!(_get_vehicle_flight_nozzle_position, 0xDA62027C8BDB326E, f32, plane: Vehicle);
	native!(_set_disable_vehicle_flight_nozzle_position, 0xCE2B43770B655F8F, (), p0: i32, p1: i32);
	native!(_0xa4822f1cf23f4810, 0xA4822F1CF23F4810, bool, out_vec: &mut Vec3, p1: i32, out_vec1: &mut Vec3, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32);
	native!(set_vehicle_burnout, 0xFB8794444A7D60FB, (), vehicle: Vehicle, toggle: bool);
	native!(is_vehicle_in_burnout, 0x1297A88E081430EB, bool, vehicle: Vehicle);
	native!(set_vehicle_reduce_grip, 0x222FF6A823D122E2, (), vehicle: Vehicle, toggle: bool);
	native!(_0x6dee944e1ee90cfb, 0x6DEE944E1EE90CFB, (), p0: i32, p1: i32);
	native!(set_vehicle_indicator_lights, 0xB5D45264751B7DF0, (), vehicle: Vehicle, turn_signal: i32, toggle: bool);
	native!(set_vehicle_brake_lights, 0x92B35082E0B42F66, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_handbrake, 0x684785568EF26A22, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_brake, 0xE4E2FD323574965C, (), vehicle: Vehicle, toggle: bool);
	native!(_0x48adc8a773564670, 0x48ADC8A773564670, ());
	native!(_0x91d6dd290888cbab, 0x91D6DD290888CBAB, bool);
	native!(_0x51db102f4a3ba5e0, 0x51DB102F4A3BA5E0, (), toggle: bool);
	native!(_0xa4a9a4c40e615885, 0xA4A9A4C40E615885, (), p0: i32);
	native!(get_vehicle_trailer_vehicle, 0x1CDD6BADC297830D, bool, vehicle: Vehicle, trailer: &mut Vehicle);
	native!(_0xcac66558b944da67, 0xCAC66558B944DA67, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_rudder_broken, 0x09606148B6C71DEF, (), vehicle: Vehicle, toggle: bool);
	native!(set_convertible_roof_latch_state, 0x1A78AD3D8240536F, (), vehicle: Vehicle, state: bool);
	native!(get_vehicle_estimated_max_speed, 0x53AF99BAA671CA47, f32, vehicle: Vehicle);
	native!(get_vehicle_max_braking, 0xAD7E85FC227197C4, f32, vehicle: Vehicle);
	native!(get_vehicle_max_traction, 0xA132FB5370554DB0, f32, vehicle: Vehicle);
	native!(get_vehicle_acceleration, 0x5DD35C8D074E57AE, f32, vehicle: Vehicle);
	native!(get_vehicle_model_estimated_max_speed, 0xF417C2502FFFED43, f32, model_hash: Hash);
	native!(get_vehicle_model_max_braking, 0xDC53FD41B4ED944C, f32, model_hash: Hash);
	native!(get_vehicle_model_max_braking_max_mods, 0xBFBA3BA79CFF7EBF, f32, model_hash: Hash);
	native!(get_vehicle_model_max_traction, 0x539DE94D44FDFD0D, f32, model_hash: Hash);
	native!(get_vehicle_model_acceleration, 0x8C044C5C84505B6A, f32, model_hash: Hash);
	native!(_get_vehicle_model_estimated_agility, 0x53409B5163D5B846, f32, model_hash: Hash);
	native!(_get_vehicle_model_max_knots, 0xC6AD107DDC9054CC, f32, model_hash: Hash);
	native!(_get_vehicle_model_move_resistance, 0x5AA3F878A178C4FC, f32, model_hash: Hash);
	native!(get_vehicle_class_estimated_max_speed, 0x00C09F246ABEDD82, f32, vehicle_class: i32);
	native!(get_vehicle_class_max_traction, 0xDBC86D85C5059461, f32, vehicle_class: i32);
	native!(get_vehicle_class_max_agility, 0x4F930AD022D6DE3B, f32, vehicle_class: i32);
	native!(get_vehicle_class_max_acceleration, 0x2F83E7E45D9EA7AE, f32, vehicle_class: i32);
	native!(get_vehicle_class_max_braking, 0x4BF54C16EC8FEC03, f32, vehicle_class: i32);
	native!(_add_speed_zone_for_coord, 0x2CE544C68FB812A0, i32, x: f32, y: f32, z: f32, radius: f32, speed: f32, p5: bool);
	native!(_remove_speed_zone, 0x1033371FC8E842A7, bool, speedzone: i32);
	native!(open_bomb_bay_doors, 0x87E7F24270732CB1, (), vehicle: Vehicle);
	native!(close_bomb_bay_doors, 0x3556041742A0DC74, (), vehicle: Vehicle);
	native!(_are_bomb_bay_doors_open, 0xD0917A423314BBA8, bool, aircraft: Vehicle);
	native!(is_vehicle_searchlight_on, 0xC0F97FCE55094987, bool, vehicle: Vehicle);
	native!(set_vehicle_searchlight, 0x14E85C5EE7A4D542, (), heli: Vehicle, toggle: bool, can_be_used_by_ai: bool);
	native!(_0x639431e895b9aa57, 0x639431E895B9AA57, bool, ped: Ped, vehicle: Vehicle, p2: bool, p3: bool, p4: bool);
	native!(_get_entry_position_of_door, 0xC0572928C0ABFDA3, Vec3, vehicle: Vehicle, door_index: i32);
	native!(can_shuffle_seat, 0x30785D90C956BF35, bool, vehicle: Vehicle, p1: i32);
	native!(get_num_mod_kits, 0x33F2E3FE70EAAE1D, i32, vehicle: Vehicle);
	native!(set_vehicle_mod_kit, 0x1F2AA07F00B3217A, (), vehicle: Vehicle, mod_kit: i32);
	native!(get_vehicle_mod_kit, 0x6325D1A044AE510D, i32, vehicle: Vehicle);
	native!(get_vehicle_mod_kit_type, 0xFC058F5121E54C32, i32, vehicle: Vehicle);
	native!(get_vehicle_wheel_type, 0xB3ED1BFB4BE636DC, i32, vehicle: Vehicle);
	native!(set_vehicle_wheel_type, 0x487EB21CC7295BA1, (), vehicle: Vehicle, wheel_type: i32);
	native!(get_num_mod_colors, 0xA551BE18C11A476D, i32, p0: i32, p1: bool);
	native!(set_vehicle_mod_color_1, 0x43FEB945EE7F85B8, (), vehicle: Vehicle, paint_type: i32, color: i32, p3: i32);
	native!(set_vehicle_mod_color_2, 0x816562BADFDEC83E, (), vehicle: Vehicle, paint_type: i32, color: i32);
	native!(get_vehicle_mod_color_1, 0xE8D65CA700C9A693, (), vehicle: Vehicle, paint_type: &mut i32, color: &mut i32, p3: &mut i32);
	native!(get_vehicle_mod_color_2, 0x81592BE4E3878728, (), vehicle: Vehicle, paint_type: &mut i32, color: &mut i32);
	native!(get_vehicle_mod_color_1_name, 0xB45085B721EFD38C, *const c_char, vehicle: Vehicle, p1: bool);
	native!(get_vehicle_mod_color_2_name, 0x4967A516ED23A5A1, *const c_char, vehicle: Vehicle);
	native!(_is_vehicle_mod_load_done, 0x9A83F5F9963775EF, bool, vehicle: Vehicle);
	native!(set_vehicle_mod, 0x6AF0636DDEDCB6DD, (), vehicle: Vehicle, mod_type: i32, mod_index: i32, custom_tires: bool);
	native!(get_vehicle_mod, 0x772960298DA26FDB, i32, vehicle: Vehicle, mod_type: i32);
	native!(get_vehicle_mod_variation, 0xB3924ECD70E095DC, bool, vehicle: Vehicle, mod_type: i32);
	native!(get_num_vehicle_mods, 0xE38E9162A2500646, i32, vehicle: Vehicle, mod_type: i32);
	native!(remove_vehicle_mod, 0x92D619E420858204, (), vehicle: Vehicle, mod_type: i32);
	native!(toggle_vehicle_mod, 0x2A1F4F37F95BAD08, (), vehicle: Vehicle, mod_type: i32, toggle: bool);
	native!(is_toggle_mod_on, 0x84B233A8C8FC8AE7, bool, vehicle: Vehicle, mod_type: i32);
	native!(get_mod_text_label, 0x8935624F8C5592CC, *const c_char, vehicle: Vehicle, mod_type: i32, mod_value: i32);
	native!(get_mod_slot_name, 0x51F0FEB9F6AE98C0, *const c_char, vehicle: Vehicle, mod_type: i32);
	native!(get_livery_name, 0xB4C7A93837C91A1F, *const c_char, vehicle: Vehicle, livery_index: i32);
	native!(get_vehicle_mod_modifier_value, 0x90A38E9838E0A8C1, f32, vehicle: Vehicle, mod_type: i32, mod_index: i32);
	native!(get_vehicle_mod_identifier_hash, 0x4593CF82AA179706, Hash, vehicle: Vehicle, mod_type: i32, mod_index: i32);
	native!(preload_vehicle_mod, 0x758F49C24925568A, (), p0: i32, mod_type: i32, p2: i32);
	native!(has_preload_mods_finished, 0x06F43E5175EB6D96, bool, p0: i32);
	native!(release_preload_mods, 0x445D79F995508307, (), vehicle: Vehicle);
	native!(set_vehicle_tyre_smoke_color, 0xB5BA80F839791C0F, (), vehicle: Vehicle, r: i32, g: i32, b: i32);
	native!(get_vehicle_tyre_smoke_color, 0xB635392A4938B3C3, (), vehicle: Vehicle, r: &mut i32, g: &mut i32, b: &mut i32);
	native!(set_vehicle_window_tint, 0x57C51E6BAD752696, (), vehicle: Vehicle, tint: i32);
	native!(get_vehicle_window_tint, 0x0EE21293DAD47C95, i32, vehicle: Vehicle);
	native!(get_num_vehicle_window_tints, 0x9D1224004B3A6707, i32);
	native!(get_vehicle_color, 0xF3CC740D36221548, (), vehicle: Vehicle, r: &mut i32, g: &mut i32, b: &mut i32);
	native!(_0xeebfc7a7efdc35b4, 0xEEBFC7A7EFDC35B4, i32, vehicle: Vehicle);
	native!(get_vehicle_cause_of_destruction, 0xE495D1EF4C91FD20, Hash, vehicle: Vehicle);
	native!(_0x5ee5632f47ae9695, 0x5EE5632F47AE9695, (), vehicle: Vehicle, health: f32);
	native!(get_is_left_vehicle_headlight_damaged, 0x5EF77C9ADD3B11A3, bool, vehicle: Vehicle);
	native!(get_is_right_vehicle_headlight_damaged, 0xA7ECB73355EB2F20, bool, vehicle: Vehicle);
	native!(_is_vehicle_engine_on_fire, 0xEC69ADF931AAE0C3, bool, vehicle: Vehicle);
	native!(modify_vehicle_top_speed, 0x93A3996368C94158, (), vehicle: Vehicle, value: f32);
	native!(_set_vehicle_max_speed, 0xBAA045B4E42F3C06, (), vehicle: Vehicle, speed: f32);
	native!(_0x1cf38d529d7441d9, 0x1CF38D529D7441D9, (), vehicle: Vehicle, toggle: bool);
	native!(_0x1f9fb66f3a3842d2, 0x1F9FB66F3A3842D2, (), vehicle: Vehicle, p1: bool);
	native!(_0x59c3757b3b7408e8, 0x59C3757B3B7408E8, (), p0: i32, p1: i32, p2: i32);
	native!(add_vehicle_combat_angled_avoidance_area, 0x54B0F614960F4A5F, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32);
	native!(remove_vehicle_combat_avoidance_area, 0xE30524E1871F481D, (), p0: i32);
	native!(_is_any_passenger_rappeling_from_vehicle, 0x291E373D483E7EE7, bool, vehicle: Vehicle);
	native!(set_vehicle_cheat_power_increase, 0xB59E4BD37AE292DB, (), vehicle: Vehicle, value: f32);
	native!(_0x0ad9e8f87ff7c16f, 0x0AD9E8F87FF7C16F, (), p0: i32, p1: bool);
	native!(set_vehicle_is_wanted, 0xF7EC25A3EBEEC726, (), vehicle: Vehicle, state: bool);
	native!(_0xf488c566413b4232, 0xF488C566413B4232, (), p0: i32, p1: f32);
	native!(get_boat_boom_position_ratio, 0xC1F981A6F74F0C23, (), p0: i32, p1: bool);
	native!(_0x0f3b4d4e43177236, 0x0F3B4D4E43177236, (), p0: i32, p1: bool);
	native!(get_boat_boom_position_ratio1, 0x6636C535F6CC2725, f32, vehicle: Vehicle);
	native!(disable_plane_aileron, 0x23428FC53C60919C, (), vehicle: Vehicle, p1: bool, p2: bool);
	native!(get_is_vehicle_engine_running, 0xAE31E7DF9B5B132E, bool, vehicle: Vehicle);
	native!(set_vehicle_use_alternate_handling, 0x1D97D1E3A70A649F, (), vehicle: Vehicle, toggle: bool);
	native!(set_bike_on_stand, 0x9CFA4896C3A53CBB, (), vehicle: Vehicle, x: f32, y: f32);
	native!(_0xab04325045427aae, 0xAB04325045427AAE, (), vehicle: Vehicle, p1: bool);
	native!(_0xcfd778e7904c255e, 0xCFD778E7904C255E, (), vehicle: Vehicle);
	native!(set_last_driven_vehicle, 0xACFB2463CC22BED2, (), vehicle: Vehicle);
	native!(get_last_driven_vehicle, 0xB2D06FAEDE65B577, Vehicle);
	native!(clear_last_driven_vehicle, 0xE01903C47C7AC89E, ());
	native!(set_vehicle_has_been_driven_flag, 0x02398B627547189C, (), vehicle: Vehicle, toggle: bool);
	native!(set_task_vehicle_goto_plane_min_height_above_terrain, 0xB893215D8D4C015B, (), plane: Vehicle, height: i32);
	native!(set_vehicle_lod_multiplier, 0x93AE6A61BE015BF1, (), vehicle: Vehicle, multiplier: f32);
	native!(set_vehicle_can_save_in_garage, 0x428BACCDF5E26EAD, (), vehicle: Vehicle, toggle: bool);
	native!(_get_vehicle_number_of_broken_off_bones, 0x42A4BEB35D372407, i32, vehicle: Vehicle);
	native!(_get_vehicle_number_of_broken_bones, 0x2C8CBFE1EA5FC631, i32, vehicle: Vehicle);
	native!(_0x4d9d109f63fee1d4, 0x4D9D109F63FEE1D4, (), p0: i32, p1: bool);
	native!(_0x279d50de5652d935, 0x279D50DE5652D935, (), vehicle: Vehicle, toggle: bool);
	native!(copy_vehicle_damages, 0xE44A982368A4AF23, (), source_vehicle: Vehicle, target_vehicle: Vehicle);
	native!(_0xf25e02cb9c5818f8, 0xF25E02CB9C5818F8, ());
	native!(set_lights_cutoff_distance_tweak, 0xBC3CCA5844452B06, (), distance: f32);
	native!(set_vehicle_shoot_at_target, 0x74CD9A9327A282EA, (), driver: Ped, entity: Entity, x_target: f32, y_target: f32, z_target: f32);
	native!(get_vehicle_lock_on_target, 0x8F5EBAB1F260CFCE, bool, vehicle: Vehicle, entity: &mut Entity);
	native!(set_force_hd_vehicle, 0x97CE68CB032583F0, (), vehicle: Vehicle, toggle: bool);
	native!(_0x182f266c2d9e2beb, 0x182F266C2D9E2BEB, (), vehicle: Vehicle, p1: f32);
	native!(get_vehicle_plate_type, 0x9CCC9525BF2408E0, i32, vehicle: Vehicle);
	native!(track_vehicle_visibility, 0x64473AEFDCF47DCA, (), vehicle: Vehicle);
	native!(is_vehicle_visible, 0xAA0A52D24FB98293, bool, vehicle: Vehicle);
	native!(set_vehicle_gravity, 0x89F149B6131E57DA, (), vehicle: Vehicle, toggle: bool);
	native!(_0xe6c0c80b8c867537, 0xE6C0C80B8C867537, (), p0: bool);
	native!(_0xf051d9bfb6ba39c0, 0xF051D9BFB6BA39C0, (), p0: i32);
	native!(_0x36492c2f0d134c56, 0x36492C2F0D134C56, f32, vehicle: Vehicle);
	native!(_0x48c633e94a8142a7, 0x48C633E94A8142A7, bool, vehicle: Vehicle);
	native!(set_vehicle_inactive_during_playback, 0x06582AFF74894C75, (), vehicle: Vehicle, toggle: bool);
	native!(set_vehicle_active_during_playback, 0xDFFCEF48E511DB48, (), p0: i32, p1: bool);
	native!(is_vehicle_sprayable, 0x8D474C8FAEFF6CDE, bool, vehicle: Vehicle);
	native!(set_vehicle_engine_can_degrade, 0x983765856F2564F9, (), vehicle: Vehicle, toggle: bool);
	native!(_0xf0e4ba16d1db546c, 0xF0E4BA16D1DB546C, (), vehicle: Vehicle, p1: i32, p2: i32);
	native!(_0xf87d9f2301f7d206, 0xF87D9F2301F7D206, (), vehicle: Vehicle);
	native!(is_plane_landing_gear_intact, 0x4198AB0022B15F87, bool, plane: Vehicle);
	native!(are_plane_propellers_intact, 0x755D6D5267CBBD7E, bool, plane: Vehicle);
	native!(_0x4c815eb175086f84, 0x4C815EB175086F84, i32, p0: i32, p1: i32);
	native!(set_vehicle_can_deform_wheels, 0x0CDDA42F9E360CA6, (), vehicle: Vehicle, toggle: bool);
	native!(is_vehicle_stolen, 0x4AF9BD80EEBEB453, bool, vehicle: Vehicle);
	native!(set_vehicle_is_stolen, 0x67B2C79AA7FF5738, (), vehicle: Vehicle, is_stolen: bool);
	native!(set_plane_turbulence_multiplier, 0xAD2D28A1AFDFF131, (), vehicle: Vehicle, value: f32);
	native!(_are_plane_wings_intact, 0x5991A01434CE9677, bool, plane: Vehicle);
	native!(_0xb264c4d2f2b0a78b, 0xB264C4D2F2B0A78B, (), vehicle: Vehicle);
	native!(detach_vehicle_from_cargobob, 0x0E21D3DF1051399D, (), vehicle: Vehicle, cargobob: Vehicle);
	native!(detach_vehicle_from_any_cargobob, 0xADF7BE450512C12F, bool, vehicle: Vehicle);
	native!(_detach_entity_from_cargobob, 0xAF03011701811146, i32, cargobob: Vehicle, entity: Entity);
	native!(is_vehicle_attached_to_cargobob, 0xD40148F22E81A1D9, bool, cargobob: Vehicle, vehicle_attached: Vehicle);
	native!(get_vehicle_attached_to_cargobob, 0x873B82D42AC2B9E5, Vehicle, cargobob: Vehicle);
	native!(_get_entity_attached_to_cargobob, 0x99093F60746708CA, i32, p0: i32);
	native!(attach_vehicle_to_cargobob, 0x4127F1D84E347769, (), vehicle: Vehicle, cargobob: Vehicle, p2: i32, x: f32, y: f32, z: f32);
	native!(_attach_entity_to_cargobob, 0xA1DD82F3CCF9A01E, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32);
	native!(_0x571feb383f629926, 0x571FEB383F629926, (), cargobob: Vehicle, p1: bool);
	native!(_0x1f34b0626c594380, 0x1F34B0626C594380, (), p0: i32, p1: i32);
	native!(_0x2c1d8b3b19e517cc, 0x2C1D8B3B19E517CC, i32, p0: i32, p1: i32);
	native!(_get_cargobob_hook_position, 0xCBDB9B923CACC92D, Vec3, cargobob: Vehicle);
	native!(does_cargobob_have_pick_up_rope, 0x1821D91AD4B56108, bool, cargobob: Vehicle);
	native!(create_pick_up_rope_for_cargobob, 0x7BEB0C7A235F6F3B, (), cargobob: Vehicle, state: i32);
	native!(remove_pick_up_rope_for_cargobob, 0x9768CF648F54C804, (), cargobob: Vehicle);
	native!(_set_cargobob_hook_position, 0x877C1EAEAC531023, (), p0: i32, p1: f32, p2: f32, state: i32);
	native!(_0xc0ed6438e6d39ba8, 0xC0ED6438E6D39BA8, (), p0: i32, p1: i32, p2: i32);
	native!(set_cargobob_pickup_rope_damping_multiplier, 0xCF1182F682F65307, (), p0: i32, p1: i32);
	native!(set_cargobob_pickup_rope_type, 0x0D5F65A8F4EBDAB5, (), p0: i32, p1: i32);
	native!(does_cargobob_have_pickup_magnet, 0x6E08BF5B3722BAC9, bool, cargobob: Vehicle);
	native!(set_cargobob_pickup_magnet_active, 0x9A665550F8DA349B, (), cargobob: Vehicle, is_active: bool);
	native!(set_cargobob_pickup_magnet_strength, 0xBCBFCD9D1DAC19E2, (), cargobob: Vehicle, strength: f32);
	native!(set_cargobob_pickup_magnet_effect_radius, 0xA17BAD153B51547E, (), cargobob: Vehicle, p1: f32);
	native!(set_cargobob_pickup_magnet_reduced_falloff, 0x66979ACF5102FD2F, (), cargobob: Vehicle, p1: f32);
	native!(set_cargobob_pickup_magnet_pull_rope_length, 0x6D8EAC07506291FB, (), cargobob: Vehicle, p1: f32);
	native!(set_cargobob_pickup_magnet_pull_strength, 0xED8286F71A819BAA, (), cargobob: Vehicle, p1: f32);
	native!(set_cargobob_pickup_magnet_falloff, 0x685D5561680D088B, (), vehicle: Vehicle, p1: f32);
	native!(set_cargobob_pickup_magnet_reduced_strength, 0xE301BD63E9E13CF0, (), vehicle: Vehicle, cargobob: Vehicle);
	native!(_0x9bddc73cc6a115d4, 0x9BDDC73CC6A115D4, (), vehicle: Vehicle, p1: bool, p2: bool);
	native!(_0x56eb5e94318d3fb6, 0x56EB5E94318D3FB6, (), vehicle: Vehicle, p1: bool);
	native!(does_vehicle_have_weapons, 0x25ECB9F8017D98E0, bool, vehicle: Vehicle);
	native!(_0x2c4a1590abf43e8b, 0x2C4A1590ABF43E8B, (), vehicle: Vehicle, p1: bool);
	native!(disable_vehicle_weapon, 0xF4FC6A6F67D8D856, (), disabled: bool, weapon_hash: Hash, vehicle: Vehicle, owner: Ped);
	native!(_is_vehicle_weapon_disabled, 0x563B65A643ED072E, i32, p0: i32, p1: i32, p2: i32);
	native!(_0xe05dd0e9707003a3, 0xE05DD0E9707003A3, (), p0: i32, p1: bool);
	native!(_set_vehicle_close_door_defered_action, 0x21115BCD6E44656A, (), p0: i32, p1: bool);
	native!(get_vehicle_class, 0x29439776AAA00A62, i32, vehicle: Vehicle);
	native!(get_vehicle_class_from_name, 0xDEDF1C8BD47C2200, i32, model_hash: Hash);
	native!(set_players_last_vehicle, 0xBCDF8BAF56C87B6A, (), vehicle: Vehicle);
	native!(set_vehicle_can_be_used_by_fleeing_peds, 0x300504B23BD3B711, (), vehicle: Vehicle, toggle: bool);
	native!(_0xe5810ac70602f2f5, 0xE5810AC70602F2F5, (), vehicle: Vehicle, p1: f32);
	native!(set_vehicle_drops_money_when_blown_up, 0x068F64F2470F9656, (), vehicle: Vehicle, toggle: bool);
	native!(_set_vehicle_jet_engine_on, 0xB8FBC8B1330CA9B4, (), vehicle: Vehicle, toggle: bool);
	native!(_0x6a973569ba094650, 0x6A973569BA094650, (), p0: i32, p1: i32);
	native!(_set_vehicle_handling_hash_for_ai, 0x10655FAB9915623D, (), vehicle: Vehicle, hash: Hash);
	native!(set_vehicle_extended_removal_range, 0x79DF7E806202CE01, (), vehicle: Vehicle, range: i32);
	native!(set_vehicle_steering_bias_scalar, 0x9007A2F21DC108D4, (), p0: i32, p1: f32);
	native!(_set_helicopter_roll_pitch_yaw_mult, 0x6E0859B530A365CC, (), helicopter: Vehicle, multiplier: f32);
	native!(set_vehicle_friction_override, 0x1837AF7C627009BA, (), vehicle: Vehicle, friction: f32);
	native!(set_vehicle_wheels_can_break_off_when_blow_up, 0xA37B9A517B133349, (), vehicle: Vehicle, toggle: bool);
	native!(_0xf78f94d60248c737, 0xF78F94D60248C737, bool, vehicle: Vehicle, p1: bool);
	native!(set_vehicle_ceiling_height, 0xA46413066687A328, (), vehicle: Vehicle, height: f32);
	native!(_0x5e569ec46ec21cae, 0x5E569EC46EC21CAE, (), vehicle: Vehicle, toggle: bool);
	native!(clear_vehicle_route_history, 0x6D6AF961B72728AE, (), vehicle: Vehicle);
	native!(does_vehicle_exist_with_decorator, 0x956B409B984D9BF7, bool, decorator: *const c_char);
	native!(set_vehicle_exclusive_driver, 0x41062318F23ED854, (), vehicle: Vehicle, toggle: bool);
	native!(_set_vehicle_exclusive_driver_2, 0xB5C51B5502E85E83, (), vehicle: Vehicle, ped: Ped, index: i32);
	native!(_0xb09d25e77c33eb3f, 0xB09D25E77C33EB3F, i32, p0: i32, p1: i32, p2: i32);
	native!(_disable_plane_propeller, 0x500873A45724C863, (), vehicle: Vehicle, p1: i32);
	native!(set_vehicle_force_afterburner, 0xB055A34527CB8FD7, (), vehicle: Vehicle, toggle: bool);
	native!(_set_disable_vehicle_window_collisions, 0x1087BC8EC540DAEB, (), p0: i32, p1: i32);
	native!(_0xb68cfaf83a02768d, 0xB68CFAF83A02768D, (), p0: i32, p1: i32);
	native!(_0x0205f5365292d2eb, 0x0205F5365292D2EB, (), p0: i32, p1: i32);
	native!(_0xcf9159024555488c, 0xCF9159024555488C, (), p0: i32);
	native!(set_distant_cars_enabled, 0xF796359A959DF65D, (), toggle: bool);
	native!(_set_vehicle_neon_lights_colour, 0x8E0A582209A62695, (), vehicle: Vehicle, r: i32, g: i32, b: i32);
	native!(_0xb93b2867f7b479d1, 0xB93B2867F7B479D1, (), p0: i32, p1: i32);
	native!(_get_vehicle_neon_lights_colour, 0x7619EEE8C886757F, (), vehicle: Vehicle, r: &mut i32, g: &mut i32, b: &mut i32);
	native!(_set_vehicle_neon_light_enabled, 0x2AA720E4287BF269, (), vehicle: Vehicle, index: i32, toggle: bool);
	native!(_is_vehicle_neon_light_enabled, 0x8C4B92553E4766A5, bool, vehicle: Vehicle, index: i32);
	native!(_0x35e0654f4bad7971, 0x35E0654F4BAD7971, (), p0: bool);
	native!(_disable_vehicle_neon_lights, 0x83F813570FF519DE, (), vehicle: Vehicle, toggle: bool);
	native!(_0xb088e9a47ae6edd5, 0xB088E9A47AE6EDD5, (), vehicle: Vehicle, p1: bool);
	native!(_request_vehicle_dashboard_scaleform_movie, 0xDBA3C090E3D74690, (), vehicle: Vehicle);
	native!(get_vehicle_body_health, 0xF271147EB7B40F12, f32, vehicle: Vehicle);
	native!(set_vehicle_body_health, 0xB77D05AC8C78AADB, (), vehicle: Vehicle, value: f32);
	native!(_get_vehicle_suspension_bounds, 0xDF7E3EEB29642C38, (), vehicle: Vehicle, out1: &mut Vec3, out2: &mut Vec3);
	native!(_get_vehicle_suspension_height, 0x53952FD2BAA19F17, f32, vehicle: Vehicle);
	native!(_set_car_high_speed_bump_severity_multiplier, 0x84FD40F56075E816, (), multiplier: f32);
	native!(_get_number_of_vehicle_doors, 0x92922A607497B14D, i32, vehicle: Vehicle);
	native!(_set_hydraulic_raised, 0x28B18377EB6E25F6, (), p0: i32, p1: i32);
	native!(_0xa7dcdf4ded40a8f4, 0xA7DCDF4DED40A8F4, (), vehicle: Vehicle, p1: bool);
	native!(_get_vehicle_body_health_2, 0xB8EF61207C2393A9, f32, vehicle: Vehicle, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32);
	native!(_0xd4c4642cb7f50b5d, 0xD4C4642CB7F50B5D, bool, vehicle: Vehicle);
	native!(_0xc361aa040d6637a8, 0xC361AA040D6637A8, (), vehicle: Vehicle, p1: bool);
	native!(set_vehicle_kers_allowed, 0x99C82F8A139F3E4E, (), vehicle: Vehicle, toggle: bool);
	native!(get_vehicle_has_kers, 0x50634E348C8D44EF, bool, vehicle: Vehicle);
	native!(_0xe16142b94664defd, 0xE16142B94664DEFD, (), vehicle: Vehicle, p1: bool);
	native!(_0x26d99d5a82fd18e8, 0x26D99D5A82FD18E8, (), p0: i32);
	native!(_set_hydraulic_state, 0x84EA99C62CB3EF0C, (), p0: i32, p1: i32, p2: i32);
	native!(_set_cambered_wheels_disabled, 0x1201E8A3290A3B98, (), p0: i32, p1: i32);
	native!(_set_hydraulic_wheel_state, 0x8EA86DF356801C7D, (), p0: i32, p1: i32);
	native!(_set_hydraulic_wheel_state_transition, 0xC24075310A8B9CD1, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_0x5ba68a0840d546ac, 0x5BA68A0840D546AC, i32, p0: i32, p1: i32);
	native!(_0x4419966c9936071a, 0x4419966C9936071A, (), vehicle: Vehicle);
	native!(_0x870b8b7a766615c8, 0x870B8B7A766615C8, (), p0: i32, p1: i32, p2: i32);
	native!(_0x8533cafde1f0f336, 0x8533CAFDE1F0F336, i32, p0: i32);
	native!(_set_vehicle_damage_modifier, 0x4E20D2A627011E8E, i32, vehicle: Vehicle, p1: f32);
	native!(_set_vehicle_unk_damage_multiplier, 0x45A561A9421AB6AD, (), vehicle: Vehicle, multiplier: f32);
	native!(_0xd4196117af7bb974, 0xD4196117AF7BB974, i32, p0: i32, p1: i32);
	native!(_0xbb2333bb87ddd87f, 0xBB2333BB87DDD87F, (), p0: i32, p1: i32);
	native!(_0x73561d4425a021a2, 0x73561D4425A021A2, (), p0: i32, p1: i32);
	native!(_set_vehicle_controls_inverted, 0x5B91B229243351A8, (), vehicle: Vehicle, state: bool);
	native!(_0x7bbe7ff626a591fe, 0x7BBE7FF626A591FE, (), p0: i32);
	native!(_0x65b080555ea48149, 0x65B080555EA48149, (), p0: i32);
	native!(_0x428ad3e26c8d9eb0, 0x428AD3E26C8D9EB0, (), vehicle: Vehicle, x: f32, y: f32, z: f32, p4: f32);
	native!(_0xe2f53f172b45ede1, 0xE2F53F172B45EDE1, ());
	native!(_0xba91d045575699ad, 0xBA91D045575699AD, bool, vehicle: Vehicle);
	native!(_0x80e3357fdef45c21, 0x80E3357FDEF45C21, (), p0: i32, p1: i32);
	native!(_set_vehicle_ramp_launch_modifier, 0xEFC13B1CE30D755D, (), p0: i32, p1: i32);
	native!(_get_is_door_valid, 0x645F4B6E8499F632, bool, vehicle: Vehicle, door_index: i32);
	native!(_set_vehicle_rocket_boost_refill_time, 0xE00F2AB100B76E89, (), vehicle: Vehicle, seconds: f32);
	native!(_get_has_rocket_boost, 0x36D782F68B309BDA, bool, vehicle: Vehicle);
	native!(_is_vehicle_rocket_boost_active, 0x3D34E80EED4AE3BE, bool, vehicle: Vehicle);
	native!(_set_vehicle_rocket_boost_active, 0x81E1552E35DC3839, (), vehicle: Vehicle, active: bool);
	native!(_get_has_retractable_wheels, 0xDCA174A42133F08C, bool, vehicle: Vehicle);
	native!(_get_is_wheels_lowered_state_active, 0x1DA0DA9CB3F0C8BF, bool, vehicle: Vehicle);
	native!(_raise_retractable_wheels, 0xF660602546D27BA8, (), vehicle: Vehicle);
	native!(_lower_retractable_wheels, 0x5335BE58C083E74E, (), vehicle: Vehicle);
	native!(_get_can_vehicle_jump, 0x9078C0C5EF8C19E9, bool, vehicle: Vehicle);
	native!(_set_use_higher_vehicle_jump_force, 0xF06A16CA55D138D8, (), vehicle: Vehicle, toggle: bool);
	native!(_0xb2e0c0d6922d31f2, 0xB2E0C0D6922D31F2, (), vehicle: Vehicle, toggle: bool);
	native!(_set_vehicle_weapon_capacity, 0x44CD1F493DB2A0A6, (), vehicle: Vehicle, weapon_index: i32, capacity: i32);
	native!(_get_vehicle_weapon_capacity, 0x8181CE2F25CB9BB7, i32, vehicle: Vehicle, weapon_index: i32);
	native!(_get_vehicle_has_parachute, 0xBC9CFF381338CB4F, bool, vehicle: Vehicle);
	native!(_get_vehicle_can_activate_parachute, 0xA916396DF4154EE3, bool, vehicle: Vehicle);
	native!(_set_vehicle_parachute_active, 0x0BFFB028B3DD0A97, (), vehicle: Vehicle, active: bool);
	native!(_0x3de51e9c80b116cf, 0x3DE51E9C80B116CF, i32, p0: i32);
	native!(_set_vehicle_receives_ramp_damage, 0x28D034A93FE31BF5, (), vehicle: Vehicle, toggle: bool);
	native!(_set_vehicle_ramp_sideways_launch_motion, 0x1BBAC99C0BC53656, (), p0: i32, p1: i32);
	native!(_set_vehicle_ramp_upwards_launch_motion, 0x756AE6E962168A04, (), p0: i32, p1: i32);
	native!(_0x9d30687c57baa0bb, 0x9D30687C57BAA0BB, (), p0: i32);
	native!(_set_vehicle_weapons_disabled, 0x86B4B6212CB8B627, (), p0: i32, p1: i32);
	native!(_0x41290b40fa63e6da, 0x41290B40FA63E6DA, (), p0: i32);
	native!(_set_vehicle_parachute_model, 0x4D610C6B56031351, (), vehicle: Vehicle, model_hash: Hash);
	native!(_set_vehicle_parachute_texture_variatiion, 0xA74AD2439468C883, (), vehicle: Vehicle, texture_variation: i32);
	native!(_0x0419b167ee128f33, 0x0419B167EE128F33, i32, p0: i32, p1: i32);
	native!(_0xf3b0e0aed097a3f5, 0xF3B0E0AED097A3F5, i32, p0: i32, p1: i32);
	native!(_0xd3e51c0ab8c26eee, 0xD3E51C0AB8C26EEE, i32, p0: i32, p1: i32);
	native!(_get_all_vehicles, 0x9B8E1BF04B51F2E8, i32, vehs_struct: &mut i32);
	native!(_0x72beccf4b829522e, 0x72BECCF4B829522E, (), p0: i32, p1: i32);
	native!(_0x66e3aaface2d1eb8, 0x66E3AAFACE2D1EB8, (), p0: i32, p1: i32, p2: i32);
	native!(_0x1312ddd8385aee4e, 0x1312DDD8385AEE4E, (), p0: i32, p1: i32);
	native!(_0xedbc8405b3895cc9, 0xEDBC8405B3895CC9, (), p0: i32, p1: i32);
	native!(_0x26e13d440e7f6064, 0x26E13D440E7F6064, (), vehicle: Vehicle, value: f32);
	native!(_0x2fa2494b47fdd009, 0x2FA2494B47FDD009, (), p0: i32, p1: i32);
	native!(_set_vehicle_rocket_boost_percentage, 0xFEB2DDED3509562E, (), vehicle: Vehicle, percentage: f32);
	native!(_0x544996c0081abdeb, 0x544996C0081ABDEB, (), p0: i32, p1: i32);
	native!(_0x78ceee41f49f421f, 0x78CEEE41F49F421F, (), p0: i32, p1: i32);
	native!(_0xaf60e6a2936f982a, 0xAF60E6A2936F982A, (), p0: i32, p1: i32);
	native!(_0x430a7631a84c9be7, 0x430A7631A84C9BE7, (), p0: i32);
	native!(_0x75627043c6aa90ad, 0x75627043C6AA90AD, (), p0: i32);
	native!(_0x8235f1bead557629, 0x8235F1BEAD557629, (), p0: i32, p1: i32);
	native!(_0x9640e30a7f395e4b, 0x9640E30A7F395E4B, (), p0: i32, p1: i32, p2: i32, p3: i32, p4: i32);
	native!(_0x0bbb9a7a8ffe931b, 0x0BBB9A7A8FFE931B, (), p0: i32, p1: i32, p2: i32);
	native!(_0x94a68da412c4007d, 0x94A68DA412C4007D, (), p0: i32, p1: i32);
	native!(_set_vehicle_bomb_count, 0xF4B2ED59DEB5D774, (), vehicle: Vehicle, bomb_count: i32);
	native!(_get_vehicle_bomb_count, 0xEA12BD130D7569A1, i32, vehicle: Vehicle);
	native!(_set_vehicle_countermeasure_count, 0x9BDA23BF666F0855, (), vehicle: Vehicle, counter_measure_count: i32);
	native!(_get_vehicle_countermeasure_count, 0xF846AA63DF56B804, i32, vehicle: Vehicle);
	native!(_0x0a3f820a9a9a9ac5, 0x0A3F820A9A9A9AC5, (), p0: i32, p1: i32, p2: i32, p3: i32);
	native!(_0x51f30db60626a20e, 0x51F30DB60626A20E, i32, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32, p8: i32);
	native!(_0x97841634ef7df1d6, 0x97841634EF7DF1D6, (), p0: i32, p1: i32);
	native!(_set_vehicle_hover_transform_ratio, 0xD138FA15C9776837, (), vehicle: Vehicle, ratio: f32);
	native!(_set_vehicle_hover_transform_percentage, 0x438B3D7CA026FE91, (), vehicle: Vehicle, percentage: f32);
	native!(_set_vehicle_hover_transform_enabled, 0xF1211889DF15A763, (), p0: i32, p1: i32);
	native!(_set_vehicle_hover_transform_active, 0x2D55FE374D5FDB91, (), vehicle: Vehicle, toggle: bool);
	native!(_0x3a9128352eac9e85, 0x3A9128352EAC9E85, i32, p0: i32);
	native!(_0x8dc9675797123522, 0x8DC9675797123522, i32, p0: i32);
	native!(_0xb251e0b33e58b424, 0xB251E0B33E58B424, (), p0: i32, p1: i32, p2: i32);
	native!(_0xaef12960fa943792, 0xAEF12960FA943792, i32, p0: i32);
	native!(_0xaa653ae61924b0a0, 0xAA653AE61924B0A0, (), p0: i32, p1: i32);
	native!(_0xc60060eb0d8ac7b1, 0xC60060EB0D8AC7B1, (), p0: i32, p1: i32, p2: i32);
	native!(_set_specialflight_wing_ratio, 0x70A252F60A3E036B, (), vehicle: Vehicle, ratio: f32);
	native!(_0xe615bb7a7752c76a, 0xE615BB7A7752C76A, (), p0: i32, p1: i32);
	native!(_0x887fa38787de8c72, 0x887FA38787DE8C72, (), p0: i32);
	native!(_set_unk_float_0x104_for_submarine_vehicle_task, 0x498218259FB7C72D, (), vehicle: Vehicle, value: f32);
	native!(_set_unk_bool_0x102_for_submarine_vehicle_task, 0x41B9FB92EDED32A6, (), vehicle: Vehicle, value: bool);
	native!(_0x36de109527a2c0c4, 0x36DE109527A2C0C4, (), toggle: bool);
	native!(_0x82e0ac411e41a5b4, 0x82E0AC411E41A5B4, (), toggle: bool);
	native!(_0x99a05839c46ce316, 0x99A05839C46CE316, (), toggle: bool);
	native!(_get_is_vehicle_shunt_boost_active, 0xA2459F72C14E2E8D, bool, vehicle: Vehicle);
	native!(_0xe8718faf591fd224, 0xE8718FAF591FD224, bool, vehicle: Vehicle);
	native!(_get_last_rammed_vehicle, 0x04F2FA6E234162F7, Vehicle, vehicle: Vehicle);
	native!(_set_disable_vehicle_unk, 0x143921E45EC44D62, (), toggle: bool);
	native!(_set_vehicle_nitro_enabled, 0xC8E9B6B71B8E660D, (), vehicle: Vehicle, toggle: bool);
	native!(_set_vehicle_wheels_deal_damage, 0x2970EAA18FD5E42F, (), vehicle: Vehicle, toggle: bool);
	native!(_set_disable_vehicle_unk_2, 0x211E95CE9903940C, (), toggle: bool);
	native!(_0x5bbcf35bf6e456f7, 0x5BBCF35BF6E456F7, (), toggle: bool);
	native!(_get_does_vehicle_have_tombstone, 0x71AFB258CCED3A27, bool, vehicle: Vehicle);
	native!(_hide_vehicle_tombstone, 0xAE71FB656C600587, (), vehicle: Vehicle, toggle: bool);
	native!(_get_is_vehicle_emp_disabled, 0x0506ED94363AD905, bool, vehicle: Vehicle);
	native!(_0x8f0d5ba1c2cc91d7, 0x8F0D5BA1C2CC91D7, (), toggle: bool);
}

pub mod water {
	use super::*;

	native!(get_water_height, 0xF6829842C06AE524, bool, x: f32, y: f32, z: f32, height: &mut f32);
	native!(get_water_height_no_waves, 0x8EE6B53CE13A9794, bool, x: f32, y: f32, z: f32, height: &mut f32);
	native!(test_probe_against_water, 0xFFA5D878809819DB, bool, x1: f32, y1: f32, z1: f32, x2: f32, y2: f32, z2: f32, result: &mut Vec3);
	native!(test_probe_against_all_water, 0x8974647ED222EA5F, bool, p0: i32, p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, p6: i32, p7: i32);
	native!(test_vertical_probe_against_all_water, 0x2B3451FA1E3142E2, bool, x: f32, y: f32, z: f32, p3: i32, height: &mut f32);
	native!(modify_water, 0xC443FD757C3BA637, (), x: f32, y: f32, radius: f32, height: f32);
	native!(_add_current_rise, 0xFDBF4CDBC07E1706, i32, x: f32, y: f32, z: f32, radius: f32, unk: f32);
	native!(_remove_current_rise, 0xB1252E3E59A82AAF, (), p0: i32);
	native!(set_deep_ocean_scaler, 0xB96B00E976BE977F, (), intensity: f32);
	native!(get_deep_ocean_scaler, 0x2B2A2CC86778B619, f32);
	native!(_0x547237aa71ab44de, 0x547237AA71AB44DE, (), p0: f32);
	native!(reset_deep_ocean_scaler, 0x5E5E99285AE812DB, ());
}

pub mod weapon {
	use super::*;

	native!(enable_laser_sight_rendering, 0xC8B46D7727D864AA, (), toggle: bool);
	native!(get_weapon_component_type_model, 0x0DB57B41EC1DB083, Hash, component_hash: Hash);
	native!(get_weapontype_model, 0xF46CDC33180FDA94, Hash, weapon_hash: Hash);
	native!(get_weapontype_slot, 0x4215460B9B8B7FA0, Hash, weapon_hash: Hash);
	native!(get_weapontype_group, 0xC3287EE3050FB74C, Hash, weapon_hash: Hash);
	native!(_get_weapon_component_variant_extra_component_count, 0x6558AC7C17BFEF58, i32, component_hash: Hash);
	native!(_get_weapon_component_variant_extra_component_model, 0x4D1CB8DC40208A17, Hash, component_hash: Hash, extra_component_index: i32);
	native!(set_current_ped_weapon, 0xADF692B254977C0C, (), ped: Ped, weapon_hash: Hash, equip_now: bool);
	native!(get_current_ped_weapon, 0x3A87E44BB9A01D54, bool, ped: Ped, weapon_hash: &mut Hash, p2: bool);
	native!(get_current_ped_weapon_entity_index, 0x3B390A939AF0B5FC, Entity, ped: Ped);
	native!(get_best_ped_weapon, 0x8483E98E8B888AE2, Hash, ped: Ped, p1: bool);
	native!(set_current_ped_vehicle_weapon, 0x75C55983C2C39DAA, bool, ped: Ped, weapon_hash: Hash);
	native!(get_current_ped_vehicle_weapon, 0x1017582BCD3832DC, bool, ped: Ped, weapon_hash: &mut Hash);
	native!(_0x50276ef8172f5f12, 0x50276EF8172F5F12, (), ped: Ped);
	native!(is_ped_armed, 0x475768A975D5AD17, bool, ped: Ped, p1: i32);
	native!(is_weapon_valid, 0x937C71165CF334B3, bool, weapon_hash: Hash);
	native!(has_ped_got_weapon, 0x8DECB02F88F428BC, bool, ped: Ped, weapon_hash: Hash, p2: bool);
	native!(is_ped_weapon_ready_to_shoot, 0xB80CA294F2F26749, bool, ped: Ped);
	native!(get_ped_weapontype_in_slot, 0xEFFED78E9011134D, Hash, ped: Ped, weapon_slot: Hash);
	native!(get_ammo_in_ped_weapon, 0x015A522136D7F951, i32, ped: Ped, weaponhash: Hash);
	native!(add_ammo_to_ped, 0x78F0424C34306220, (), ped: Ped, weapon_hash: Hash, ammo: i32);
	native!(set_ped_ammo, 0x14E56BC5B5DB6A19, (), ped: Ped, weapon_hash: Hash, ammo: i32, p3: bool);
	native!(set_ped_infinite_ammo, 0x3EDCB0505123623B, (), ped: Ped, toggle: bool, weapon_hash: Hash);
	native!(set_ped_infinite_ammo_clip, 0x183DADC6AA953186, (), ped: Ped, toggle: bool);
	native!(give_weapon_to_ped, 0xBF0FD6E56C964FCB, (), ped: Ped, weapon_hash: Hash, ammo_count: i32, is_hidden: bool, equip_now: bool);
	native!(give_delayed_weapon_to_ped, 0xB282DC6EBD803C75, (), ped: Ped, weapon_hash: Hash, ammo_count: i32, equip_now: bool);
	native!(remove_all_ped_weapons, 0xF25DF915FA38C5F3, (), ped: Ped, p1: bool);
	native!(remove_weapon_from_ped, 0x4899CB088EDF59B8, (), ped: Ped, weapon_hash: Hash);
	native!(hide_ped_weapon_for_scripted_cutscene, 0x6F6981D2253C208F, (), ped: Ped, toggle: bool);
	native!(set_ped_current_weapon_visible, 0x0725A4CCFDED9A70, (), ped: Ped, visible: bool, deselect_weapon: bool, p3: bool, p4: bool);
	native!(set_ped_drops_weapons_when_dead, 0x476AE72C1D19D1A8, (), ped: Ped, toggle: bool);
	native!(has_ped_been_damaged_by_weapon, 0x2D343D2219CD027A, bool, ped: Ped, weapon_hash: Hash, weapon_type: i32);
	native!(clear_ped_last_weapon_damage, 0x0E98F88A24C5F4B8, (), ped: Ped);
	native!(has_entity_been_damaged_by_weapon, 0x131D401334815E94, bool, entity: Entity, weapon_hash: Hash, weapon_type: i32);
	native!(clear_entity_last_weapon_damage, 0xAC678E40BE7C74D2, (), entity: Entity);
	native!(set_ped_drops_weapon, 0x6B7513D9966FBEC0, (), ped: Ped);
	native!(set_ped_drops_inventory_weapon, 0x208A1888007FC0E6, (), ped: Ped, weapon_hash: Hash, x_offset: f32, y_offset: f32, z_offset: f32, ammo_count: i32);
	native!(get_max_ammo_in_clip, 0xA38DCFFCEA8962FA, i32, ped: Ped, weapon_hash: Hash, p2: bool);
	native!(get_ammo_in_clip, 0x2E1202248937775C, bool, ped: Ped, weapon_hash: Hash, ammo: &mut i32);
	native!(set_ammo_in_clip, 0xDCD2A934D65CB497, bool, ped: Ped, weapon_hash: Hash, ammo: i32);
	native!(get_max_ammo, 0xDC16122C7A20C933, bool, ped: Ped, weapon_hash: Hash, ammo: &mut i32);
	native!(_get_max_ammo_by_type, 0x585847C5E4E11709, bool, ped: Ped, ammo_type_hash: Hash, ammo: &mut i32);
	native!(_add_ammo_to_ped_by_type, 0x2472622CE1F2D45F, (), ped: Ped, ammo_type_hash: Hash, ammo: i32);
	native!(set_ped_ammo_by_type, 0x5FD1E1F011E76D7E, (), ped: Ped, ammo_type_hash: Hash, ammo: i32);
	native!(get_ped_ammo_by_type, 0x39D22031557946C1, i32, ped: Ped, ammo_type_hash: Hash);
	native!(set_ped_ammo_to_drop, 0xA4EFEF9440A5B0EF, (), ped: Ped, p1: i32);
	native!(_0xe620fd3512a04f18, 0xE620FD3512A04F18, (), p0: f32);
	native!(get_ped_ammo_type_from_weapon, 0x7FEAD38B326B9F74, Hash, ped: Ped, weapon_hash: Hash);
	native!(_get_ped_ammo_type_from_weapon_2, 0xF489B44DD5AF4BD9, Hash, ped: Ped, weapon_hash: Hash);
	native!(get_ped_last_weapon_impact_coord, 0x6C4D0409BA1A2BC2, bool, ped: Ped, coords: &mut Vec3);
	native!(set_ped_gadget, 0xD0D7B1E680ED4A1A, (), ped: Ped, gadget_hash: Hash, p2: bool);
	native!(get_is_ped_gadget_equipped, 0xF731332072F5156C, bool, ped: Ped, gadget_hash: Hash);
	native!(get_selected_ped_weapon, 0x0A6DB4965674D243, Hash, ped: Ped);
	native!(explode_projectiles, 0xFC4BD125DE7611E4, (), ped: Ped, weapon_hash: Hash, p2: bool);
	native!(remove_all_projectiles_of_type, 0xFC52E0F37E446528, (), weapon_hash: Hash, p1: bool);
	native!(get_lockon_distance_of_current_ped_weapon, 0x840F03E9041E2C9C, f32, ped: Ped);
	native!(get_max_range_of_current_ped_weapon, 0x814C9D19DFD69679, f32, ped: Ped);
	native!(has_vehicle_got_projectile_attached, 0x717C8481234E3B88, bool, driver: Ped, vehicle: Vehicle, weapon_hash: Hash, p3: i32);
	native!(give_weapon_component_to_ped, 0xD966D51AA5B28BB9, (), ped: Ped, weapon_hash: Hash, component_hash: Hash);
	native!(remove_weapon_component_from_ped, 0x1E8BE90C74FB4C09, (), ped: Ped, weapon_hash: Hash, component_hash: Hash);
	native!(has_ped_got_weapon_component, 0xC593212475FAE340, bool, ped: Ped, weapon_hash: Hash, component_hash: Hash);
	native!(is_ped_weapon_component_active, 0x0D78DE0572D3969E, bool, ped: Ped, weapon_hash: Hash, component_hash: Hash);
	native!(_ped_skip_next_reloading, 0x8C0D57EA686FAD87, bool, ped: Ped);
	native!(make_ped_reload, 0x20AE33F3AC9C0033, bool, ped: Ped);
	native!(request_weapon_asset, 0x5443438F033E29C3, (), weapon_hash: Hash, p1: i32, p2: i32);
	native!(has_weapon_asset_loaded, 0x36E353271F0E90EE, bool, weapon_hash: Hash);
	native!(remove_weapon_asset, 0xAA08EF13F341C8FC, (), weapon_hash: Hash);
	native!(create_weapon_object, 0x9541D3CF0D398F36, Object, weapon_hash: Hash, ammo_count: i32, x: f32, y: f32, z: f32, show_world_model: bool, heading: f32, p7: i32, p8: i32, p9: i32);
	native!(give_weapon_component_to_weapon_object, 0x33E179436C0B31DB, (), weapon_object: Object, addon_hash: Hash);
	native!(remove_weapon_component_from_weapon_object, 0xF7D82B0D66777611, (), p0: i32, p1: i32);
	native!(has_weapon_got_weapon_component, 0x76A18844E743BF91, bool, weapon: Object, addon_hash: Hash);
	native!(give_weapon_object_to_ped, 0xB1FA61371AF7C4B7, (), weapon_object: Object, ped: Ped);
	native!(does_weapon_take_weapon_component, 0x5CEE3DF569CECAB0, bool, weapon_hash: Hash, component_hash: Hash);
	native!(get_weapon_object_from_ped, 0xCAE1DC9A0E22A16D, Object, ped: Ped, p1: bool);
	native!(_give_loadout_to_ped, 0x68F8BE6AF5CDF8A6, (), ped: Ped, loadout_hash: Hash);
	native!(set_ped_weapon_tint_index, 0x50969B9B89ED5738, (), ped: Ped, weapon_hash: Hash, tint_index: i32);
	native!(get_ped_weapon_tint_index, 0x2B9EEDC07BD06B9F, i32, ped: Ped, weapon_hash: Hash);
	native!(set_weapon_object_tint_index, 0xF827589017D4E4A9, (), weapon: Object, tint_index: i32);
	native!(get_weapon_object_tint_index, 0xCD183314F7CD2E57, i32, weapon: Object);
	native!(get_weapon_tint_count, 0x5DCF6C5CAB2E9BF7, i32, weapon_hash: Hash);
	native!(_set_ped_weapon_livery_color, 0x9FE5633880ECD8ED, (), ped: Ped, weapon_hash: Hash, camo_component_hash: Hash, color_index: i32);
	native!(_get_ped_weapon_livery_color, 0xF0A60040BE558F2D, i32, ped: Ped, weapon_hash: Hash, camo_component_hash: Hash);
	native!(_set_weapon_object_livery_color, 0x5DA825A85D0EA6E6, (), weapon_object: Object, camo_component_hash: Hash, color_index: i32);
	native!(_get_weapon_object_livery_color, 0xB3EA4FEABF41464B, i32, weapon_object: Object, camo_component_hash: Hash);
	native!(_0xa2c9ac24b4061285, 0xA2C9AC24B4061285, i32, ped: Ped, weapon_hash: Hash);
	native!(_0x977ca98939e82e4b, 0x977CA98939E82E4B, (), weapon_object: Object, p1: i32);
	native!(get_weapon_hud_stats, 0xD92C739EE34C9EBA, bool, weapon_hash: Hash, out_data: &mut i32);
	native!(get_weapon_component_hud_stats, 0xB3CAF387AE12E9F8, bool, component_hash: Hash, out_data: &mut i32);
	native!(get_weapon_damage, 0x3133B907D8B32053, f32, weapon_hash: Hash, component_hash: Hash);
	native!(get_weapon_clip_size, 0x583BE370B1EC6EB4, i32, weapon_hash: Hash);
	native!(_get_weapon_time_between_shots, 0x065D2AACAD8CF7A4, f32, weapon_hash: Hash);
	native!(set_ped_chance_of_firing_blanks, 0x8378627201D5497D, (), ped: Ped, x_bias: f32, y_bias: f32);
	native!(set_ped_shoot_ordnance_weapon, 0xB4C8D77C80C0421E, Object, ped: Ped, p1: f32);
	native!(request_weapon_high_detail_model, 0x48164DBB970AC3F0, (), weapon_object: Entity);
	native!(_set_weapon_damage_modifier, 0x4757F00BC6323CFE, (), weapon_hash: Hash, damage_amount: f32);
	native!(is_ped_current_weapon_silenced, 0x65F0C5AE05943EC7, bool, ped: Ped);
	native!(is_flash_light_on, 0x4B7620C47217126C, bool, ped: Ped);
	native!(set_flash_light_fade_distance, 0xCEA66DAD478CD39B, i32, distance: f32);
	native!(set_weapon_animation_override, 0x1055AC3A667F09D9, (), ped: Ped, anim_style: Hash);
	native!(get_weapon_damage_type, 0x3BE0BB12D25FB305, i32, weapon_hash: Hash);
	native!(_0xe4dcec7fd5b739a5, 0xE4DCEC7FD5B739A5, (), ped: Ped);
	native!(can_use_weapon_on_parachute, 0xBC7BE5ABC0879F74, bool, weapon_hash: Hash);
	native!(_create_air_defense_sphere, 0x91EF34584710BE99, i32, p0: f32, p1: f32, p2: f32, radius: f32, p4: f32, p5: f32, p6: f32, weapon_hash: Hash);
	native!(_create_air_defense_area, 0x9DA58CDBF6BDBC08, i32, p0: f32, p1: f32, p2: f32, p3: f32, p4: f32, p5: f32, p6: f32, p7: f32, p8: f32, p9: f32, weapon_hash: Hash);
	native!(_remove_air_defense_zone, 0x0ABF535877897560, bool, zone_id: i32);
	native!(_remove_all_air_defense_zones, 0x1E45B34ADEBEE48E, ());
	native!(_set_player_air_defense_zone_flag, 0xECDC202B25E5CF48, (), player: Player, zone_id: i32, enable: bool);
	native!(_is_air_defense_zone_inside_sphere, 0xDAB963831DBFD3F4, bool, x: f32, y: f32, z: f32, radius: f32, zone_id: i32);
	native!(_fire_air_defense_weapon, 0x44F1012B69313374, (), zone_id: i32, x: f32, y: f32, z: f32);
	native!(_does_air_defense_zone_exist, 0xCD79A550999D7D4F, bool, zone_id: i32);
	native!(_set_can_ped_equip_weapon, 0xB4771B9AAF4E68E4, (), ped: Ped, weapon_hash: Hash, toggle: bool);
	native!(_set_can_ped_equip_all_weapons, 0xEFF296097FF1E509, (), ped: Ped, toggle: bool);
}

pub mod zone {
	use super::*;

	native!(get_zone_at_coords, 0x27040C25DE6CB2F4, i32, x: f32, y: f32, z: f32);
	native!(get_zone_from_name_id, 0x98CD1D2934B76CC1, i32, zone_name: *const c_char);
	native!(get_zone_popschedule, 0x4334BC40AA0CB4BB, i32, zone_id: i32);
	native!(get_name_of_zone, 0xCD90657D4C30E1CA, *const c_char, x: f32, y: f32, z: f32);
	native!(set_zone_enabled, 0xBA5ECEEA120E5611, (), zone_id: i32, toggle: bool);
	native!(get_zone_scumminess, 0x5F7B268D15BA0739, i32, zone_id: i32);
	native!(override_popschedule_vehicle_model, 0x5F7D596BAC2E7777, (), schedule_id: i32, vehicle_hash: Hash);
	native!(clear_popschedule_override_vehicle_model, 0x5C0DE367AA0D911C, (), schedule_id: i32);
	native!(get_hash_of_map_area_at_coords, 0x7EE64D51E8498728, Hash, x: f32, y: f32, z: f32);
}
